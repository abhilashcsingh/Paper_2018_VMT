library maxlik;
maxset;
cls;
format /m1/rzt 1,6;

clearg All_Nominal;

Drive = "C:/";                                               
runpath = Drive $+ "gauss17/";                   /* Location for generation of temparory files */
outpath = Drive $+ "gauss17/";                 /* Location for estimation result file */


nind = 11843;
nobs = nind;
_row = nobs;
_randper = 1;
_randd = 0;


negative_infinity = -100;
positive_infinity = 100;
negative_infinity_d = 0;
positive_infinity_d = 0;

MACML_run = 1;
upper_limit = 1e-100;

//------------------------------------------------------------------------------------------------------------------------------------
gradient_limit  = 1e-4;
Standard_error_matrix = 2;
Analytic_Gradient_ON = 1;  
Gradient_Check       = 0; 
Force_converegnce    = 1;  
//_max_GradCheckTol = 1e-8;
//------------------------------------------------------------------------------------------------------------------------------------
MACML_seed = {300000,300010,300020,300030,300040,300050,300060,300070,300080,300090};
seed10 = MACML_seed[MACML_run];

dataset  = "C:\\gauss17\\datasep.dat";
 
 logfile= outpath $+ "Out_september_model.txt";
 OUTPUT FILE= ^logfile ON;outwidth 250;format /m1 /rzt 1,15; OUTPUT reset;
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
/* Position of UNO variable (i.e., the column of ones) in data set. 
   The dataset should consist of a column of ones.
   Modify if the label (in double-quotes) of the column of ones in your dataset is different from "uno"  */

{ unov,ivuno } = indices(dataset,"uno");

/* Position of cero variable (i.e., the column of zeros) in data set. 
   The dataset should consist of a column of zeros.
   Modify if the label (in double-quotes) of the column of zeros in your dataset is different from "cero"  */

{ cerov,ivcero } = indices(dataset,"sero");

 /*Measurement Equation Specification*/ 
 let WalkDC     =  { uno   numadult numsch  numppl  shopdum socdum  eatdum  };
  
 { q1,iclt1 } = indices(dataset,WalkDC');
 
  nvarmC = cols(WalkDC);
  ivgenvC = iclt1';
 
//  { c1,WDCID  }   = indices(dataset,"walkd");  // 0.3807  1.5839
  { c2,BDCID  }   = indices(dataset,"LogTime");  // 0.1038  0.3496 
//  { c3,ADCID  }   = indices(dataset,"ovactd"); // 0.7178  3.3468
//  { c4,MADCID }   = indices(dataset,"omactd"); // 0.6457  2.7508
  
  Continous_Index = BDCID;
  
//  Main_data[.,Continous_Index] = Main_data[.,Continous_Index]./600;
  
  Gamma_Coeff = { 
0.01
0.01
0.01
0.01
0.01
0.01
0.01
 };
	  
  Gamma_Coeff=Gamma_Coeff';  
  
  Omega = 1;
  
  
  bb = Gamma_Coeff|chol(Omega);
	
	Gamma_Active = Gamma_Coeff .ne 0;
	Omega_active = 1;
	
	_max_active = Gamma_Active|Omega_active;
	
	Gamma_nam         =  0 $+ "Gamma" $+ ftocv(seqa(1,1,nvarmC),2,0);
	Omega_nam         =  0 $+ "Omega" $+ ftocv(seqa(1,1,1),2,0);
	
	_max_ParNames = Gamma_nam|Omega_nam;
	
	max_GradTol = 1e-04;
	_max_MaxIters = 500;
	_max_Options = { bfgs stepbt };
	_max_CovPar = 2;
	//_max_GradProc = &lgd;

	clearg Gradient_Store,Gradient_Store1;
	{ x,f,g,cov,retcode } = maxprt(maxlik(dataset,0,&lpr,bb));
	
	delta1          = x[1:nvarmC];
	Omega1          = x[nvarmC+1];
    Omega1          =  Omega1^2;
	
	bb1 = delta1|Omega1;
		
	//_max_MaxIters = 0;
	//_max_Options = { bfgs stepbt };
	//_max_CovPar = 1;
	//_max_GradProc = &lgd1;

	{ x,f,g,cov,retcode } = maxprt(maxlik(dataset,0,&lpr1,bb1));
	
	proc lpr(parm,dta);
		local delta_coeff,Chol_Omega,Omega,Gamma_X,y2,threshold_matrix,Likelihood,LL;
		local mean,rho_low,rho_up,p2_temp,Diff_Mean,Diff_Mean_mu;		
		
		delta_coeff         = parm[1:nvarmC];
		Chol_Omega          = parm[nvarmC+1];
        Omega               = Chol_Omega'*Chol_Omega;
	
        Gamma_X = (delta_coeff)  *~(dta[.,ivgenvC])';
	    y2 = sumc(Gamma_X);	
		
		Likelihood = {};
		for i(1,nobs,1);
			LL = 0;
			Diff_Mean     = (dta[i,Continous_Index]);      
	        Diff_Mean_mu  = y2[i,1];
		    
		    p2_temp = pdfmvn(Diff_Mean,Diff_Mean_mu,Omega);	
			if(p2_temp > upper_limit);
			   LL = ln(p2_temp);
		    else;
			   LL = ln(p2_temp-((p2_temp<=upper_limit)*(p2_temp-upper_limit))); 
		    endif;
			
		    Likelihood = Likelihood | LL;
			
		endfor;
		retp(Likelihood);
		clear y2;
	endp;
	
	proc lpr1(parm,dta);
		local delta_coeff,Chol_Omega,Omega,Gamma_X,y2,threshold_matrix,Likelihood,LL;
		local mean,rho_low,rho_up,p2_temp,Diff_Mean,Diff_Mean_mu;		
		
		delta_coeff         = parm[1:nvarmC];
		Chol_Omega          = parm[nvarmC+1];
        Omega               = Chol_Omega;
	
        Gamma_X = (delta_coeff)  *~(dta[.,ivgenvC])';
	    y2 = sumc(Gamma_X);	
		
		Likelihood = {};
		for i(1,nobs,1);
			LL = 0;
			Diff_Mean     = (dta[i,Continous_Index]);      
	        Diff_Mean_mu  = y2[i,1];
		    
		    p2_temp = pdfmvn(Diff_Mean,Diff_Mean_mu,Omega);	
			if(p2_temp > upper_limit);
			   LL = ln(p2_temp);
		    else;
			   LL = ln(p2_temp-((p2_temp<=upper_limit)*(p2_temp-upper_limit))); 
		    endif;
			
		    Likelihood = Likelihood | LL;
			
		endfor;
		retp(Likelihood);
		clear y2;
	endp;
	
	
	
	
	
	
	
	
	proc(1)= pdfmvn(x,mu,s);
	 local d,p,p1,p2;
	 d = rows(x);
	 p1 = exp(-0.5*((x-mu)'*inv(s)*(x-mu)));
	 p2 = ((2*pi)^(d/2))*sqrt(det(s));
	 p = p1/p2;
	 retp(p);
 endp;
 

proc(1)=pdfgmean(x,mu,s);
    local d,p,p1,p2,p3,grad1,grad,store,ie;
	 d = rows(x);
	 p1 = exp(-0.5*((x-mu)'*inv(s)*(x-mu)));
	 p2 = ((2*pi)^(d/2))*sqrt(det(s));
	 p3 = inv(s);
	 p = p1/p2;
	 store = zeros(d,1);
	 for ie(1,d,1);
		  grad = -1*((x-mu).*p3[.,ie]);
		  grad1 = sumc(grad);
		  grad1 = p*grad1;
		  store[ie] = grad1;
	 endfor;
	 retp(store);
endp;

proc(1)=pdfgcov(x,mu,r);
	local d,p1,p2,p,p4,out,i,j,diff_matrix,part11,part12,part13,part1,s,ncholerr,diff_matrix1;
    local part21,part22,part23,part24,part2,gradient;
    d = rows(x);
    s = xpnd(r);
	ncholerr = rows(r);
    p1 = exp(-0.5*((x-mu)'*inv(s)*(x-mu)));
    p2 = ((2*pi)^(d/2));
    p = p1/p2;
    p4 = inv(s);
    out = {};
    for i(1,ncholerr,1);
        
            diff_matrix1 = zeros(ncholerr,1);
			diff_matrix1[i,1]= 1;
			diff_matrix = xpnd(diff_matrix1);
            
            part11 = p4*diff_matrix;
            part12 = diag(part11);
            part13 = sumc(part12);
            part1 = -0.5*part13;
            part1 = part1/sqrt(det(s));
            
            part21 = (((p4*(x-mu))*(x-mu)')*p4);
            part22 = part21*diff_matrix;
            part23 = diag(part22);
            part24 = sumc(part23);
            part2 = 0.5*part24;
            part2 = part2/sqrt(det(s));
            
            gradient = p*(part1 + part2);
            out = out | gradient;
        
    endfor;
    retp(out);
endp;

  
 
