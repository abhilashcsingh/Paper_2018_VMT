/* Don't transform the continous variables on to logarthmic scale. The code does that internally  */
library maxlik;
maxset;
cls;
format /m1/rzt 1,6;
load Main_data[3000,72] = C:/gauss17/dataset.csv;
/* kkk */


Drive = "C:/";
runpath = Drive $+ "gauss17/jointout/";                   /* Location for generation of temparory files */
outpath = Drive $+ "gauss17/jointout/";                 /* Location for estimation result file */

/* kkk */
nind = 3000;                                              /* Total number of observation */
nobs = nind;
_row = nobs;
_randper = 1;
_randd = 0;

allHaltDraws    = HaltonSequence(nobs*210+10,10);
abscissae_trunc = 1;
_halt_maxdraws  = nobs*210+10 ;
_halt_numdraws  = 200;
nrep            = _halt_numdraws;

nvar_mear_cont  = 1;              /* Total Number of continous variables in the measurement equation */
nvar_mear_ordl  = 0;              /* Total Number of ordinal variables in the measurement equation */
nvar_mear_grup  = 0;              /* Total Number of grouped variables in the measurement equation */
nvar_mear_count = 0;              /* Total Number of count variables in the measurement equation */

nvar_mear       = nvar_mear_cont + nvar_mear_ordl + nvar_mear_grup + nvar_mear_count;
nvar_ogc        = nvar_mear_ordl + nvar_mear_grup + nvar_mear_count;


auxiliar=ones(nobs-10,1)|2|2|2|2|2|2|2|2|2|2;

Main_data = Main_data ~ auxiliar;



All_Nominal = {};
/*------------------------------------------------------------------------------------------------------------------------
Specify the Number of Options for each Nominal Variable.
if you have at least one nominal variable with three or more options, you must provide the number of options correponding to that nominal variable first followed by
other nominal variables. That is, you must first provides the number of options correponding to nominal variables with three or more options followed by binary unordered variables.

If you do not have any nominal variable with three or more options, simply provide the number of options for each of the binary unordered variable.
--------------------------------------------------------------------------------------------------------------------------*/
All_Nominal = All_Nominal ~ (3~2);       /* Read the comment above to change this variable. Should be a row vector of size equal to number of nominal variables. */  /* kkk */
/****************************************************************************************************************************/
num_nominal = rows(All_Nominal');
Num_MNP     = sumr(All_Nominal .> 2);

Nominal_csum    = cumsumc(All_Nominal');
Alternative_all = sumc(All_Nominal');

M_mat_Track         = All_Nominal - 1;
M_mat_Track_csum    = cumsumc(M_mat_Track');

negative_infinity = -100;
positive_infinity = 100;
negative_infinity_d = 0;
positive_infinity_d = 0;

MACML_run = 1;
/*------------------------------------------------------------------------------------------------------------------------
Specify the Number of categories for each of the ordinal Variable.
if you have ordinal variables in your measurement equation, provide the number of categories for each of the ordinal variable, otherwise
leave the specification as it is.
--------------------------------------------------------------------------------------------------------------------------*/

if(nvar_mear_ordl > 0);
    num_ordl_cat = { 5, 3, 3 };                          /* Read the comment above to change this variable. Should be a column vector of size equal to number of ordinal variables. */
    num_ordl_cat = num_ordl_cat[1:nvar_mear_ordl];
    num_ordl_cat_req1 = num_ordl_cat - 2;
    num_ordl_cat_req = sumc(num_ordl_cat_req1);
    num_ordl_cat_req_csum = cumsumc(num_ordl_cat_req1);
    Highest_scale = maxc(num_ordl_cat_req1);
endif;

/*****************************************************************************
Estimation Settings
*****************************************************************************/
if(nvar_ogc > 1);
    Com_ogc_r     = numCombinations(nvar_ogc,2);
else;
    Com_ogc_r = 1;
endif;

if(nvar_ogc > 0);
    Com_ogcn_r    = nvar_ogc*num_nominal;
else;
    Com_ogcn_r    = 1;
endif;

if(num_nominal > 1);
    Com_nn_r      = numCombinations(num_nominal,2);
else;
    Com_nn_r      = 1;
endif;

if(nvar_ogc > 0);
    H_Err_ogcn   = ((maxc(All_Nominal')+1)*(maxc(All_Nominal')))/2;
    Com_ogcn_c   = 2*H_Err_ogcn + 1;
else;
    Com_ogcn_c   = 1;
endif;

if(num_nominal > 1);
    H_Err_nn      = ((maxc(All_Nominal')-1)*(maxc(All_Nominal')))/2;
    Com_nn_c      = 2*H_Err_nn + 2*H_Err_nn + 1;
else;
    Com_nn_c     = 1;
endif;

gradient_limit       = 1e-04;    /* Gradient limit for convergence */  /* kkk */
Gradient_Check       = 0;
upper_limit          = 1e-5;     /* Upper probability limit */  /* kkk */
MACML_run            = 1;
MACML_seed = {30000,300010,300020,300030,300040,300050,300060,300070,300080,300090};
seed10 = MACML_seed[MACML_run];

dataset = runpath $+ "syndata_Joint_July27_prueba_v2.dat";  /* kkk */
dataset_out = runpath $+ "myfile_mod_Joint_July27_prueba_v2.txt";  /* kkk */

Main_data = Main_data ;
/* kkk */
vnames1 = {  sampn	htaz	vmt	vmtrange	lnvmtone	vmtone	resden	denchoc	lowden	medden	highden	hhsize	hhchild	chpre6	ch6to16	chpre16	sinper	sinpar	couple	nucfam	joinfam	mufamno	mufamyes	workfem	inbel30	in30t75	in75t150	inab150	inab75	fragb16	frag1635	frag3555	frag5565	fraga65	white	africam	hisp	asianoth	nonwhite	detach	atachoth	condo	frworkm	frworkf	hhlic	hhveh	hhstu	uno	sero	tazarea	tazpoptt	tazpophh	tazemptt	tazelf	tazempre	tazempof	tazhhnum	tazhhsiz	tazhhinc	tazearn	tazenrol	tazk12tt	hxcord	hycord	tazgqpop	tazgqins	tazgqstr	tazgqoth fracft fracpt fracunem fracself };
vnames2 = { vehaux };


vnames = vnames1~vnames2;


ntot = cols(vnames);
check2 = ntot;

fin = 0;
create fin = ^dataset with ^vnames, ntot, 8, 8;
obs = 0;
nr = 1;
nobs_new = 3000;
do while obs < nobs_new;
    dat = {};
    dat = dat ~ Main_data[obs+1,.] ;
    if writer(fin,dat) /= nr;
        print "Disk Full";
        end;
    endif;
    obs= obs+nr;
endo;
closeall fin;

invar = getname(dataset);
outvar = invar;

call initalize(dataset);

proc(0)= initalize(dataset);
    local add_data,fout,y,fpin,nin,outdata;
    clear fin;
    open fin = ^dataset;
    fpin = typef(fin);
    nin = rowsf(fin);
    do until eof(fin);
        add_data = readr(fin,nobs_new);
    endo;
    if fin > 0;
        fin = close(fin);
    endif;
    outdata = add_data ;
    create fout = ^dataset with ^outvar,0,8;
    y = writer(fout,outdata);
    if fout > 0;
        fout = close(fout);
    endif;
endp;

open f1 = ^dataset;
assign = readr(f1,nobs_new);
outwidth 200;
output file = ^dataset_out;
output reset;
screen off;
print assign;
output off;
screen on;

logfile= outpath $+ "Output_Joint_July27_prueba_v2" $+ ".txt";
OUTPUT FILE= ^logfile ON;
outwidth 250;
format /m1 /rzt 1,15;
OUTPUT reset;

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
/* Position of UNO variable (i.e., the column of ones) in data set.
The dataset should consist of a column of ones.
Modify if the label (in double-quotes) of the column of ones in your dataset is different from "uno"  */

{ unov,ivuno } = indices(dataset,"uno");

/* Position of SERO variable (i.e., the column of zeros) in data set.
The dataset should consist of a column of zeros.
Modify if the label (in double-quotes) of the column of zeros in your dataset is different from "sero"  */

{ serov,ivsero } = indices(dataset,"sero");
/* kkk */                                                                                                                               // SPECIFICATION FOR CONTINUOUS VARIABLE
let icl1 = { uno   inbel30   in30t75   lowden  medden  couple nucfam joinfam     africam hisp    workfem   };

{ q1,iclt1 } = indices(dataset,icl1');

ivgenvC = iclt1' ;
nvarmC = cols(icl1);
/* kkk */                                                                    // name of your continuous variable (VMT variable) in line 213
{ c1,G1ID } = indices(dataset,"vmtone");


/* if there are continous variables in the measurement equation, specify their column index numbers    */
if(nvar_mear_cont > 0);
    Continous_Index = G1ID ;
    Main_data[.,Continous_Index] = ln(Main_data[.,Continous_Index]+ones(nobs,1));
endif;

/* if there are ordinal variables in the measurment equation, specify their column index numbers    */
if(nvar_mear_ordl > 0);
    Ordinal_Index = G1ID ;
endif;

/* if there are grouped variables in the measurment equation, specify their column index numbers    */
if(nvar_mear_grup > 0);
    Group_Index = G1ID;
endif;

/* if there are count variables in the measurment equation, specify their column index numbers    */
if(nvar_mear_count > 0);
    Count_Index  = G1ID;
    threshCountMax_Global = maxc(maxc(Main_data[.,Count_Index]));
endif;

/* MNP utility specification */                      /* kkk */                                                                                     // SPECIFICATION FOR  MNP  VARIABLE
//let if1 = { sero    sero                          sero         sero              sero          sero          sero    sero   sero         sero       sero                               };
//let if2 = { uno     sero                          in30t75    sero             africam    sero         hisp    sero    detach     sero      couple                           };
//let if3 = { sero    uno                           in30t75    in75t150     sero          africam   sero    hisp    sero     detach      couple                           };

let if1 = { sero    sero    sero            sero         sero              sero          sero          sero    sero   sero         sero       sero                               };
let if2 = { uno     sero    inbel30     in30t75    sero             africam    sero         hisp    sero    detach     sero      couple                           };
let if3 = { sero    uno     inbel30     in30t75    in75t150     sero          africam   sero    hisp    sero     detach      couple                           };

{ v1,itf1 } = indices(dataset,if1');
{ v2,itf2 } = indices(dataset,if2');
{ v3,itf3 } = indices(dataset,if3');


/* VEH utility specification */
let if4 = { sero  }; //sufficient
let if5 = { uno   }; //insufficient

{ v1,ivat1 } = indices(dataset,if1');
{ v2,ivat2 } = indices(dataset,if2');
{ v3,ivat3 } = indices(dataset,if3');

{ v4,ivat4 } = indices(dataset,if4');
{ v5,ivat5 } = indices(dataset,if5');



/* Packing choice model variables utility specification in a vector at a time */    /* kkk */
ivgenva1 = ivat1' ~ ivat2' ~ ivat3' ;
ivgenva2 = ivat4' ~ ivat5' ;

ivgenva = ivgenva1 ~ ivgenva2;

/* Total number of variables in the utility specification for each of the unordered variables */    /* kkk */
nvarma1 = cols(if1);
nvarma2 = cols(if4);


nvarma_all = {};    /* kkk */
/* The ordering of column indicators of utility specification should be same as the ordering provided in the variable 'All_Nominal' */
nvarma_all = nvarma_all ~(nvarma1~nvarma2);
nvarma_csum = cumsumc(nvarma_all');
nvarma = sumr(nvarma_all);
/* kkk */                                                                              // name of your MNP variable should be in line 281; The MNP variable should be coded as 1,2,3 with 1 being the base alternative
{ ch1, Altchm1   } = indices(dataset,"denchoc");




{ ch2, Altchm2   } = indices(dataset,"vehaux");  /* kkk */

//Altchm = Altchm1;  /* kkk */
Altchm = Altchm1 ~ Altchm2;    /* kkk */

{iaval1,wt1aval}  = indices(dataset,"uno");
Avalability = wt1aval ~ wt1aval ~ wt1aval ~ wt1aval ~ wt1aval;

iteration_limit      = 500;    /* maximum number of iteration */ /* kkk */
Force_converegnce    = 1;      /* Make this 1, if you want to stop the estimation based on maximum number of iteration */ /* kkk */

//------------------------------------------------------------------------------------------------------------------
Gamma_Coeff = {
1.97
-0.8331
-0.2269
1.2671
0.9605
0.3581
0.4362
0.5534
-0.4249
-0.5099
0.3732
    };    /* kkk */      // put the inital values u get from regression  in beta1

Gamma_Coeff = Gamma_Coeff';


beta1 = {
-0.016
0.1519
0.1335
0.1102
0.1131
0.2803
0.2477
0.4174
0.444
-0.1633
-0.5976
-0.0899
};    /* kkk */

beta1=beta1~0.0;
beta1 = beta1';
/* kkk */
// To include the correlation matrix between the two variables (joint estimation) you should modify first thing as the initial values (ignore the last row)
Lamda_error = {  1.5235
                                  0.00 1.00
                                  0.00 0.50 1.00
                                  0.00 0.00 0.00 1.00  };
//Element 1,1 is the variance of the error term of the continuous variable; Change to the variance of error term of cont. variable from regression analysis

// Element 2,2 is the variance of the utilitity difference between the second alternative and the base alternative.
//For identification this element should be always equal to 1 and should be always be fixed in your estimation.

//Element 3,3, is the variance of the utilitity difference between the third alternative and the base alternative.

// The other parameters are the correlation (between alternatives or between the VMT and the alternatives).

Lamda_error = xpnd(Lamda_error');
All_nCholerr = rows(Lamda_error)*(rows(Lamda_error)+1)*0.5;

if(nvar_mear_count > 0);
    Num_Phi = { 1 };
    Phi_temp1 = { 0.75 };
    
    Phi_temp1 = Phi_temp1';
    Highest_Phi = maxc(Num_Phi);
    Total_Phi = sumc(Num_Phi);
    num_Phi_csum = cumsumc(Num_Phi);
    Phi_temp = zeros(nvar_mear_count,Highest_Phi);
    
    for i(1,nvar_mear_count,1);
        if(i == 1);
            Phi_temp[i,1:Num_Phi[i]] = (Phi_temp1[1:num_Phi_csum[i]])';
        else;
            Phi_temp[i,1:Num_Phi[i]] = (Phi_temp1[num_Phi_csum[i-1]+1:num_Phi_csum[i]])';
        endif;
    endfor;
    
    Threshold_Phi = zeros(nvar_mear_count,Highest_Phi);
    Threshold_Phi[1:nvar_mear_count,1] = Phi_temp[1:nvar_mear_count,1];
    for j(1,nvar_mear_count,1);
        if(Num_Phi[j] > 1);
            for i(2,Num_Phi[j],1);
                Threshold_Phi[j,i] = Phi_temp[j,i] -Phi_temp[j,i-1];
            endfor;
        endif;
    endfor;
    
    Phi = {};
    for i(1,nvar_mear_count,1);
        Phi = Phi | (Threshold_Phi[i,1:Num_Phi[i]])';
    endfor;
    Phi_Pass = ln(Phi);
endif;

if(nvar_mear_ordl > 0);
    threshold_temp = { 0.5 1.0 1.5 };
    Testing_Threshold = zeros(nvar_mear_ordl,Highest_scale);
    threshold_temp = threshold_temp';
    for i(1,nvar_mear_ordl,1);
        if(i == 1);
            Testing_Threshold[i,1:num_ordl_cat_req1[i]] = (threshold_temp[1:num_ordl_cat_req_csum[i]])';
        else;
            Testing_Threshold[i,1:num_ordl_cat_req1[i]] = (threshold_temp[num_ordl_cat_req_csum[i-1]+1:num_ordl_cat_req_csum[i]])';
        endif;
    endfor;
    
    Testing_Threshold_unit = zeros(nvar_mear_ordl,Highest_scale);
    Testing_Threshold_unit[1:nvar_mear_ordl,1] = Testing_Threshold[1:nvar_mear_ordl,1];
    for j(1,nvar_mear_ordl,1);
        if(num_ordl_cat_req1[j] > 1);
            for i(2,num_ordl_cat_req1[j],1);
                Testing_Threshold_unit[j,i] = Testing_Threshold[j,i] - Testing_Threshold[j,i-1];
            endfor;
        endif;
    endfor;
    
    threshold_vector = {};
    for i(1,nvar_mear_ordl,1);
        threshold_vector = threshold_vector | (Testing_Threshold_unit[i,1:num_ordl_cat_req1[i]])';
    endfor;
    
    threshold_vector_pass = ln(threshold_vector);
endif;

if(nvar_mear_grup > 0);
    
    Group_Threshold = { -10.30 0.00  0.41   0.69  0.92    1.10  4.61  -1.00  -1.00 ,
        -2.30  0.40  0.92   1.61  2.02    2.30  2.53   2.71   4.61 ,
        -2.30  0.00  0.41   0.69  0.92    1.10  4.61  -1.00  -1.00 ,
        -2.30  0.69  1.61   2.30  2.71    3.00  3.28   4.61  -1.00 } ;
    
    Num_group = {};
    for i(1,nvar_mear_grup,1);
        Num_group = Num_group | (sumr(Group_Threshold[i,.] .ne -1));
    endfor;
    
    Num_group = Num_group - 1 ;
endif;

if(nvar_mear_ordl == 0);
    num_ordl_cat_req = 0;
endif;


//-----------------------------------------------------------------------------------------------------------------
dgp_X = Gamma_Coeff|beta1|vech(Lamda_error);
bb    = dgp_X[1:nvarmC]
    |dgp_X[nvarmC+1:nvarmC+nvarma]
    |vech(chol(xpnd(dgp_X[nvarmC+nvarma+1:nvarmC+nvarma+All_nCholerr]))');

if(nvar_mear_ordl > 0);
    dgp_X = dgp_X | threshold_vector_pass;
    bb = bb |dgp_X[nvarmC+nvarma+All_nCholerr+1:nvarmC+nvarma+All_nCholerr+num_ordl_cat_req];
endif;

r_dgp_X = rows(dgp_X);
if(nvar_mear_count > 0);
    dgp_X =  dgp_X | Phi_Pass ;
    bb    =  bb | dgp_X[r_dgp_X+1:r_dgp_X+Total_Phi];
endif;


D_matrix = zeros(nvar_mear+Alternative_all,nvar_mear+Alternative_all-num_nominal);
D_matrix[1:nvar_mear,1:nvar_mear] = eye(nvar_mear);

for i(1,num_nominal,1);
    if(i == 1);
        temp_num1 = nvar_mear+2;
        temp_num2 = nvar_mear+Nominal_csum[i,1];
        col_num1 = nvar_mear+1;
        col_num2 = nvar_mear+M_mat_Track_csum[i,1];
    else;
        temp_num1 = nvar_mear+Nominal_csum[i-1,1]+2;
        temp_num2 = nvar_mear+Nominal_csum[i,1];
        col_num1 = nvar_mear+M_mat_Track_csum[i-1,1]+1;
        col_num2 = nvar_mear+M_mat_Track_csum[i,1];
    endif;
    
    D_matrix[temp_num1:temp_num2,col_num1:col_num2] = eye(All_Nominal[1,i]-1);
endfor;

Error_Map = {};
if(nvar_ogc > 0);
    for i(1,nvar_ogc,1);
        row_num = nvar_mear_cont+1;
        Error_Map = Error_Map | i;
    endfor;
endif;

for i(1,num_nominal,1);
    if(i == 1);
        row_num = nvar_mear+1;
    else;
        row_num = nvar_mear+M_mat_Track_csum[i-1,1]+1;
    endif;
    Error_Map = Error_Map | row_num;
endfor;
//--------------------------------------------------------------------------------------------------------------------------------------------
Gamma_active = Gamma_Coeff .ne 0;   //a=cols(Gamma_active); b=rows(Gamma_active); print a; print b;
//Gamma_active =  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0} ;
beta_active  = beta1 .ne 0;    //c=cols(beta_active); d=rows(beta_active);   print c; print d;                   /* kkk */   // I guess we'll have to change this Lambda_error_active too
//beta_active= {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0} ;
// To include the correlation matrix between the two variables (joint estimation) modify _max_active vector
// to see which elements of the matrix you want to estimate (starts in line 472, ignore the last row)
Lamda_error_active = 1|
                                             0|0|
                                             0|0|0|
                                             0|0|0|0;
// probably change above matrix elements to one to let them change!  /*kkk*/

if(nvar_mear_ordl > 0);
    Threshold_active = ones(num_ordl_cat_req,1);
endif;

if(nvar_mear_count > 0);
    Phi_active   = Phi_temp1 .ne 0.0001;
endif;
/* kkk */                                                                                                                   // change to see which elements of the matrix you want to estimate
_max_active = Gamma_active|beta_active|Lamda_error_active;
//_max_active = Lamda_error_active;
if(nvar_mear_ordl > 0);
    _max_active = _max_active | Threshold_active;
endif;

if(nvar_mear_count > 0);
    _max_active = _max_active | Phi_active;
endif;

Gamma_Coeff_nam   =  0 $+ "Gamma" $+ ftocv(seqa(1,1,nvarmC),2,0);
Beta_nam          =  0 $+ "Beta" $+ ftocv(seqa(1,1,nvarma-1),2,0);
Lamda_nam         =  0 $+ "Err1_" $+ ftocv(seqa(1,1,All_nCholerr),2,0);

if(nvar_mear_ordl > 0);
    Threshold_nam     =  0 $+ "Th_" $+ ftocv(seqa(1,1,num_ordl_cat_req),2,0);
endif;

if(nvar_mear_count > 0);
    Phi_nam           =  0 $+ "Phi" $+ ftocv(seqa(1,1,Total_Phi),2,0);
endif;

_max_ParNames = Gamma_Coeff_nam|Beta_nam|"Auxiliar"|Lamda_nam ;
// _max_ParNames = Gamma_Coeff_nam|Beta_nam|Lamda_nam ;

if(nvar_mear_ordl > 0);
    _max_ParNames = _max_ParNames | Threshold_nam;
endif;

if(nvar_mear_count > 0);
    _max_ParNames = _max_ParNames | Phi_nam ;
endif;

//----------------------------------------------------------------------------------------------------------------------------------------

max_GradTol = gradient_limit;

if(Force_converegnce == 1);
    _max_MaxIters = iteration_limit;
endif;

_max_Options = { bfgs stepbt };
_max_Algorithm = { 2 };

if(Gradient_Check  == 1);
    "Comparing Numerical and Analytic Gradient values................";
    _max_GradCheckTol = 1e-8;
endif;

_max_CovPar = 2;
_max_GradProc = &lgd;

_max_switch = zeros(4,1);
_max_Switch[1] = 2;        /* algorithm number to switch to */
_max_Switch[2] = 1e-4;     /* NLP switches if functions changes less than this amount */
_max_Switch[3] = 500;    /* NLP switches if this number of iterations is exceeded */
_max_Switch[4] = 2;     /* NLP switches if line search step changes less than this amount */

Num_Threads = 5;
data_thread = ceil(nobs/Num_Threads);
Data_SPlit  = zeros(Num_Threads,2);

for i(1,Num_Threads,1);
    Data_SPlit[i,1] = (i-1)*data_thread + 1;
    if(i ne Num_Threads);
        Data_SPlit[i,2] = i*data_thread;
    else;
        Data_SPlit[i,2] = nobs;
    endif;
endfor;

clearg Store_Seed;
Seed_Start = zeros(nobs,(Com_ogcn_r+Com_nn_r));
seednext   = seed10;
for i(1,nind,1);
    for j(1,(Com_ogcn_r+Com_nn_r),1);
        seed20 = seednext;
        Seed_Start[i,j] = seed20;
        temp = rndus(1,8,seed20);
        seednext = seed20;
        //{ temp, sss } = rndKMu(1,8,seed20);
        //seednext = sss[1]+1;
    endfor;
endfor;
Store_Seed = Seed_Start;
clear Seed_Start;

"Parametrized Likelihood is in progress.....................";
start_time1 = gettime();
clearg Gradient_Store,Gradient_Store1;
clearg Category_matrix_lower,Category_matrix_upper,Count_Threshold,lower_threshold_matrix,upper_threshold_matrix,Lambda_count,term1,Utility;
clearg Store_ogc,Store_ogcn,Store_nn;

{ x,f,g,cov,retcode } = maxprt(maxlik(Main_data,0,&lpr,bb));

Gamma_Coeff1         = x[1:nvarmC];
Beta_coeff1          = x[nvarmC+1:nvarmC+nvarma];
Chol_Lamda1          = upmat(xpnd(x[nvarmC+nvarma+1:nvarmC+nvarma+All_nCholerr]));

Chol_Lamda_adjusted  = Chol_Lamda1';
Chol_Lamda_adjusted1 = Chol_Lamda1';

if(nvar_ogc > 0);
    for i(1,nvar_ogc,1);
        row_num = nvar_mear_cont+1;
        row_all = Chol_Lamda_adjusted1[row_num,1:row_num-1];
        row_all_sq = row_all.^2;
        denom = sqrt(1+sumc(row_all_sq'));
        for j(1,row_num,1);
            if (j ne row_num);
                Chol_Lamda_adjusted[row_num,j] = Chol_Lamda_adjusted1[row_num,j]/denom;
            endif;
            
            if (j eq row_num);
                Chol_Lamda_adjusted[row_num,j] = 1/denom;
            endif;
        endfor;
    endfor;
endif;

for i(1,num_nominal,1);
    if(i == 1);
        row_num = nvar_mear+1;
        row_end = nvar_mear+M_mat_Track_csum[i,1];
    else;
        row_num = nvar_mear+M_mat_Track_csum[i-1,1]+1;
        row_end = nvar_mear+M_mat_Track_csum[i,1];
    endif;
    
    for j(row_num,row_end,1);
        row_all = Chol_Lamda_adjusted1[j,1:j-1];
        row_all_sq = row_all.^2;
        denom = sqrt(1+sumc(row_all_sq'));
        
        check_ele = j*(j+1)*0.5;
        if(Lamda_error_active[check_ele] == 0);
            for k(1,j-1,1);
                Chol_Lamda_adjusted[j,k] = Chol_Lamda_adjusted1[j,k]/denom;
            endfor;
            
            Chol_Lamda_adjusted[j,j] = 1/denom;
        endif;
    endfor;
endfor;

Chol_Lamda1 = Chol_Lamda_adjusted';
Lamda1      = Chol_Lamda1'*Chol_Lamda1;

if(nvar_mear_ordl > 0);
    upper_threshold_K    =  exp(x[nvarmC+nvarma+All_nCholerr+1:nvarmC+nvarma+All_nCholerr+num_ordl_cat_req]);
    upper_threshold_K1   = zeros(nvar_mear_ordl,Highest_scale);
    for i(1,nvar_mear_ordl,1);
        if(i==1);
            upper_threshold_K1[i,1:num_ordl_cat_req1[i]] = (upper_threshold_K[1:num_ordl_cat_req_csum[i]])';
        else;
            upper_threshold_K1[i,1:num_ordl_cat_req1[i]] = (upper_threshold_K[num_ordl_cat_req_csum[i-1]+1:num_ordl_cat_req_csum[i]])';
        endif;
    endfor;
    
    upper_threshold      =  (cumsumc(upper_threshold_K1'))';
    threshold_vector1    = {};
    for i(1,nvar_mear_ordl,1);
        threshold_vector1 = threshold_vector1 | (upper_threshold[i,1:num_ordl_cat_req1[i]])';
    endfor;
endif;

if(nvar_mear_count > 0);
    Phi_coeff1      = exp(x[nvarmC+nvarma+All_nCholerr+num_ordl_cat_req+1:nvarmC+nvarma+All_nCholerr+num_ordl_cat_req+Total_Phi]);
    Phi_coeff_K1    = zeros(nvar_mear_count,Highest_Phi);
    for i(1,nvar_mear_count,1);
        if(i==1);
            Phi_coeff_K1[i,1:Num_Phi[i]] = (Phi_coeff1[1:num_Phi_csum[i]])';
        else;
            Phi_coeff_K1[i,1:Num_Phi[i]] = (Phi_coeff1[num_Phi_csum[i-1]+1:num_Phi_csum[i]])';
        endif;
    endfor;
    
    Phi_threshold      =  (cumsumc(Phi_coeff_K1'))';
    Phi_vector1    = {};
    for i(1,nvar_mear_count,1);
        Phi_vector1 = Phi_vector1 | (Phi_threshold[i,1:Num_Phi[i]])';
    endfor;
endif;

bb2 = Gamma_Coeff1|Beta_coeff1|vech(Lamda1);

if(nvar_mear_ordl > 0);
    bb2 = bb2 | threshold_vector1;
endif;

if(nvar_mear_count > 0);
    bb2 = bb2 | Phi_vector1 ;
endif;


"Un-Parametrized Likelihood is in progress.....................";
LL_Value     = lpr1(bb2,Main_data);
GG_Value     = lgd1(bb2,Main_data);

needx          = selif(bb2,_max_active);
Cross_Product1 = selif(Gradient_store1',_max_active);
Cross_Product  = Cross_Product1*Cross_Product1';
st_error_IM    = sqrt(diag(inv(Cross_Product)));

LL_cal = sumc(LL_Value);
"---------------------------Final Estimates---------------------------------------------------------------------------------";
"Log-likelihood value       : " LL_cal;
"Parameter  Estimate    ST.Jaco   T-Stat";
omat = (selif(_max_parNames,_max_active) ~ needx ~ st_error_IM ~ (needx./st_error_IM) );
mask = 0~1~1~1;
let fmt[4,3] =
    "-*.*s "  8 8  @ format info for variable names column @
    "*.*lf" 10 4   @ format info for mean column           @
    "*.*lf" 10 4   @ format info for mean column           @
    "*.*lf" 10 4   @ format info for mean column           @;

y = printfm(omat,mask,fmt);
"-----------------------------------------------------------------------------------------------";

stop;
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
proc lpr(parm,dta);
    local LL1,LL2,LL3,LL4,LL5,LL;
    local Store_ogc1,Store_ogc2,Store_ogc3,Store_ogc4,Store_ogc5;
    local Store_ogcn1,Store_ogcn2,Store_ogcn3,Store_ogcn4,Store_ogcn5;
    local Store_nn1,Store_nn2,Store_nn3,Store_nn4,Store_nn5;
    local Store_seed1,Store_seed2,Store_seed3,Store_seed4,Store_seed5;
    local lower_threshold_matrix1,lower_threshold_matrix2,lower_threshold_matrix3,lower_threshold_matrix4,lower_threshold_matrix5;
    local upper_threshold_matrix1,upper_threshold_matrix2,upper_threshold_matrix3,upper_threshold_matrix4,upper_threshold_matrix5;
    local Category_matrix_lower1,Category_matrix_lower2,Category_matrix_lower3,Category_matrix_lower4,Category_matrix_lower5;
    local Category_matrix_upper1,Category_matrix_upper2,Category_matrix_upper3,Category_matrix_upper4,Category_matrix_upper5;
    local Utility1,Utility2,Utility3,Utility4,Utility5;
    local Count_Threshold1,Count_Threshold2,Count_Threshold3,Count_Threshold4,Count_Threshold5;
    local Lambda_count1,Lambda_count2,Lambda_count3,Lambda_count4,Lambda_count5;
    local termt1,termt2,termt3,termt4,termt5;
    
    ThreadBegin;
    { LL1,Store_ogc1,Store_ogcn1,Store_nn1,Store_Seed1,lower_threshold_matrix1,upper_threshold_matrix1,Category_matrix_lower1,Category_matrix_upper1,Utility1,Count_Threshold1,Lambda_count1,termt1 } = lprT(parm,dta,Data_Split[1,1],Data_Split[1,2]);
    ThreadEnd;
    
    ThreadBegin;
    { LL2,Store_ogc2,Store_ogcn2,Store_nn2,Store_Seed2,lower_threshold_matrix2,upper_threshold_matrix2,Category_matrix_lower2,Category_matrix_upper2,Utility2,Count_Threshold2,Lambda_count2,termt2 } = lprT(parm,dta,Data_Split[2,1],Data_Split[2,2]);
    ThreadEnd;
    
    
    ThreadBegin;
    { LL3,Store_ogc3,Store_ogcn3,Store_nn3,Store_Seed3,lower_threshold_matrix3,upper_threshold_matrix3,Category_matrix_lower3,Category_matrix_upper3,Utility3,Count_Threshold3,Lambda_count3,termt3 } = lprT(parm,dta,Data_Split[3,1],Data_Split[3,2]);
    ThreadEnd;
    
    ThreadBegin;
    { LL4,Store_ogc4,Store_ogcn4,Store_nn4,Store_Seed4,lower_threshold_matrix4,upper_threshold_matrix4,Category_matrix_lower4,Category_matrix_upper4,Utility4,Count_Threshold4,Lambda_count4,termt4 } = lprT(parm,dta,Data_Split[4,1],Data_Split[4,2]);
    ThreadEnd;
    
    ThreadBegin;
    { LL5,Store_ogc5,Store_ogcn5,Store_nn5,Store_Seed5,lower_threshold_matrix5,upper_threshold_matrix5,Category_matrix_lower5,Category_matrix_upper5,Utility5,Count_Threshold5,Lambda_count5,termt5 } = lprT(parm,dta,Data_Split[5,1],Data_Split[5,2]);
    ThreadEnd;
    ThreadJoin;
    
    LL = {};
    Store_ogc = {};
    Store_ogcn = {};
    Store_nn = {};
    Store_Seed = {};
    lower_threshold_matrix = {} ;
    upper_threshold_matrix = {} ;
    Category_matrix_lower  = {} ;
    Category_matrix_upper  = {} ;
    Utility                = {} ;
    Count_Threshold        = {} ;
    Lambda_count           = {} ;
    term1                  = {} ;
    
    LL = LL | LL1 | LL2 | LL3 | LL4 | LL5;
    Store_ogc  = Store_ogc  | Store_ogc1  | Store_ogc2  | Store_ogc3  | Store_ogc4  | Store_ogc5 ;
    Store_ogcn = Store_ogcn | Store_ogcn1 | Store_ogcn2 | Store_ogcn3 | Store_ogcn4 | Store_ogcn5 ;
    Store_nn   = Store_nn   | Store_nn1   | Store_nn2   | Store_nn3   | Store_nn4   | Store_nn5 ;
    Store_Seed = Store_Seed | Store_seed1 | Store_seed2 | Store_seed3 | Store_seed4 | Store_seed5 ;
    
    lower_threshold_matrix = lower_threshold_matrix | lower_threshold_matrix1 | lower_threshold_matrix2 | lower_threshold_matrix3 | lower_threshold_matrix4 | lower_threshold_matrix5 ;
    upper_threshold_matrix = upper_threshold_matrix | upper_threshold_matrix1 | upper_threshold_matrix2 | upper_threshold_matrix3 | upper_threshold_matrix4 | upper_threshold_matrix5 ;
    Category_matrix_lower  = Category_matrix_lower  | Category_matrix_lower1  | Category_matrix_lower2  | Category_matrix_lower3  | Category_matrix_lower4  | Category_matrix_lower5  ;
    Category_matrix_upper  = Category_matrix_upper  | Category_matrix_upper1  | Category_matrix_upper2  | Category_matrix_upper3  | Category_matrix_upper4  | Category_matrix_upper5  ;
    
    Utility = Utility | Utility1 | Utility2 | Utility3 | Utility4 | Utility5 ;
    
    Count_Threshold = Count_Threshold | Count_Threshold1 | Count_Threshold2 | Count_Threshold3 | Count_Threshold4 | Count_Threshold5 ;
    
    Lambda_count  = Lambda_count | Lambda_count1 | Lambda_count2 | Lambda_count3 | Lambda_count4 | Lambda_count5 ;
    term1         = term1        | termt1        | termt2        | termt3        | termt4        | termt5 ;
    
    clear LL1,LL2,LL3,LL4,LL5;
    clear Store_ogc1,Store_ogc2,Store_ogc3,Store_ogc4,Store_ogc5;
    clear Store_ogcn1,Store_ogcn2,Store_ogcn3,Store_ogcn4,Store_ogcn5;
    clear Store_nn1,Store_nn2,Store_nn3,Store_nn4,Store_nn5;
    clear Store_seed1,Store_seed2,Store_seed3,Store_seed4,Store_seed5;
    clear lower_threshold_matrix1,lower_threshold_matrix2,lower_threshold_matrix3,lower_threshold_matrix4,lower_threshold_matrix5;
    clear upper_threshold_matrix1,upper_threshold_matrix2,upper_threshold_matrix3,upper_threshold_matrix4,upper_threshold_matrix5;
    clear Category_matrix_lower1,Category_matrix_lower2,Category_matrix_lower3,Category_matrix_lower4,Category_matrix_lower5;
    clear Category_matrix_upper1,Category_matrix_upper2,Category_matrix_upper3,Category_matrix_upper4,Category_matrix_upper5;
    clear Utility1,Utility2,Utility3,Utility4,Utility5;
    clear Count_Threshold1,Count_Threshold2,Count_Threshold3,Count_Threshold4,Count_Threshold5;
    clear Lambda_count1,Lambda_count2,Lambda_count3,Lambda_count4,Lambda_count5;
    clear termt1,termt2,termt3,termt4,termt5;
    
    retp (LL);
endp;
//----------------------------------------------------------------------------------------------------------------------------------------
proc(13)=lprT(parm,dta,st_iter,end_iter);
    
    local Alpha_coeff,Chol_Alpha_corr,delta_coeff,d_matrix_coeff,Chol_Psi_matrix,Beta_coeff,Lambda_coeff,Chol_Lamda1,Chol_Lamda2,Theta_coeff,Phi_coeff,upper_threshold,lower_threshold;
    local Chol_Alpha_corr_adjusted,row_all,row_all_sq,denom,i,j,Alpha_corr,Lambda_mat,Psi_matrix,Psi_matrix_big,Lamda1,Lamda2,Lamda,AlphaW,z,y1,Gamma_X,y2,Y,y2_temp;
    local Xbeta,Xbeta1,Xbeta2,v11,v12,v1,countObs,smallCObs,term2,threshUpper,threshLower,phiUpper;
    local phiLower,iden_matrix1,iden_matrix2,one_negative1,one_negative2,seednext,Likelihood,U_Y,LL,Full_error,e1,e12,e21,e22,M,Alt_chosen1,Alt_chosen2,temp1,temp2,ch;
    local B_Tild,Error_Tild,BU_Tild,Error_YU_Tild,Error_U_Tild,Error_Y,Diff_Mean,Diff_Mean_mu,Mean_changed,Error_changed,Curr_Lower_Threshold,Curr_Upper_Threshold,p1,p2,p3,p4;
    local pair_GG,g1,g2,rho_low_g1,rho_low_g2,rho_up_g1,rho_up_g2,var_g1g2,p2_temp,D_VG,rho_low_g3,rho_up_g3,mean_gu,var_gu,om,mean_low_final,mean_up_final,var_final,p3_1_uo,ss_up;
    local R_GG,mean_final,p4_temp,sss,Chol_Alpha_corr_adjusted1,temp,seed20,p3_1_up,Temp_negative,p3_1_low,ss_low,upper_threshold_K,upper_threshold_decider,Chol_Lamda;
    local Lamda_chol,temp_num1,temp_num2,curr_ele,curr_mat,Beta_coeff_expand,Alt_chosen,iden_matrix,one_negative,row_add;
    local pair_ogc_count,pair_ogcn_count,pair_nn_count,p2_temp1,p2_temp2,p2_temp3,p2_temp4,g3_1_up,g4_temp,p4_tempd,count;
    local phi_All,phi_mat,temp_arr,Gamma_phi,ZGP,temp_store,part1,mean_gu_final,var_gu_final,p4_1,g4_1,ss,curr_pair,threshCountMax;
    local upper_threshold_K1,Phi_coeff1,Phi_coeff_K1,Chol_Lamda_adjusted,Chol_Lamda_adjusted1,row_num,Count_Threshold_temp,curr_obs;
    local num_obs,Store_ogc_temp,Store_ogcn_temp,Store_nn_temp,Store_Seed_temp,ord_count,Utilitym,Lambda_count_temp,term1_temp;
    local lower_threshold_matrix_temp,upper_threshold_matrix_temp,Category_matrix_lower_temp,Category_matrix_upper_temp,xPhiMat;
    
    delta_coeff         = parm[1:nvarmC];
    Beta_coeff          = parm[nvarmC+1:nvarmC+nvarma];
    Chol_Lamda          = upmat(xpnd(parm[nvarmC+nvarma+1:nvarmC+nvarma+All_nCholerr]));
    
    
    if(nvar_mear_ordl > 0);
        upper_threshold_K    =  exp(parm[nvarmC+nvarma+All_nCholerr+1:nvarmC+nvarma+All_nCholerr+num_ordl_cat_req]);
        upper_threshold_K1   = zeros(nvar_mear_ordl,Highest_scale);
        for i(1,nvar_mear_ordl,1);
            if(i==1);
                upper_threshold_K1[i,1:num_ordl_cat_req1[i]] = (upper_threshold_K[1:num_ordl_cat_req_csum[i]])';
            else;
                upper_threshold_K1[i,1:num_ordl_cat_req1[i]] = (upper_threshold_K[num_ordl_cat_req_csum[i-1]+1:num_ordl_cat_req_csum[i]])';
            endif;
        endfor;
        
        upper_threshold      =  (cumsumc(upper_threshold_K1'))';
        for i(1,nvar_mear_ordl,1);
            if(num_ordl_cat_req1[i] < Highest_scale);
                upper_threshold[i,num_ordl_cat_req1[i]+1:Highest_scale] = positive_infinity*ones(1,Highest_scale-num_ordl_cat_req1[i]);
            endif;
        endfor;
        upper_threshold_decider = negative_infinity*ones(nvar_mear_ordl,1) ~ zeros(nvar_mear_ordl,1) ~ upper_threshold ~ positive_infinity*ones(nvar_mear_ordl,1);
    endif;
    
    if(nvar_mear_count > 0);
        Phi_coeff1      = exp(parm[nvarmC+nvarma+All_nCholerr+num_ordl_cat_req+1:nvarmC+nvarma+All_nCholerr+num_ordl_cat_req+Total_Phi]);
        Phi_coeff_K1    = zeros(nvar_mear_count,Highest_Phi);
        for i(1,nvar_mear_count,1);
            if(i==1);
                Phi_coeff_K1[i,1:Num_Phi[i]] = (Phi_coeff1[1:num_Phi_csum[i]])';
            else;
                Phi_coeff_K1[i,1:Num_Phi[i]] = (Phi_coeff1[num_Phi_csum[i-1]+1:num_Phi_csum[i]])';
            endif;
        endfor;
        
        Phi_coeff      =  (cumsumc(Phi_coeff_K1'))';
        for i(1,nvar_mear_count,1);
            if(Num_Phi[i] < Highest_Phi);
                Phi_coeff[i,Num_Phi[i]+1:Highest_Phi] = zeros(1,Highest_Phi-Num_Phi[i]);
            endif;
        endfor;
    endif;
    
    Chol_Lamda_adjusted  = Chol_Lamda';
    Chol_Lamda_adjusted1 = Chol_Lamda';
    
    if(nvar_ogc > 0);
        for i(1,nvar_ogc,1);
            row_num = nvar_mear_cont+1;
            row_all = Chol_Lamda_adjusted1[row_num,1:row_num-1];
            row_all_sq = row_all.^2;
            denom = sqrt(1+sumc(row_all_sq'));
            for j(1,row_num,1);
                if (j ne row_num);
                    Chol_Lamda_adjusted[row_num,j] = Chol_Lamda_adjusted1[row_num,j]/denom;
                    clear temp;
                endif;
                
                if (j eq row_num);
                    Chol_Lamda_adjusted[row_num,j] = 1/denom;
                    clear temp;
                endif;
            endfor;
        endfor;
    endif;
    
    for i(1,num_nominal,1);
        if(i == 1);
            row_num = nvar_mear+1;
            row_end = nvar_mear+M_mat_Track_csum[i,1];
        else;
            row_num = nvar_mear+M_mat_Track_csum[i-1,1]+1;
            row_end = nvar_mear+M_mat_Track_csum[i,1];
        endif;
        
        for j(row_num,row_end,1);
            row_all = Chol_Lamda_adjusted1[j,1:j-1];
            row_all_sq = row_all.^2;
            denom = sqrt(1+sumc(row_all_sq'));
            
            check_ele = j*(j+1)*0.5;
            if(Lamda_error_active[check_ele] == 0);
                for k(1,j-1,1);
                    Chol_Lamda_adjusted[j,k] = Chol_Lamda_adjusted1[j,k]/denom;
                endfor;
                
                Chol_Lamda_adjusted[j,j] = 1/denom;
            endif;
        endfor;
    endfor;
    
    Chol_Lamda = Chol_Lamda_adjusted';
    Lamda      = Chol_Lamda'*Chol_Lamda;
    Full_error = D_matrix*Lamda*D_matrix';
    
    seednext     = Store_Seed[st_iter,1];
    num_obs      = end_iter - st_iter + 1;
    
    if(nvar_ogc > 1);
        Store_ogc_temp  = zeros(num_obs*Com_ogc_r,13);
    endif;
    
    if(nvar_ogc > 0);
        Store_ogcn_temp = zeros(num_obs*Com_ogcn_r,Com_ogcn_c);
    endif;
    
    if(num_nominal > 1);
        Store_nn_temp   = zeros(num_obs*Com_nn_r,Com_nn_c);
    endif;
    
    Store_Seed_temp = zeros(num_obs,(Com_ogcn_r+Com_nn_r));
    
    Gamma_X = (ones(nvar_mear,1) .*. delta_coeff  )*~(dta[st_iter:end_iter,ivgenvC])';
    y2 = {};
    j = 1;
    
    do until j > nvar_mear;
        y2 = y2~(sumc(Gamma_X[(j-1)*nvarmC+1:(j*nvarmC),.]));           // Y stores the Y variables value for each observation. nobs X nvar_mear. 1st col has Y1, 2nd Y2 and so on for all observations.
        j = j+1;
    endo;
    
    if(nvar_mear_count > 0);
        y2_temp = {};
        y2_temp = y2_temp ~ y2[.,1:(nvar_mear_cont+nvar_mear_ordl+nvar_mear_grup)] ~ zeros(num_obs,nvar_mear_count);
        Y       = y2_temp;
        clear y2_temp;
    else;
        Y = y2;
    endif;
    
    if(nvar_mear_ordl > 0);
        lower_threshold_matrix_temp = zeros(num_obs,nvar_mear_ordl);
        upper_threshold_matrix_temp = zeros(num_obs,nvar_mear_ordl);
        ord_count = 0;
        for i(st_iter,end_iter,1);
            for j(1,nvar_mear_ordl,1);
                for k(1,num_ordl_cat[j],1);
                    if(dta[i,Ordinal_Index[j]] == k);
                        ord_count = ord_count + 1;
                        lower_threshold_matrix_temp[ord_count,j] = upper_threshold_decider[j,k];
                        upper_threshold_matrix_temp[ord_count,j] = upper_threshold_decider[j,k+1];
                    endif;
                endfor;
            endfor;
        endfor;
    endif;
    
    if(nvar_mear_grup > 0);
        Category_matrix_lower_temp = zeros(num_obs,nvar_mear_grup);
        Category_matrix_upper_temp = zeros(num_obs,nvar_mear_grup);
        ord_count = 0;
        for i(st_iter,end_iter,1);
            for j(1,nvar_mear_grup,1);
                for k(1,Num_group[j],1);
                    if(dta[i,Group_Index[j]] == k);
                        ord_count = ord_count + 1;
                        Category_matrix_upper_temp[ord_count,j] = Group_Threshold[j,k+1];
                        Category_matrix_lower_temp[ord_count,j] = Group_Threshold[j,k];
                    endif;
                endfor;
            endfor;
        endfor;
    endif;
    
    Beta_coeff_expand = {};
    for i(1,num_nominal,1);
        if(i == 1);
            Beta_coeff_expand = Beta_coeff_expand | (ones(All_Nominal[1,i],1) .*. Beta_coeff[1:nvarma_csum[i]]);
        else;
            Beta_coeff_expand = Beta_coeff_expand | (ones(All_Nominal[1,i],1) .*. Beta_coeff[nvarma_csum[i-1]+1:nvarma_csum[i]]);
        endif;
    endfor;
    
    
    Xbeta = (Beta_coeff_expand)*~(dta[st_iter:end_iter,ivgenva])';
    
    Utilitym = {};
    for i(1,num_nominal,1);
        j = 1;
        
        if(i == 1);
            row_add = 0;
        else;
            row_add = sumr(All_Nominal[1,1:i-1] .* nvarma_all[1,1:i-1]);
        endif;
        
        do until j > All_Nominal[1,i];
            Utilitym = Utilitym~(sumc(Xbeta[row_add+(j-1)*nvarma_all[1,i]+1:row_add+(j*nvarma_all[1,i]),.]));
            j = j+1;
        endo;
    endfor;
    
    ord_count = 0;
    for i(st_iter,end_iter,1);
        for j(1,Alternative_all,1);
            if(dta[i,Avalability[j]] == 0);
                ord_count = ord_count + 1;
                Utilitym[ord_count,j] = Negative_Infinity;
            endif;
        endfor;
    endfor;
    
    
    if(nvar_mear_count > 0);
        Lambda_count_temp = exp(y2[.,nvar_mear_cont+nvar_mear_ordl+nvar_mear_grup+1:nvar_mear_cont+nvar_mear_ordl+nvar_mear_grup+nvar_mear_count]) ;
        
        term1_temp = exp(-Lambda_count_temp);
        
        threshCountMax = threshCountMax_Global;
        xPhiMat = zeros(nvar_mear_count,threshCountMax+1);
        
        for iCnt (1,nvar_mear_count,1);
            xPhiMat[iCnt,2:1+Num_Phi[iCnt]] = (Phi_coeff[iCnt,1:Num_Phi[iCnt]]);
        endfor;
        
        for iCnt (1,nvar_mear_count,1);
            xPhiMat[iCnt,Num_Phi[iCnt]+2:threshCountMax+1] = ones(1,(threshCountMax+1-Num_Phi[iCnt]-1)) .*. Phi_coeff[iCnt,Num_Phi[iCnt]];
        endfor;
        
        Count_Threshold_temp = zeros(num_obs,nvar_mear_count*2);
        ord_count = 0;
        for iobs(st_iter,end_iter,1);
            for jcount(1,nvar_mear_count,1);
                ord_count = ord_count + 1;
                countObs = dta[iobs,Count_Index[jcount]];
                term2 = 0;
                
                for icnt (0,countObs,1);
                    term2 = term2 + ( (Lambda_count_temp[ord_count,jcount]^iCnt)/(iCnt!) ) ;
                endfor;
                
                threshUpper = term1_temp[ord_count,jcount] * term2;
                
                if(countObs gt 0);
                    term2 = term2 - ( (Lambda_count_temp[ord_count,jcount]^countObs)/(countObs!) ) ;
                    threshLower = term1_temp[ord_count,jcount] * term2;
                    phiUpper = (xPhiMat[jcount,countObs+1])';
                    phiLower = (xPhiMat[jcount,countObs])';
                    
                else;
                    threshLower = 0;
                    phiUpper = 0;
                    phiLower = 0;
                endif;
                
                threshUpper = minc( threshUpper|0.99999999999999999);
                threshLower = minc( threshLower|0.99999999999999999);
                
                threshUpper = cdfni(threshUpper) + phiUpper;
                threshLower = cdfni(threshLower) + phiLower;
                
                Count_Threshold_temp[ord_count,jcount] = threshLower;
                Count_Threshold_temp[ord_count,nvar_mear_count+jcount] = threshUpper;
            endfor;
        endfor;
    endif;
    
    pair_ogc_count = 0;
    pair_ogcn_count = 0;
    pair_nn_count = 0;
    curr_obs = 0;
    Likelihood = {};
    
    for i(st_iter,end_iter,1);
        U_Y = {};
        LL = 0;
        p1=1;
        curr_obs = curr_obs + 1;
        curr_pair = 0;
        
        U_Y   = U_Y | Y[curr_obs,.]'| Utilitym[curr_obs,.]';
        
        M = zeros(nvar_mear+Alternative_all-num_nominal,nvar_mear+Alternative_all);
        M[1:nvar_mear,1:nvar_mear] = eye(nvar_mear);
        
        Alt_chosen = (dta[i,Altchm])';
        
        for j(1,num_nominal,1);
            iden_matrix = eye(All_Nominal[1,j]-1);
            one_negative = -1*ones(All_Nominal[1,j]-1,1);
            if(Alt_chosen[j] eq 1);
                temp1 = one_negative ~ iden_matrix;
            elseif(Alt_chosen[j] eq All_Nominal[1,j]);
                temp1 = iden_matrix ~ one_negative;
            else;
                ch = Alt_chosen[j];
                temp1 = iden_matrix[.,1:ch-1] ~ one_negative ~ iden_matrix[.,ch:All_Nominal[1,j]-1];
            endif;
            
            if(j == 1);
                M[nvar_mear+1:nvar_mear+All_Nominal[1,j]-1,nvar_mear+1:nvar_mear+All_Nominal[1,j]] = temp1;
            else;
                M[nvar_mear+M_mat_Track_csum[j-1,1]+1:nvar_mear+M_mat_Track_csum[j,1],nvar_mear+Nominal_csum[j-1,1]+1:nvar_mear+Nominal_csum[j-1,1]+All_Nominal[1,j]] = temp1;
            endif;
            
            clear temp1;
        endfor;
        
        
        B_Tild = M * U_Y;
        Error_Tild = M * Full_error * M';
        
        BU_Tild       = B_Tild[nvar_mear_cont+1:rows(B_Tild)];
        if(nvar_mear_cont > 0);
            Error_YU_Tild = Error_Tild[nvar_mear_cont+1:rows(Error_Tild),1:nvar_mear_cont];
        endif;
        
        Error_U_Tild  = Error_Tild[nvar_mear_cont+1:rows(Error_Tild),nvar_mear_cont+1:cols(Error_Tild)];
        
        if(nvar_mear_cont > 0);
            Error_Y       = Error_Tild[1:nvar_mear_cont,1:nvar_mear_cont];
            Diff_Mean     = (dta[i,Continous_Index])';
            Diff_Mean_mu  = B_Tild[1:nvar_mear_cont];
        endif;
        
        
        if(nvar_mear_cont > 0);
            Mean_changed =  BU_Tild + ( Error_YU_Tild * inv(Error_Y) * (Diff_Mean-Diff_Mean_mu) );
            Error_changed = Error_U_Tild - ( Error_YU_Tild * inv(Error_Y) *  Error_YU_Tild');
        else;
            Mean_changed =  BU_Tild ;
            Error_changed = Error_U_Tild ;
        endif;
        
        if(nvar_mear_cont > 0);
            p1 = pdfmvn(Diff_Mean,Diff_Mean_mu,Error_Y);
            if(p1 <= upper_limit);
                p1 = (p1-((p1<=upper_limit)*(p1-upper_limit)));
            endif;
        endif;
        
        Curr_Lower_Threshold = {};
        Curr_Upper_Threshold = {};
        
        
        if(nvar_mear_ordl > 0);
            Curr_Lower_Threshold = Curr_Lower_Threshold ~ lower_threshold_matrix_temp[curr_obs,.] ;
            Curr_Upper_Threshold = Curr_Upper_Threshold ~ upper_threshold_matrix_temp[curr_obs,.] ;
        endif;
        
        if(nvar_mear_grup > 0);
            Curr_Lower_Threshold = Curr_Lower_Threshold ~ Category_matrix_lower_temp[curr_obs,.] ;
            Curr_Upper_Threshold = Curr_Upper_Threshold ~ Category_matrix_upper_temp[curr_obs,.] ;
        endif;
        
        if(nvar_mear_count > 0);
            Curr_Lower_Threshold = Curr_Lower_Threshold ~ Count_Threshold_temp[curr_obs,1:nvar_mear_count] ;
            Curr_Upper_Threshold = Curr_Upper_Threshold ~ Count_Threshold_temp[curr_obs,nvar_mear_count+1:2*nvar_mear_count] ;
        endif;
        
        Curr_Lower_Threshold = Curr_Lower_Threshold ~ (negative_infinity*ones(1,Alternative_all-num_nominal)) ;
        Curr_Upper_Threshold = Curr_Upper_Threshold ~ (zeros(1,Alternative_all-num_nominal));
        
        if(nvar_ogc > 1);
            p2 = 1;
            for g1(1,nvar_mear_ordl+nvar_mear_grup+nvar_mear_count-1,1);
                for g2(g1+1,nvar_mear_ordl+nvar_mear_grup+nvar_mear_count,1);
                    
                    pair_ogc_count = pair_ogc_count + 1;
                    rho_low_g1  =  (Curr_Lower_Threshold[1,g1] - Mean_changed[g1] ) / sqrt(Error_changed[g1,g1]);
                    rho_low_g2  =  (Curr_Lower_Threshold[1,g2] - Mean_changed[g2] ) / sqrt(Error_changed[g2,g2]);
                    rho_up_g1   =  (Curr_Upper_Threshold[1,g1] - Mean_changed[g1] ) / sqrt(Error_changed[g1,g1]);
                    rho_up_g2   =  (Curr_Upper_Threshold[1,g2] - Mean_changed[g2] ) / sqrt(Error_changed[g2,g2]);
                    var_g1g2    =  Error_changed[g1,g2] / ( sqrt(Error_changed[g1,g1]) * sqrt(Error_changed[g2,g2]) );
                    
                    
                    p2_temp = cdfbvn(rho_up_g1,rho_up_g2,var_g1g2) - cdfbvn(rho_up_g1,rho_low_g2,var_g1g2) - cdfbvn(rho_low_g1,rho_up_g2,var_g1g2) + cdfbvn(rho_low_g1,rho_low_g2,var_g1g2);
                    
                    p2_temp1 = cdfbvn_grad(rho_up_g1,rho_up_g2,var_g1g2);
                    p2_temp2 = cdfbvn_grad(rho_up_g1,rho_low_g2,var_g1g2);
                    p2_temp3 = cdfbvn_grad(rho_low_g1,rho_up_g2,var_g1g2);
                    p2_temp4 = cdfbvn_grad(rho_low_g1,rho_low_g2,var_g1g2);
                    
                    Store_ogc_temp[pair_ogc_count,1:3] = p2_temp1';
                    Store_ogc_temp[pair_ogc_count,4:6] = p2_temp2';
                    Store_ogc_temp[pair_ogc_count,7:9] = p2_temp3';
                    Store_ogc_temp[pair_ogc_count,10:12] = p2_temp4';
                    Store_ogc_temp[pair_ogc_count,13] = p2_temp;
                    
                    if(p2_temp > upper_limit);
                        p2 = p2*p2_temp;
                    else;
                        p2 = p2* (p2_temp-((p2_temp<=upper_limit)*(p2_temp-upper_limit)));
                    endif;
                    clear rho_low_g1,rho_low_g2,rho_up_g1,rho_up_g2,var_g1g2,p2_temp,p2_temp1,p2_temp2,p2_temp3,p2_temp4;
                endfor;
            endfor;
        else;
            p2 = 1;
        endif;
        
        if(nvar_ogc > 0);
            p3 = 1;
            for v1(1,nvar_mear_ordl+nvar_mear_grup+nvar_mear_count,1);
                for g1(1,num_nominal,1);
                    
                    pair_ogcn_count = pair_ogcn_count + 1;
                    D_VG = zeros(All_Nominal[1,g1],(nvar_mear_ordl+nvar_mear_grup+nvar_mear_count+Alternative_all-num_nominal));
                    D_VG[1,v1] = 1;
                    
                    if(g1 == 1);
                        D_VG[2:rows(D_VG),nvar_mear_ordl+nvar_mear_grup+nvar_mear_count+1:nvar_mear_ordl+nvar_mear_grup+nvar_mear_count+All_Nominal[1,g1]-1] = eye(All_Nominal[1,g1]-1);
                    else;
                        D_VG[2:rows(D_VG),nvar_mear_ordl+nvar_mear_grup+nvar_mear_count+M_mat_Track_csum[g1-1,1]+1:nvar_mear_ordl+nvar_mear_grup+nvar_mear_count+M_mat_Track_csum[g1,1]] = eye(All_Nominal[1,g1]-1);
                    endif;
                    
                    rho_low_g3 = D_VG*Curr_Lower_Threshold';
                    rho_up_g3  = D_VG*Curr_Upper_Threshold';
                    
                    mean_gu    = D_VG*Mean_changed;
                    var_gu     = D_VG*Error_changed*D_VG';
                    
                    om  = sqrt(diag(var_gu));
                    mean_low_final = (rho_low_g3 - mean_gu)./om;
                    mean_up_final  = (rho_up_g3 - mean_gu)./om;
                    
                    var_final      = corrvc(var_gu);
                    var_final      = diagrv(var_final,ones(All_Nominal[1,g1],1));
                    
                    if(All_Nominal[1,g1]> 2);
                        curr_pair  = curr_pair  + 1;
                        seed20 = seednext;
                        Store_Seed_temp[curr_obs,curr_pair] = seed20;
                        {p3_1_up,g3_1_up,ss_up} = pdfmvnac(mean_up_final',var_final,Store_Seed[i,curr_pair]);
                        seednext = ss_up;
                        Store_ogcn_temp[pair_ogcn_count,1] = p3_1_up;
                        Store_ogcn_temp[pair_ogcn_count,2:cols(g3_1_up)+1] = g3_1_up;
                    else;
                        curr_pair  = curr_pair  + 1;
                        seed20 = seednext;
                        Store_Seed_temp[curr_obs,curr_pair] = seed20;
                        seednext = seed20;
                        p3_1_up  = cdfbvn(mean_up_final[1,1],mean_up_final[2,1],var_final[1,2]);
                        g3_1_up  = cdfbvn_grad(mean_up_final[1,1],mean_up_final[2,1],var_final[1,2]);
                        Store_ogcn_temp[pair_ogcn_count,1] = p3_1_up;
                        Store_ogcn_temp[pair_ogcn_count,2:rows(g3_1_up)+1] = g3_1_up';
                    endif;
                    
                    if(p3_1_up > upper_limit);
                        p3 = p3*p3_1_up;
                    else;
                        p3= p3* (p3_1_up-((p3_1_up<=upper_limit)*(p3_1_up-upper_limit)));
                    endif;
                    
                    clear rho_low_g3,rho_up_g3,mean_gu,var_gu,om,mean_low_final,mean_up_final,var_final,D_VG,g3_1_up,p3_1_up;
                endfor;
            endfor;
        else;
            p3 = 1;
        endif;
        
        
        p4 = 1;
        
        if(num_nominal > 1);
            for g1(1,num_nominal-1,1);
                for g2(g1+1,num_nominal,1);
                    R_GG = zeros(All_Nominal[1,g1]+All_Nominal[1,g2]-2,nvar_mear_ordl+nvar_mear_grup+nvar_mear_count+Alternative_all-num_nominal);
                    
                    pair_nn_count = pair_nn_count + 1;
                    if(g1 == 1);
                        R_GG[1:M_mat_Track[1,g1],nvar_mear_ordl+nvar_mear_grup+nvar_mear_count+1:nvar_mear_ordl+nvar_mear_grup+nvar_mear_count+All_Nominal[1,g1]-1] = eye(All_Nominal[1,g1]-1);
                    else;
                        R_GG[1:M_mat_Track[1,g1],nvar_mear_ordl+nvar_mear_grup+nvar_mear_count+M_mat_Track_csum[g1-1,1]+1:nvar_mear_ordl+nvar_mear_grup+nvar_mear_count+M_mat_Track_csum[g1,1]] = eye(All_Nominal[1,g1]-1);
                    endif;
                    
                    R_GG[M_mat_Track[1,g1]+1:rows(R_GG),nvar_mear_ordl+nvar_mear_grup+nvar_mear_count+M_mat_Track_csum[g2-1,1]+1:nvar_mear_ordl+nvar_mear_grup+nvar_mear_count+M_mat_Track_csum[g2,1]] = eye(All_Nominal[1,g2]-1);
                    
                    mean_gu    = -(R_GG*Mean_changed);
                    var_gu     = R_GG*Error_changed*R_GG';
                    
                    om  = sqrt(diag(var_gu));
                    mean_final = mean_gu./om;
                    
                    var_final      = corrvc(var_gu);
                    var_final      = diagrv(var_final,ones(All_Nominal[1,g1]+All_Nominal[1,g2]-2,1));
                    
                    if((All_Nominal[1,g1]+All_Nominal[1,g2]-2) > 2);
                        curr_pair  = curr_pair  + 1;
                        seed20 = seednext;
                        Store_Seed_temp[curr_obs,curr_pair] = seed20;
                        {p4_temp,g4_temp,sss} = pdfmvnac(mean_final',var_final,Store_Seed[i,curr_pair]);
                        seednext = sss;
                        Store_nn_temp[pair_nn_count,1] = p4_temp;
                        Store_nn_temp[pair_nn_count,2:cols(g4_temp)+1] = g4_temp;
                    else;
                        curr_pair  = curr_pair  + 1;
                        seed20 = seednext;
                        Store_Seed_temp[curr_obs,curr_pair] = seed20;
                        seednext = seed20;
                        p4_temp  = cdfbvn(mean_final[1,1],mean_final[2,1],var_final[1,2]);
                        p4_tempd = cdfbvn_grad(mean_final[1,1],mean_final[2,1],var_final[1,2]);
                        Store_nn_temp[pair_nn_count,1] = p4_temp;
                        Store_nn_temp[pair_nn_count,2:rows(p4_tempd)+1] = p4_tempd';
                    endif;
                    
                    if(p4_temp > upper_limit);
                        p4 = p4*p4_temp;
                    else;
                        p4 = p4* (p4_temp-((p4_temp<=upper_limit)*(p4_temp-upper_limit)));
                    endif;
                    
                    clear R_GG,mean_gu,var_gu,om,mean_final,var_final,p4_temp,p4_temp,p4_tempd;
                endfor;
            endfor;
        elseif(nvar_ogc == 0 and num_nominal == 1);
            pair_nn_count = pair_nn_count + 1;
            
            mean_gu    = - Mean_changed[nvar_ogc+1:rows(Mean_changed)];
            var_gu     =   Error_changed[nvar_ogc+1:rows(Error_changed),nvar_ogc+1:cols(Error_changed)];
            
            om  = diag(var_gu);
            mean_gu_final = mean_gu'./(sqrt(om))';
            var_gu_final = corrvc(var_gu);
            var_gu_final = diagrv(var_gu_final,ones((All_Nominal[1,1]-1),1));
            
            if(All_Nominal[1,1] > 3);
                curr_pair  = curr_pair  + 1;
                seed20 = seednext;
                Store_Seed_temp[curr_obs,curr_pair] = seed20;
                {p4_1,g4_1,ss} = pdfmvnac(mean_gu_final,var_gu_final,Store_Seed[i,curr_pair]);
                seednext = ss;
            elseif(All_Nominal[1,1] == 3);
                curr_pair  = curr_pair  + 1;
                seed20 = seednext;
                Store_Seed_temp[curr_obs,curr_pair] = seed20;
                seednext = seed20;
                p4_1  = cdfbvn(mean_gu_final[1,1],mean_gu_final[1,2],var_gu_final[1,2]);
                g4_1  = cdfbvn_grad(mean_gu_final[1,1],mean_gu_final[1,2],var_gu_final[1,2]);
                g4_1  = g4_1';
            elseif(All_Nominal[1,1] == 2);
                curr_pair  = curr_pair  + 1;
                seed20 = seednext;
                Store_Seed_temp[curr_obs,curr_pair] = seed20;
                seednext = seed20;
                p4_1  = cdfN(mean_gu_final[1,1]);
                g4_1  = pdfn(mean_gu_final[1,1]);
            endif;
            
            Store_nn_temp[pair_nn_count,1] = p4_1;
            Store_nn_temp[pair_nn_count,2:cols(g4_1)+1] = g4_1;
            
            if(p4_1 > upper_limit);
                p4 = p4_1;
            else;
                p4 = (p4_1-((p4_1<=upper_limit)*(p4_1-upper_limit)));
            endif;
            clear mean_gu,var_gu,om,mean_gu_final,var_gu_final,p4_1,g4_1;
        endif;
        
        LL = ln(p1*p2*p3*p4);
        Likelihood = Likelihood | LL;
        clear M,B_Tild,Error_Tild,Mean_changed,Error_changed,BU_Tild,Error_YU_Tild,Error_U_Tild,Error_Y,Diff_Mean;
    endfor;
    
    if(nvar_ogc < 1);
        Store_ogc_temp  = zeros(num_obs*Com_ogc_r,1);
    endif;
    
    if(nvar_ogc == 0);
        Store_ogcn_temp = zeros(num_obs*Com_ogcn_r,Com_ogcn_c);
    endif;
    
    if(nvar_mear_count == 0);
        Count_Threshold_temp = zeros(num_obs,1);
        Lambda_count_temp    = zeros(num_obs,1);
        term1_temp           = zeros(num_obs,1);
    endif;
    
    if(nvar_mear_ordl == 0);
        lower_threshold_matrix_temp = zeros(num_obs,1);
        upper_threshold_matrix_temp = zeros(num_obs,1);
    endif;
    
    if(nvar_mear_grup == 0);
        Category_matrix_lower_temp = zeros(num_obs,1);
        Category_matrix_upper_temp = zeros(num_obs,1);
    endif;
    
    retp(Likelihood,Store_ogc_temp,Store_ogcn_temp,Store_nn_temp,Store_Seed_temp,lower_threshold_matrix_temp,upper_threshold_matrix_temp,Category_matrix_lower_temp,Category_matrix_upper_temp,Utilitym,Count_Threshold_temp,Lambda_count_temp,term1_temp);
endp;

/*-----------------------------------------------------------------------------------------------------------------------------------------------------------*/
proc lgd(parm,dta);
    
    local Alpha_coeff,Chol_Alpha_corr,delta_coeff,d_matrix_coeff,Chol_Psi_matrix,Beta_coeff,Lambda_coeff,Chol_Lamda1,Chol_Lamda2,Theta_coeff,Phi_coeff,upper_threshold,lower_threshold;
    local Chol_Alpha_corr_adjusted,row_all,row_all_sq,denom,i,j,Alpha_corr,Lambda_mat,Psi_matrix,Psi_matrix_big,Lamda1,Lamda2,Lamda,AlphaW,z,y1,Gamma_X,y2,Y,y2_temp;
    local Xbeta,Xbeta1,Xbeta2,v11,v12,v1,countObs,smallCObs,term2,threshUpper,threshLower,phiUpper;
    local phiLower,iden_matrix1,iden_matrix2,one_negative1,one_negative2,seednext,Likelihood,U_Y,LL,Full_error,e1,e12,e21,e22,M,Alt_chosen1,Alt_chosen2,temp1,temp2,ch;
    local B_Tild,Error_Tild,BU_Tild,Error_YU_Tild,Error_U_Tild,Error_Y,Diff_Mean,Diff_Mean_mu,Mean_changed,Error_changed,Curr_Lower_Threshold,Curr_Upper_Threshold,p1,p2,p3,p4;
    local pair_GG,g1,g2,rho_low_g1,rho_low_g2,rho_up_g1,rho_up_g2,var_g1g2,p2_temp,D_VG,rho_low_g3,rho_up_g3,mean_gu,var_gu,om,mean_low_final,mean_up_final,var_final,p3_1_uo,ss_up;
    local R_GG,mean_final,p4_temp,sss,Chol_Alpha_corr_adjusted1,temp,seed20,p3_1_up,Temp_negative;
    
    local alpha_gradient,alphad,AlphaWd,zd,yd,LambdaZd,Utilityd,gg_temp,U_Yd,B_Tild_d,gg,BU_Tild_d,Diff_Mean_d,Diff_Mean_mu_d,Mean_changed_d;
    local p1_d,p1_dd,p2_dd,p3_dd,p4_dd,rho_low_g1d,rho_low_g2d,rho_up_g1d,rho_up_g2d,p2_temp1,p2_temp2,p2_temp3,p2_temp4,p2_temp11,p2_temp22,p2_temp33,p2_temp44;
    local mean_gu_d,mean_low_final_d,mean_up_final_d,w1,g11,mean_final_d,ss,gradient,num_element,Psi_matrix_big_d,Lamda_d;
    
    local alpha_corr_gradient,d_chol_alpha_corr1,row_num,col_num,denom1,d_chol_alpha_corr,Alpha_corrd,Full_error_d,e1_d,e12_d,e21_d,e22_d;
    local Error_Tild_d,Error_YU_Tild_d,Error_U_Tild_d,Error_Y_d,Error_changed_d,om_low_g1,om_low_g2,om_up_g1,om_up_g2,omncd_low_g1;
    local omncd_low_g2,omncd_up_g1,omncd_up_g2,rho_low_g1md,rho_low_g2md,rho_up_g1md,rho_up_g2md,rho_low_g1m,rho_low_g2m,rho_up_g1m,rho_up_g2m;
    local var_g1g2_d,var_gu_d,omncd,var_final_d,shi_r_unq,diff_cdf,w2;
    
    local delta_gradient,delta_d,idel,Gamma_X_d,y2_d,Lambda_count_d,dgam_smallC,dgam_term1,Count_Threshold_d,Curr_Lower_Threshold_d,Curr_Upper_Threshold_d;
    local rho_low_g3_d,rho_up_g3_d,D_matrix_gradient,d_matrix_coeff_d,idmat,D_matrix_d,p1_dm,p1_dr,Alpha_corrd_d,Psi_gradient;
    local d_chol_psi,Psidd,Psid,Psi_matrix_big_dd,Beta_gradient,betad,Xbeta_d,Xbeta1_d,Xbeta2_d,ibeta,iPsi,ilambda,Lambda_gradient;
    local d_lambda,Lambda_mat_d,ilamda,Lamda_gradient,d_chol_lamda,lamdadd,lamdad1,Lamdad,Lamda_dd;
    local Theta_gradient,dthet_smallC,dthet_term1,Phi_gradient,dphi_threshUpper,dphi_threshLower;
    local upper_threshold_gradient,lower_threshold_d,upper_threshold_d,lower_threshold_matrix_d,upper_threshold_matrix_d,iupper_th,g22,ss_low;
    local upper_threshold_K,upper_threshold_decider,upper_threshold_K_d,Phi_d,xPhiMat_d,Phi_coeff_d,Chol_Lamda,Lamda_chol,temp_num1,temp_num2,curr_ele,curr_mat,Beta_coeff_expand;
    local Beta_coeff_expand_d,Alt_chosen,iden_matrix,one_negative,Xbetad,row_add;
    local upper_threshold_K1_d,Phi_K1_d,count;
    local pair_ogc_count,pair_ogcn_count,pair_nn_count;
    local phi_All,phi_mat,GP_Global_d,temp_arr,Gamma_Phi_d,ZGPD,temp_store;
    local mean_gu_final,var_gu_final,p4_1,g4_1,mean_gu_final_d,var_gu_final_d;
    local upper_threshold_K1,Phi_coeff1,Phi_coeff_K1,Chol_Lamda_adjusted,Chol_Lamda_adjusted1,row_found,threshCountMax,xPhiMat;
    
    delta_coeff         = parm[1:nvarmC];
    Beta_coeff          = parm[nvarmC+1:nvarmC+nvarma];
    Chol_Lamda          = upmat(xpnd(parm[nvarmC+nvarma+1:nvarmC+nvarma+All_nCholerr]));
    
    
    if(nvar_mear_ordl > 0);
        upper_threshold_K    =  exp(parm[nvarmC+nvarma+All_nCholerr+1:nvarmC+nvarma+All_nCholerr+num_ordl_cat_req]);
        upper_threshold_K1   = zeros(nvar_mear_ordl,Highest_scale);
        for i(1,nvar_mear_ordl,1);
            if(i==1);
                upper_threshold_K1[i,1:num_ordl_cat_req1[i]] = (upper_threshold_K[1:num_ordl_cat_req_csum[i]])';
            else;
                upper_threshold_K1[i,1:num_ordl_cat_req1[i]] = (upper_threshold_K[num_ordl_cat_req_csum[i-1]+1:num_ordl_cat_req_csum[i]])';
            endif;
        endfor;
        
        upper_threshold      =  (cumsumc(upper_threshold_K1'))';
        for i(1,nvar_mear_ordl,1);
            if(num_ordl_cat_req1[i] < Highest_scale);
                upper_threshold[i,num_ordl_cat_req1[i]+1:Highest_scale] = positive_infinity*ones(1,Highest_scale-num_ordl_cat_req1[i]);
            endif;
        endfor;
        upper_threshold_decider = negative_infinity*ones(nvar_mear_ordl,1) ~ zeros(nvar_mear_ordl,1) ~ upper_threshold ~ positive_infinity*ones(nvar_mear_ordl,1);
    endif;
    
    if(nvar_mear_count > 0);
        Phi_coeff1      = exp(parm[nvarmC+nvarma+All_nCholerr+num_ordl_cat_req+1:nvarmC+nvarma+All_nCholerr+num_ordl_cat_req+Total_Phi]);
        Phi_coeff_K1    = zeros(nvar_mear_count,Highest_Phi);
        for i(1,nvar_mear_count,1);
            if(i==1);
                Phi_coeff_K1[i,1:Num_Phi[i]] = (Phi_coeff1[1:num_Phi_csum[i]])';
            else;
                Phi_coeff_K1[i,1:Num_Phi[i]] = (Phi_coeff1[num_Phi_csum[i-1]+1:num_Phi_csum[i]])';
            endif;
        endfor;
        
        Phi_coeff      =  (cumsumc(Phi_coeff_K1'))';
        for i(1,nvar_mear_count,1);
            if(Num_Phi[i] < Highest_Phi);
                Phi_coeff[i,Num_Phi[i]+1:Highest_Phi] = zeros(1,Highest_Phi-Num_Phi[i]);
            endif;
        endfor;
    endif;
    
    Chol_Lamda_adjusted  = Chol_Lamda';
    Chol_Lamda_adjusted1 = Chol_Lamda';
    
    if(nvar_ogc > 0);
        for i(1,nvar_ogc,1);
            row_num = nvar_mear_cont+1;
            row_all = Chol_Lamda_adjusted1[row_num,1:row_num-1];
            row_all_sq = row_all.^2;
            denom = sqrt(1+sumc(row_all_sq'));
            for j(1,row_num,1);
                if (j ne row_num);
                    Chol_Lamda_adjusted[row_num,j] = Chol_Lamda_adjusted1[row_num,j]/denom;
                    clear temp;
                endif;
                
                if (j eq row_num);
                    Chol_Lamda_adjusted[row_num,j] = 1/denom;
                    clear temp;
                endif;
            endfor;
        endfor;
    endif;
    
    for i(1,num_nominal,1);
        if(i == 1);
            row_num = nvar_mear+1;
        else;
            row_num = nvar_mear+M_mat_Track_csum[i-1,1]+1;
        endif;
        row_all = Chol_Lamda_adjusted1[row_num,1:row_num-1];
        row_all_sq = row_all.^2;
        denom = sqrt(1+sumc(row_all_sq'));
        for j(1,row_num,1);
            if (j ne row_num);
                Chol_Lamda_adjusted[row_num,j] = Chol_Lamda_adjusted1[row_num,j]/denom;
                clear temp;
            endif;
            
            if (j eq row_num);
                Chol_Lamda_adjusted[row_num,j] = 1/denom;
                clear temp;
            endif;
        endfor;
    endfor;
    
    Chol_Lamda = Chol_Lamda_adjusted';
    Lamda      = Chol_Lamda'*Chol_Lamda;
    Full_error = D_matrix*Lamda*D_matrix';
    
    Gamma_X = (ones(nvar_mear,1) .*. delta_coeff  )*~(dta[.,ivgenvC])';
    y2 = {};
    j = 1;
    
    do until j > nvar_mear;
        y2 = y2~(sumc(Gamma_X[(j-1)*nvarmC+1:(j*nvarmC),.]));           // Y stores the Y variables value for each observation. nobs X nvar_mear. 1st col has Y1, 2nd Y2 and so on for all observations.
        j = j+1;
    endo;
    
    if(nvar_mear_count > 0);
        y2_temp = {};
        y2_temp = y2_temp ~ y2[.,1:(nvar_mear_cont+nvar_mear_ordl+nvar_mear_grup)] ~ zeros(nobs,nvar_mear_count);
        Y = y2_temp;
        clear y2_temp;
    else;
        Y = y2;
    endif;
    
    //------------------------------------------delta Gradient--------------------------------------------------------------
    ThreadBegin;
    delta_gradient = {};
    for idel(1,nvarmC,1);
        if(_max_active[idel] == 0);
            delta_gradient = delta_gradient ~ zeros(nobs,1);
        else;
            delta_d = zeros(nvarmC,1);
            delta_d[idel] = 1;
            
            Gamma_X_d = (ones(nvar_mear,1) .*. delta_d  )*~(dta[.,ivgenvC])';
            y2_d = {};
            j = 1;
            
            do until j > nvar_mear;
                y2_d = y2_d~(sumc(Gamma_X_d[(j-1)*nvarmC+1:(j*nvarmC),.]));           // Y stores the Y variables value for each observation. nobs X nvar_mear. 1st col has Y1, 2nd Y2 and so on for all observations.
                j = j+1;
            endo;
            
            yd = {};
            if(nvar_mear_count > 0);
                yd =  yd ~ y2_d[.,1:(nvar_mear_cont+nvar_mear_ordl+nvar_mear_grup)] ~ zeros(nobs,nvar_mear_count);
                
                Lambda_count_d = Lambda_count .* y2_d[.,nvar_mear_cont+nvar_mear_ordl+nvar_mear_grup+1:nvar_mear_cont+nvar_mear_ordl+nvar_mear_grup+nvar_mear_count] ;
                
                dgam_term1  = -(term1 .* Lambda_count_d);
                
                threshCountMax = threshCountMax_Global;
                xPhiMat = zeros(nvar_mear_count,threshCountMax+1);
                
                for iCnt (1,nvar_mear_count,1);
                    xPhiMat[iCnt,2:1+Num_Phi[iCnt]] = (Phi_coeff[iCnt,1:Num_Phi[iCnt]]);
                endfor;
                
                for iCnt (1,nvar_mear_count,1);
                    xPhiMat[iCnt,Num_Phi[iCnt]+2:threshCountMax+1] = ones(1,(threshCountMax+1-Num_Phi[iCnt]-1)) .*. Phi_coeff[iCnt,Num_Phi[iCnt]];
                endfor;
                
                Count_Threshold_d = zeros(nobs,nvar_mear_count*2);
                for iobs(1,nobs,1);
                    for jcount(1,nvar_mear_count,1);
                        countObs = dta[iobs,Count_Index[1,jcount]];
                        local dthet_term2,dthet_threshUpper,dthet_threshLower,dgam_term2,dgam_threshUpper,dgam_threshLower;
                        
                        term2 = 0;
                        dgam_term2 = 0;
                        
                        for icnt (0,countObs,1);
                            term2 = term2 + ( (Lambda_count[iobs,jcount]^iCnt)/(iCnt!) ) ;
                            dgam_term2  = dgam_term2 + ( ((iCnt)*Lambda_count[iobs,jcount]^(iCnt-1))/(iCnt!) * Lambda_count_d[iobs,jcount] ) ;
                        endfor;
                        
                        threshUpper = term1[iobs,jcount] * term2;
                        dgam_threshUpper  = dgam_term1[iobs,jcount] * term2  +  term1[iobs,jcount] * dgam_term2;
                        
                        if(countObs gt 0);
                            term2 = term2 - ( (Lambda_count[iobs,jcount]^countObs)/(countObs!) ) ;
                            dgam_term2 = dgam_term2 - ( ((countObs)*Lambda_count[iobs,jcount]^(countObs-1))/(countObs!) * Lambda_count_d[iobs,jcount] ) ;
                            threshLower = term1[iobs,jcount] * term2;
                            phiUpper = (xPhiMat[jcount,countObs+1])';
                            phiLower = (xPhiMat[jcount,countObs])';
                            dgam_threshLower  = dgam_term1[iobs,jcount] * term2  +  term1[iobs,jcount] * dgam_term2;
                        else;
                            threshLower = 0;
                            dgam_threshLower = 0;
                            phiUpper = 0;
                            phiLower = 0;
                        endif;
                        
                        threshUpper = minc( threshUpper|0.99999999999999999);
                        threshLower = minc( threshLower|0.99999999999999999);
                        
                        dgam_threshUpper = 1/pdfn(cdfni(threshUpper ))*dgam_threshUpper;
                        dgam_threshLower = 1/pdfn(cdfni(threshLower))*dgam_threshLower;
                        
                        Count_Threshold_d[iobs,jcount] = dgam_threshLower;
                        Count_Threshold_d[iobs,nvar_mear_count+jcount] = dgam_threshUpper;
                    endfor;
                endfor;
            else;
                yd =  yd ~ y2_d;
            endif;
            
            
            Utilityd = zeros(nobs,Alternative_all);
            
            gg_temp = {};
            pair_ogc_count = 0;
            pair_ogcn_count = 0;
            pair_nn_count = 0;
            
            for i(1,nobs,1);
                U_Y = {};
                U_Yd = {};
                gg = 0;
                p1_dd = 0;
                
                U_Y   = U_Y  | Y[i,.]' | Utility[i,.]';
                U_Yd  = U_Yd | yd[i,.]'| Utilityd[i,.]';
                
                M = zeros(nvar_mear+Alternative_all-num_nominal,nvar_mear+Alternative_all);
                M[1:nvar_mear,1:nvar_mear] = eye(nvar_mear);
                
                Alt_chosen = (dta[i,Altchm])';
                
                for j(1,num_nominal,1);
                    iden_matrix = eye(All_Nominal[1,j]-1);
                    one_negative = -1*ones(All_Nominal[1,j]-1,1);
                    if(Alt_chosen[j] eq 1);
                        temp1 = one_negative ~ iden_matrix;
                    elseif(Alt_chosen[j] eq All_Nominal[1,j]);
                        temp1 = iden_matrix ~ one_negative;
                    else;
                        ch = Alt_chosen[j];
                        temp1 = iden_matrix[.,1:ch-1] ~ one_negative ~ iden_matrix[.,ch:All_Nominal[1,j]-1];
                    endif;
                    
                    if(j == 1);
                        M[nvar_mear+1:nvar_mear+All_Nominal[1,j]-1,nvar_mear+1:nvar_mear+All_Nominal[1,j]] = temp1;
                    else;
                        M[nvar_mear+M_mat_Track_csum[j-1,1]+1:nvar_mear+M_mat_Track_csum[j,1],nvar_mear+Nominal_csum[j-1,1]+1:nvar_mear+Nominal_csum[j-1,1]+All_Nominal[1,j]] = temp1;
                    endif;
                    
                    clear temp1;
                endfor;
                
                B_Tild = M * U_Y;
                B_Tild_d = M * U_Yd;
                Error_Tild = M * Full_error * M';
                
                BU_Tild       = B_Tild[nvar_mear_cont+1:rows(B_Tild)];
                
                if(nvar_mear_cont > 0);
                    Error_YU_Tild = Error_Tild[nvar_mear_cont+1:rows(Error_Tild),1:nvar_mear_cont];
                endif;
                
                Error_U_Tild  = Error_Tild[nvar_mear_cont+1:rows(Error_Tild),nvar_mear_cont+1:cols(Error_Tild)];
                
                if(nvar_mear_cont > 0);
                    Error_Y       = Error_Tild[1:nvar_mear_cont,1:nvar_mear_cont];
                    Diff_Mean     = (dta[i,Continous_Index])';
                    Diff_Mean_mu  = B_Tild[1:nvar_mear_cont];
                endif;
                
                if(nvar_mear_cont > 0);
                    Mean_changed =  BU_Tild + ( Error_YU_Tild * inv(Error_Y) * (Diff_Mean-Diff_Mean_mu) );
                    Error_changed = Error_U_Tild - ( Error_YU_Tild * inv(Error_Y) *  Error_YU_Tild');
                else;
                    Mean_changed =  BU_Tild ;
                    Error_changed = Error_U_Tild ;
                endif;
                
                
                
                BU_Tild_d        = B_Tild_d[nvar_mear_cont+1:rows(B_Tild_d)];
                
                if(nvar_mear_cont > 0);
                    Diff_Mean_d      = zeros(nvar_mear_cont,1);
                    Diff_Mean_mu_d   = B_Tild_d[1:nvar_mear_cont];
                endif;
                
                if(nvar_mear_cont > 0);
                    Mean_changed_d =  BU_Tild_d + ( Error_YU_Tild * inv(Error_Y) * Diff_Mean_d ) - ( Error_YU_Tild * inv(Error_Y) * Diff_Mean_mu_d );
                else;
                    Mean_changed_d =  BU_Tild_d ;
                endif;
                
                Curr_Lower_Threshold = {};
                Curr_Upper_Threshold = {};
                
                Curr_Lower_Threshold_d = {};
                Curr_Upper_Threshold_d = {};
                
                if(nvar_mear_ordl > 0);
                    Curr_Lower_Threshold = Curr_Lower_Threshold ~ lower_threshold_matrix[i,.] ;
                    Curr_Upper_Threshold = Curr_Upper_Threshold ~ upper_threshold_matrix[i,.] ;
                endif;
                
                if(nvar_mear_grup > 0);
                    Curr_Lower_Threshold = Curr_Lower_Threshold ~ Category_matrix_lower[i,.] ;
                    Curr_Upper_Threshold = Curr_Upper_Threshold ~ Category_matrix_upper[i,.] ;
                endif;
                
                if(nvar_mear_count > 0);
                    Curr_Lower_Threshold = Curr_Lower_Threshold ~ Count_Threshold[i,1:nvar_mear_count] ;
                    Curr_Upper_Threshold = Curr_Upper_Threshold ~ Count_Threshold[i,nvar_mear_count+1:2*nvar_mear_count] ;
                endif;
                
                Curr_Lower_Threshold = Curr_Lower_Threshold ~ (negative_infinity*ones(1,Alternative_all-num_nominal)) ;
                Curr_Upper_Threshold = Curr_Upper_Threshold ~ (zeros(1,Alternative_all-num_nominal));
                
                if(nvar_mear_ordl > 0);
                    Curr_Lower_Threshold_d = Curr_Lower_Threshold_d ~ 0*lower_threshold_matrix[i,.] ;
                    Curr_Upper_Threshold_d = Curr_Upper_Threshold_d ~ 0*upper_threshold_matrix[i,.] ;
                endif;
                
                if(nvar_mear_grup > 0);
                    Curr_Lower_Threshold_d = Curr_Lower_Threshold_d ~ 0*Category_matrix_lower[i,.] ;
                    Curr_Upper_Threshold_d = Curr_Upper_Threshold_d ~ 0*Category_matrix_upper[i,.] ;
                endif;
                
                if(nvar_mear_count > 0);
                    Curr_Lower_Threshold_d = Curr_Lower_Threshold_d ~ Count_Threshold_d[i,1:nvar_mear_count] ;
                    Curr_Upper_Threshold_d = Curr_Upper_Threshold_d ~ Count_Threshold_d[i,nvar_mear_count+1:2*nvar_mear_count] ;
                endif;
                
                Curr_Lower_Threshold_d = Curr_Lower_Threshold_d ~ (zeros(1,Alternative_all-num_nominal)) ;
                Curr_Upper_Threshold_d = Curr_Upper_Threshold_d ~ (zeros(1,Alternative_all-num_nominal));
                
                
                if(nvar_mear_cont > 0);
                    p1 = pdfmvn(Diff_Mean,Diff_Mean_mu,Error_Y);
                    p1_d = pdfgmean(Diff_Mean,Diff_Mean_mu,Error_Y);
                    
                    if(p1 > upper_limit);
                        p1_dd = (1/p1)*(p1_d' * (Diff_Mean_d-Diff_Mean_mu_d));
                    endif;
                endif;
                
                if(nvar_ogc > 1);
                    p2_dd = 0;
                    for g1(1,nvar_mear_ordl+nvar_mear_grup+nvar_mear_count-1,1);
                        for g2(g1+1,nvar_mear_ordl+nvar_mear_grup+nvar_mear_count,1);
                            
                            pair_ogc_count = pair_ogc_count + 1;
                            
                            rho_low_g1d =  (Curr_Lower_Threshold_d[1,g1] - Mean_changed_d[g1] ) / sqrt(Error_changed[g1,g1]);
                            rho_low_g2d =  (Curr_Lower_Threshold_d[1,g2] - Mean_changed_d[g2] ) / sqrt(Error_changed[g2,g2]);
                            rho_up_g1d =   (Curr_Upper_Threshold_d[1,g1] - Mean_changed_d[g1] ) / sqrt(Error_changed[g1,g1]);
                            rho_up_g2d =   (Curr_Upper_Threshold_d[1,g2] - Mean_changed_d[g2] ) / sqrt(Error_changed[g2,g2]);
                            
                            p2_temp11 = rho_up_g1d | rho_up_g2d | 0;
                            p2_temp22 = rho_up_g1d | rho_low_g2d | 0;
                            p2_temp33 = rho_low_g1d | rho_up_g2d | 0;
                            p2_temp44 = rho_low_g1d | rho_low_g2d | 0;
                            
                            if(Store_ogc[pair_ogc_count,13] > upper_limit);
                                p2_dd = p2_dd + ( (1/Store_ogc[pair_ogc_count,13])*( (Store_ogc[pair_ogc_count,1:3] * p2_temp11) - (Store_ogc[pair_ogc_count,4:6] * p2_temp22) - (Store_ogc[pair_ogc_count,7:9] * p2_temp33) + (Store_ogc[pair_ogc_count,10:12] * p2_temp44) ) );
                            endif;
                            clear rho_low_g1,rho_low_g2,rho_up_g1,rho_up_g2,var_g1g2,p2_temp,rho_low_g1d,rho_low_g2d,rho_up_g1d,rho_up_g2d,p2_temp1,p2_temp2,p2_temp3,p2_temp4,p2_temp11,p2_temp22,p2_temp33,p2_temp44;
                        endfor;
                    endfor;
                else;
                    p2_dd = 0;
                endif;
                
                if(nvar_ogc > 0);
                    p3_dd = 0;
                    for v1(1,nvar_mear_ordl+nvar_mear_grup+nvar_mear_count,1);
                        for g1(1,num_nominal,1);
                            D_VG = zeros(All_Nominal[1,g1],(nvar_mear_ordl+nvar_mear_grup+nvar_mear_count+Alternative_all-num_nominal));
                            D_VG[1,v1] = 1;
                            
                            pair_ogcn_count = pair_ogcn_count + 1;
                            if(g1 == 1);
                                D_VG[2:rows(D_VG),nvar_mear_ordl+nvar_mear_grup+nvar_mear_count+1:nvar_mear_ordl+nvar_mear_grup+nvar_mear_count+All_Nominal[1,g1]-1] = eye(All_Nominal[1,g1]-1);
                            else;
                                D_VG[2:rows(D_VG),nvar_mear_ordl+nvar_mear_grup+nvar_mear_count+M_mat_Track_csum[g1-1,1]+1:nvar_mear_ordl+nvar_mear_grup+nvar_mear_count+M_mat_Track_csum[g1,1]] = eye(All_Nominal[1,g1]-1);
                            endif;
                            
                            rho_low_g3 = D_VG*Curr_Lower_Threshold';
                            rho_up_g3  = D_VG*Curr_Upper_Threshold';
                            
                            rho_low_g3_d = D_VG*Curr_Lower_Threshold_d';
                            rho_up_g3_d  = D_VG*Curr_Upper_Threshold_d';
                            
                            mean_gu    = D_VG*Mean_changed;
                            var_gu     = D_VG*Error_changed*D_VG';
                            
                            mean_gu_d  = D_VG*Mean_changed_d;
                            
                            om  = sqrt(diag(var_gu));
                            mean_low_final = (rho_low_g3 - mean_gu)./om;
                            mean_up_final  = (rho_up_g3 - mean_gu)./om;
                            
                            var_final      = corrvc(var_gu);
                            var_final      = diagrv(var_final,ones(All_Nominal[1,g1],1));
                            
                            mean_low_final_d = (rho_low_g3_d - mean_gu_d)./om;
                            mean_up_final_d  = (rho_up_g3_d - mean_gu_d)./om;
                            
                            if(Store_ogcn[pair_ogcn_count,1] > upper_limit);
                                p3_dd = p3_dd + ( (1/Store_ogcn[pair_ogcn_count,1]) *  (Store_ogcn[pair_ogcn_count,2:rows(mean_up_final_d)+1] * mean_up_final_d)  )  ;
                            endif;
                            
                            clear rho_low_g3,rho_up_g3,mean_gu,var_gu,om,mean_low_final,mean_up_final,var_final,D_VG,mean_gu_d,mean_low_final_d,mean_up_final_d;
                            clear rho_low_g3_d,rho_up_g3_d;
                        endfor;
                    endfor;
                else;
                    p3_dd = 0 ;
                endif;
                
                
                p4_dd = 0;
                if(num_nominal > 1);
                    for g1(1,num_nominal-1,1);
                        for g2(g1+1,num_nominal,1);
                            R_GG = zeros(All_Nominal[1,g1]+All_Nominal[1,g2]-2,nvar_mear_ordl+nvar_mear_grup+nvar_mear_count+Alternative_all-num_nominal);
                            
                            pair_nn_count = pair_nn_count + 1;
                            if(g1 == 1);
                                R_GG[1:M_mat_Track[1,g1],nvar_mear_ordl+nvar_mear_grup+nvar_mear_count+1:nvar_mear_ordl+nvar_mear_grup+nvar_mear_count+All_Nominal[1,g1]-1] = eye(All_Nominal[1,g1]-1);
                            else;
                                R_GG[1:M_mat_Track[1,g1],nvar_mear_ordl+nvar_mear_grup+nvar_mear_count+M_mat_Track_csum[g1-1,1]+1:nvar_mear_ordl+nvar_mear_grup+nvar_mear_count+M_mat_Track_csum[g1,1]] = eye(All_Nominal[1,g1]-1);
                            endif;
                            
                            R_GG[M_mat_Track[1,g1]+1:rows(R_GG),nvar_mear_ordl+nvar_mear_grup+nvar_mear_count+M_mat_Track_csum[g2-1,1]+1:nvar_mear_ordl+nvar_mear_grup+nvar_mear_count+M_mat_Track_csum[g2,1]] = eye(All_Nominal[1,g2]-1);
                            
                            
                            mean_gu    = -(R_GG*Mean_changed);
                            mean_gu_d  = -(R_GG*Mean_changed_d);
                            
                            var_gu     = R_GG*Error_changed*R_GG';
                            
                            om  = sqrt(diag(var_gu));
                            mean_final = mean_gu./om;
                            
                            var_final      = corrvc(var_gu);
                            var_final      = diagrv(var_final,ones(All_Nominal[1,g1]+All_Nominal[1,g2]-2,1));
                            
                            mean_final_d  = (mean_gu_d)./om;
                            
                            num_element = All_Nominal[1,g1] + All_Nominal[1,g2] - 2	;
                            
                            if(Store_nn[pair_nn_count,1] > upper_limit);
                                p4_dd = p4_dd + ( (1/Store_nn[pair_nn_count,1]) *  (Store_nn[pair_nn_count,2:num_element+1] * mean_final_d)  )  ;
                            endif;
                            
                            clear R_GG,mean_gu,var_gu,om,mean_final,var_final,mean_final_d;
                        endfor;
                    endfor;
                elseif(nvar_ogc == 0 and num_nominal == 1);
                    pair_nn_count = pair_nn_count + 1;
                    
                    mean_gu    = - Mean_changed[nvar_ogc+1:rows(Mean_changed)];
                    var_gu     =   Error_changed[nvar_ogc+1:rows(Error_changed),nvar_ogc+1:cols(Error_changed)];
                    
                    om  = sqrt(diag(var_gu));
                    mean_gu_final = mean_gu./om;
                    var_gu_final = corrvc(var_gu);
                    var_gu_final = diagrv(var_gu_final,ones((All_Nominal[1,1]-1),1));
                    
                    mean_gu_d        =      -Mean_changed_d[nvar_ogc+1:rows(Mean_changed_d)];
                    mean_gu_final_d  = (mean_gu_d)./om;
                    
                    num_element = (All_Nominal[1,1]-1);
                    if(Store_nn[pair_nn_count,1] > upper_limit);
                        p4_dd = ( (1/Store_nn[pair_nn_count,1]) *  (Store_nn[pair_nn_count,2:num_element+1] * mean_gu_final_d)  )  ;
                    endif;
                    clear mean_gu,var_gu,om,mean_gu_final,var_gu_final,mean_gu_d,mean_gu_final_d;
                endif;
                
                gg = p1_dd + p2_dd + p3_dd + p4_dd;
                gg_temp = gg_temp | gg;
                
                clear Lambda_mat,M,B_Tild,Error_Tild,Mean_changed,Error_changed,BU_Tild,Error_YU_Tild,Error_U_Tild,Error_Y,Diff_Mean,BU_Tild_d,Diff_Mean_d,Mean_changed_d,B_Tild_d,gg;
            endfor;
            delta_gradient = delta_gradient ~ gg_temp;
            
            clear yd,Utilityd,Count_Threshold_d;
        endif;
    endfor;
    ThreadEnd;
    //----------------------------------------------------------Beta Gradient-------------------------------------------
    ThreadBegin;
    Beta_gradient = {};
    for ibeta(1,nvarma,1);
        if(_max_active[nvarmC+ibeta] == 0);
            Beta_gradient = Beta_gradient ~ zeros(nobs,1);
        else;
            betad = zeros(nvarma,1);
            betad[ibeta] = 1;
            
            Beta_coeff_expand_d = {};
            for j(1,num_nominal,1);
                if(j == 1);
                    Beta_coeff_expand_d = Beta_coeff_expand_d | (ones(All_Nominal[1,j],1) .*. betad[1:nvarma_csum[j]]);
                else;
                    Beta_coeff_expand_d = Beta_coeff_expand_d | (ones(All_Nominal[1,j],1) .*. betad[nvarma_csum[j-1]+1:nvarma_csum[j]]);
                endif;
            endfor;
            
            
            Xbetad = (Beta_coeff_expand_d)*~(dta[.,ivgenva])';
            
            Utilityd = {};
            for i1(1,num_nominal,1);
                j = 1;
                
                if(i1 == 1);
                    row_add = 0;
                else;
                    row_add = sumr(All_Nominal[1,1:i1-1] .* nvarma_all[1,1:i1-1]);
                endif;
                
                do until j > All_Nominal[1,i1];
                    Utilityd = Utilityd~(sumc(Xbetad[row_add+(j-1)*nvarma_all[1,i1]+1:row_add+(j*nvarma_all[1,i1]),.]));
                    j = j+1;
                endo;
            endfor;
            
            for i(1,nobs,1);
                for j(1,Alternative_all,1);
                    if(dta[i,Avalability[j]] == 0);
                        Utilityd[i,j] = Negative_Infinity_d;
                    endif;
                endfor;
            endfor;
            
            yd = zeros(nobs,nvar_mear);
            
            clear betad,Beta_coeff_expand_d,Xbetad;
            
            
            gg_temp = {};
            pair_ogc_count = 0;
            pair_ogcn_count = 0;
            pair_nn_count = 0;
            
            for i(1,nobs,1);
                U_Y = {};
                U_Yd = {};
                gg = 0;
                p1_dd = 0;
                
                U_Y   = U_Y   | Y[i,.]' | Utility[i,.]';
                U_Yd   = U_Yd | yd[i,.]'| Utilityd[i,.]';
                
                M = zeros(nvar_mear+Alternative_all-num_nominal,nvar_mear+Alternative_all);
                M[1:nvar_mear,1:nvar_mear] = eye(nvar_mear);
                
                Alt_chosen = (dta[i,Altchm])';
                
                for j(1,num_nominal,1);
                    iden_matrix = eye(All_Nominal[1,j]-1);
                    one_negative = -1*ones(All_Nominal[1,j]-1,1);
                    if(Alt_chosen[j] eq 1);
                        temp1 = one_negative ~ iden_matrix;
                    elseif(Alt_chosen[j] eq All_Nominal[1,j]);
                        temp1 = iden_matrix ~ one_negative;
                    else;
                        ch = Alt_chosen[j];
                        temp1 = iden_matrix[.,1:ch-1] ~ one_negative ~ iden_matrix[.,ch:All_Nominal[1,j]-1];
                    endif;
                    
                    if(j == 1);
                        M[nvar_mear+1:nvar_mear+All_Nominal[1,j]-1,nvar_mear+1:nvar_mear+All_Nominal[1,j]] = temp1;
                    else;
                        M[nvar_mear+M_mat_Track_csum[j-1,1]+1:nvar_mear+M_mat_Track_csum[j,1],nvar_mear+Nominal_csum[j-1,1]+1:nvar_mear+Nominal_csum[j-1,1]+All_Nominal[1,j]] = temp1;
                    endif;
                    
                    clear temp1;
                endfor;
                
                B_Tild = M * U_Y;
                B_Tild_d = M * U_Yd;
                Error_Tild = M * Full_error * M';
                
                BU_Tild       = B_Tild[nvar_mear_cont+1:rows(B_Tild)];
                
                if(nvar_mear_cont > 0);
                    Error_YU_Tild = Error_Tild[nvar_mear_cont+1:rows(Error_Tild),1:nvar_mear_cont];
                endif;
                
                Error_U_Tild  = Error_Tild[nvar_mear_cont+1:rows(Error_Tild),nvar_mear_cont+1:cols(Error_Tild)];
                
                if(nvar_mear_cont > 0);
                    Error_Y       = Error_Tild[1:nvar_mear_cont,1:nvar_mear_cont];
                    Diff_Mean     = (dta[i,Continous_Index])';
                    Diff_Mean_mu  = B_Tild[1:nvar_mear_cont];
                endif;
                
                if(nvar_mear_cont > 0);
                    Mean_changed =  BU_Tild + ( Error_YU_Tild * inv(Error_Y) * (Diff_Mean-Diff_Mean_mu) );
                    Error_changed = Error_U_Tild - ( Error_YU_Tild * inv(Error_Y) *  Error_YU_Tild');
                else;
                    Mean_changed =  BU_Tild ;
                    Error_changed = Error_U_Tild ;
                endif;
                
                BU_Tild_d        = B_Tild_d[nvar_mear_cont+1:rows(B_Tild_d)];
                
                if(nvar_mear_cont > 0);
                    Diff_Mean_d      = zeros(nvar_mear_cont,1);
                    Diff_Mean_mu_d   = B_Tild_d[1:nvar_mear_cont];
                endif;
                
                if(nvar_mear_cont > 0);
                    Mean_changed_d =  BU_Tild_d + ( Error_YU_Tild * inv(Error_Y) * Diff_Mean_d ) - ( Error_YU_Tild * inv(Error_Y) * Diff_Mean_mu_d );
                else;
                    Mean_changed_d =  BU_Tild_d ;
                endif;
                
                
                Curr_Lower_Threshold = {};
                Curr_Upper_Threshold = {};
                
                if(nvar_mear_ordl > 0);
                    Curr_Lower_Threshold = Curr_Lower_Threshold ~ lower_threshold_matrix[i,.] ;
                    Curr_Upper_Threshold = Curr_Upper_Threshold ~ upper_threshold_matrix[i,.] ;
                endif;
                
                if(nvar_mear_grup > 0);
                    Curr_Lower_Threshold = Curr_Lower_Threshold ~ Category_matrix_lower[i,.] ;
                    Curr_Upper_Threshold = Curr_Upper_Threshold ~ Category_matrix_upper[i,.] ;
                endif;
                
                if(nvar_mear_count > 0);
                    Curr_Lower_Threshold = Curr_Lower_Threshold ~ Count_Threshold[i,1:nvar_mear_count] ;
                    Curr_Upper_Threshold = Curr_Upper_Threshold ~ Count_Threshold[i,nvar_mear_count+1:2*nvar_mear_count] ;
                endif;
                
                Curr_Lower_Threshold = Curr_Lower_Threshold ~ (negative_infinity*ones(1,Alternative_all-num_nominal)) ;
                Curr_Upper_Threshold = Curr_Upper_Threshold ~ (zeros(1,Alternative_all-num_nominal));
                
                if(nvar_mear_cont > 0);
                    p1 = pdfmvn(Diff_Mean,Diff_Mean_mu,Error_Y);
                    p1_d = pdfgmean(Diff_Mean,Diff_Mean_mu,Error_Y);
                    
                    if(p1 > upper_limit);
                        p1_dd = (1/p1)*(p1_d' * (Diff_Mean_d-Diff_Mean_mu_d));
                    endif;
                endif;
                
                
                if(nvar_ogc > 1);
                    p2_dd = 0;
                    for g1(1,nvar_mear_ordl+nvar_mear_grup+nvar_mear_count-1,1);
                        for g2(g1+1,nvar_mear_ordl+nvar_mear_grup+nvar_mear_count,1);
                            
                            pair_ogc_count = pair_ogc_count + 1;
                            
                            rho_low_g1d =  (- Mean_changed_d[g1] ) / sqrt(Error_changed[g1,g1]);
                            rho_low_g2d =  (- Mean_changed_d[g2] ) / sqrt(Error_changed[g2,g2]);
                            rho_up_g1d =   (- Mean_changed_d[g1] ) / sqrt(Error_changed[g1,g1]);
                            rho_up_g2d =   (- Mean_changed_d[g2] ) / sqrt(Error_changed[g2,g2]);
                            
                            p2_temp11 = rho_up_g1d | rho_up_g2d | 0;
                            p2_temp22 = rho_up_g1d | rho_low_g2d | 0;
                            p2_temp33 = rho_low_g1d | rho_up_g2d | 0;
                            p2_temp44 = rho_low_g1d | rho_low_g2d | 0;
                            
                            if(Store_ogc[pair_ogc_count,13] > upper_limit);
                                p2_dd = p2_dd + ( (1/Store_ogc[pair_ogc_count,13])*( (Store_ogc[pair_ogc_count,1:3] * p2_temp11) - (Store_ogc[pair_ogc_count,4:6] * p2_temp22) - (Store_ogc[pair_ogc_count,7:9] * p2_temp33) + (Store_ogc[pair_ogc_count,10:12] * p2_temp44) ) );
                            endif;
                            clear rho_low_g1,rho_low_g2,rho_up_g1,rho_up_g2,var_g1g2,p2_temp,rho_low_g1d,rho_low_g2d,rho_up_g1d,rho_up_g2d,p2_temp1,p2_temp2,p2_temp3,p2_temp4,p2_temp11,p2_temp22,p2_temp33,p2_temp44;
                        endfor;
                    endfor;
                else;
                    p2_dd = 0;
                endif;
                
                if(nvar_ogc > 0);
                    p3_dd = 0;
                    for v1(1,nvar_mear_ordl+nvar_mear_grup+nvar_mear_count,1);
                        for g1(1,num_nominal,1);
                            D_VG = zeros(All_Nominal[1,g1],(nvar_mear_ordl+nvar_mear_grup+nvar_mear_count+Alternative_all-num_nominal));
                            D_VG[1,v1] = 1;
                            
                            pair_ogcn_count = pair_ogcn_count + 1;
                            if(g1 == 1);
                                D_VG[2:rows(D_VG),nvar_mear_ordl+nvar_mear_grup+nvar_mear_count+1:nvar_mear_ordl+nvar_mear_grup+nvar_mear_count+All_Nominal[1,g1]-1] = eye(All_Nominal[1,g1]-1);
                            else;
                                D_VG[2:rows(D_VG),nvar_mear_ordl+nvar_mear_grup+nvar_mear_count+M_mat_Track_csum[g1-1,1]+1:nvar_mear_ordl+nvar_mear_grup+nvar_mear_count+M_mat_Track_csum[g1,1]] = eye(All_Nominal[1,g1]-1);
                            endif;
                            
                            rho_low_g3 = D_VG*Curr_Lower_Threshold';
                            rho_up_g3  = D_VG*Curr_Upper_Threshold';
                            
                            mean_gu    = D_VG*Mean_changed;
                            var_gu     = D_VG*Error_changed*D_VG';
                            
                            mean_gu_d  = D_VG*Mean_changed_d;
                            
                            om  = sqrt(diag(var_gu));
                            mean_low_final = (rho_low_g3 - mean_gu)./om;
                            mean_up_final  = (rho_up_g3 - mean_gu)./om;
                            
                            var_final      = corrvc(var_gu);
                            var_final      = diagrv(var_final,ones(All_Nominal[1,g1],1));
                            
                            mean_low_final_d = (- mean_gu_d)./om;
                            mean_up_final_d  = (- mean_gu_d)./om;
                            
                            if(Store_ogcn[pair_ogcn_count,1] > upper_limit);
                                p3_dd = p3_dd + ( (1/Store_ogcn[pair_ogcn_count,1]) *  (Store_ogcn[pair_ogcn_count,2:rows(mean_up_final_d)+1] * mean_up_final_d)  )  ;
                            endif;
                            
                            clear rho_low_g3,rho_up_g3,mean_gu,var_gu,om,mean_low_final,mean_up_final,var_final,D_VG,mean_gu_d,mean_low_final_d,mean_up_final_d;
                        endfor;
                    endfor;
                else;
                    p3_dd = 0 ;
                endif;
                
                p4_dd = 0;
                if(num_nominal > 1);
                    for g1(1,num_nominal-1,1);
                        for g2(g1+1,num_nominal,1);
                            R_GG = zeros(All_Nominal[1,g1]+All_Nominal[1,g2]-2,nvar_mear_ordl+nvar_mear_grup+nvar_mear_count+Alternative_all-num_nominal);
                            
                            pair_nn_count = pair_nn_count + 1;
                            if(g1 == 1);
                                R_GG[1:M_mat_Track[1,g1],nvar_mear_ordl+nvar_mear_grup+nvar_mear_count+1:nvar_mear_ordl+nvar_mear_grup+nvar_mear_count+All_Nominal[1,g1]-1] = eye(All_Nominal[1,g1]-1);
                            else;
                                R_GG[1:M_mat_Track[1,g1],nvar_mear_ordl+nvar_mear_grup+nvar_mear_count+M_mat_Track_csum[g1-1,1]+1:nvar_mear_ordl+nvar_mear_grup+nvar_mear_count+M_mat_Track_csum[g1,1]] = eye(All_Nominal[1,g1]-1);
                            endif;
                            
                            R_GG[M_mat_Track[1,g1]+1:rows(R_GG),nvar_mear_ordl+nvar_mear_grup+nvar_mear_count+M_mat_Track_csum[g2-1,1]+1:nvar_mear_ordl+nvar_mear_grup+nvar_mear_count+M_mat_Track_csum[g2,1]] = eye(All_Nominal[1,g2]-1);
                            
                            mean_gu    = -(R_GG*Mean_changed);
                            mean_gu_d  = -(R_GG*Mean_changed_d);
                            
                            var_gu     = R_GG*Error_changed*R_GG';
                            
                            om  = sqrt(diag(var_gu));
                            mean_final = mean_gu./om;
                            
                            var_final      = corrvc(var_gu);
                            var_final      = diagrv(var_final,ones(All_Nominal[1,g1]+All_Nominal[1,g2]-2,1));
                            
                            mean_final_d  = (mean_gu_d)./om;
                            
                            num_element = All_Nominal[1,g1] + All_Nominal[1,g2] - 2	;
                            
                            if(Store_nn[pair_nn_count,1] > upper_limit);
                                p4_dd = p4_dd + ( (1/Store_nn[pair_nn_count,1]) *  (Store_nn[pair_nn_count,2:num_element+1] * mean_final_d)  )  ;
                            endif;
                            
                            clear R_GG,mean_gu,var_gu,om,mean_final,var_final,mean_final_d;
                        endfor;
                    endfor;
                elseif(nvar_ogc == 0 and num_nominal == 1);
                    pair_nn_count = pair_nn_count + 1;
                    
                    mean_gu    = - Mean_changed[nvar_ogc+1:rows(Mean_changed)];
                    var_gu     =   Error_changed[nvar_ogc+1:rows(Error_changed),nvar_ogc+1:cols(Error_changed)];
                    
                    om  = sqrt(diag(var_gu));
                    mean_gu_final = mean_gu./om;
                    var_gu_final = corrvc(var_gu);
                    var_gu_final = diagrv(var_gu_final,ones((All_Nominal[1,1]-1),1));
                    
                    mean_gu_d        =      -Mean_changed_d[nvar_ogc+1:rows(Mean_changed_d)];
                    mean_gu_final_d  = (mean_gu_d)./om;
                    
                    num_element = (All_Nominal[1,1]-1);
                    if(Store_nn[pair_nn_count,1] > upper_limit);
                        p4_dd = ( (1/Store_nn[pair_nn_count,1]) *  (Store_nn[pair_nn_count,2:num_element+1] * mean_gu_final_d)  )  ;
                    endif;
                    clear mean_gu,var_gu,om,mean_gu_final,var_gu_final,mean_gu_d,mean_gu_final_d;
                endif;
                
                
                gg = p1_dd + p2_dd + p3_dd + p4_dd;
                gg_temp = gg_temp | gg;
                
                clear Lambda_mat,M,B_Tild,Error_Tild,Mean_changed,Error_changed,BU_Tild,Error_YU_Tild,Error_U_Tild,Error_Y,Diff_Mean,BU_Tild_d,Diff_Mean_d,Mean_changed_d,B_Tild_d,gg;
            endfor;
            Beta_gradient = Beta_gradient ~ gg_temp;
            
            clear yd,Utilityd;
        endif;
    endfor;
    ThreadEnd;
    //--------------------------------------------------------------------Error Matrix--------------------------------------------------
    ThreadBegin;
    lamda_gradient = {};
    for ia_corr(1,All_nCholerr,1);
        
        if(_max_active[nvarmC+nvarma+ia_corr] eq 0);
            
            lamda_gradient = lamda_gradient ~ zeros(nobs,1);
            
        else;
            
            d_chol_alpha_corr1          = zeros(All_nCholerr,1);
            d_chol_alpha_corr1[ia_corr] = 1;
            d_chol_alpha_corr1          = (upmat(xpnd(d_chol_alpha_corr1)))';
            row_num = 0;
            col_num = 0;
            
            for icheck(1,rows(Lamda),1);
                for jcheck(1,icheck-1,1);
                    if(d_chol_alpha_corr1[icheck,jcheck] eq 1);
                        row_num = icheck;
                        col_num = jcheck;
                        break;
                    endif;
                endfor;
            endfor;
            
            row_found = 0;
            for i(1,rows(Error_Map),1);
                if(row_num == Error_Map[i,1]);
                    row_found = 1;
                    break;
                endif;
            endfor;
            
            if(row_found == 1);
                row_all = Chol_Lamda_adjusted1[row_num,1:row_num-1];
                row_all_sq = row_all.^2;
                denom = sqrt(1+sumc(row_all_sq'));
                denom1 = (1+sumc(row_all_sq'));
                for jcheck(1,row_num,1);
                    if(jcheck ne row_num);
                        
                        if(jcheck eq col_num);
                            d_chol_alpha_corr1[row_num,jcheck] = (denom1 - (Chol_Lamda_adjusted1[row_num,jcheck]^2))/(denom*denom1);
                        endif;
                        
                        if(jcheck ne col_num);
                            d_chol_alpha_corr1[row_num,jcheck] = (-Chol_Lamda_adjusted1[row_num,jcheck]*Chol_Lamda_adjusted1[row_num,col_num])/(denom*denom1);
                        endif;
                    endif;
                    
                    if(jcheck eq row_num);
                        d_chol_alpha_corr1[row_num,jcheck] = (-Chol_Lamda_adjusted1[row_num,col_num])/(denom*denom1);
                    endif;
                endfor;
            endif;
            
            d_chol_alpha_corr = d_chol_alpha_corr1;
            Lamdad = d_chol_alpha_corr*Chol_Lamda + Chol_Lamda'*d_chol_alpha_corr';
            Full_error_d = D_matrix*Lamdad*D_matrix';
            
            yd = zeros(nobs,nvar_mear);
            Utilityd = zeros(nobs,Alternative_all);
            
            gg_temp = {};
            
            pair_ogc_count = 0;
            pair_ogcn_count = 0;
            pair_nn_count = 0;
            
            for i(1,nobs,1);
                U_Y = {};
                U_Yd = {};
                gg = 0;
                p1_dd = 0;
                
                U_Y   = U_Y   | Y[i,.]' | Utility[i,.]';
                U_Yd   = U_Yd | yd[i,.]'| Utilityd[i,.]';
                
                M = zeros(nvar_mear+Alternative_all-num_nominal,nvar_mear+Alternative_all);
                M[1:nvar_mear,1:nvar_mear] = eye(nvar_mear);
                
                Alt_chosen = (dta[i,Altchm])';
                
                for j(1,num_nominal,1);
                    iden_matrix = eye(All_Nominal[1,j]-1);
                    one_negative = -1*ones(All_Nominal[1,j]-1,1);
                    if(Alt_chosen[j] eq 1);
                        temp1 = one_negative ~ iden_matrix;
                    elseif(Alt_chosen[j] eq All_Nominal[1,j]);
                        temp1 = iden_matrix ~ one_negative;
                    else;
                        ch = Alt_chosen[j];
                        temp1 = iden_matrix[.,1:ch-1] ~ one_negative ~ iden_matrix[.,ch:All_Nominal[1,j]-1];
                    endif;
                    
                    if(j == 1);
                        M[nvar_mear+1:nvar_mear+All_Nominal[1,j]-1,nvar_mear+1:nvar_mear+All_Nominal[1,j]] = temp1;
                    else;
                        M[nvar_mear+M_mat_Track_csum[j-1,1]+1:nvar_mear+M_mat_Track_csum[j,1],nvar_mear+Nominal_csum[j-1,1]+1:nvar_mear+Nominal_csum[j-1,1]+All_Nominal[1,j]] = temp1;
                    endif;
                    
                    clear temp1;
                endfor;
                
                B_Tild = M * U_Y;
                Error_Tild = M * Full_error * M';
                
                B_Tild_d = M * U_Yd;
                Error_Tild_d = M * Full_error_d * M';
                
                BU_Tild       = B_Tild[nvar_mear_cont+1:rows(B_Tild)];
                
                if(nvar_mear_cont > 0);
                    Error_YU_Tild = Error_Tild[nvar_mear_cont+1:rows(Error_Tild),1:nvar_mear_cont];
                endif;
                Error_U_Tild  = Error_Tild[nvar_mear_cont+1:rows(Error_Tild),nvar_mear_cont+1:cols(Error_Tild)];
                
                if(nvar_mear_cont > 0);
                    Error_Y       = Error_Tild[1:nvar_mear_cont,1:nvar_mear_cont];
                    Diff_Mean     = (dta[i,Continous_Index])';
                    Diff_Mean_mu  = B_Tild[1:nvar_mear_cont];
                endif;
                
                if(nvar_mear_cont > 0);
                    Mean_changed =  BU_Tild + ( Error_YU_Tild * inv(Error_Y) * (Diff_Mean-Diff_Mean_mu) );
                    Error_changed = Error_U_Tild - ( Error_YU_Tild * inv(Error_Y) *  Error_YU_Tild');
                else;
                    Mean_changed =  BU_Tild ;
                    Error_changed = Error_U_Tild ;
                endif;
                
                BU_Tild_d        = B_Tild_d[nvar_mear_cont+1:rows(B_Tild_d)];
                
                if(nvar_mear_cont > 0);
                    Error_YU_Tild_d  = Error_Tild_d[nvar_mear_cont+1:rows(Error_Tild_d),1:nvar_mear_cont];
                endif;
                Error_U_Tild_d   = Error_Tild_d[nvar_mear_cont+1:rows(Error_Tild_d),nvar_mear_cont+1:cols(Error_Tild_d)];
                
                if(nvar_mear_cont > 0);
                    Error_Y_d        = Error_Tild_d[1:nvar_mear_cont,1:nvar_mear_cont];
                    Diff_Mean_d      = zeros(nvar_mear_cont,1);
                    Diff_Mean_mu_d   = B_Tild_d[1:nvar_mear_cont];
                endif;
                
                if(nvar_mear_cont > 0);
                    Mean_changed_d  =  BU_Tild_d + ( Error_YU_Tild_d * inv(Error_Y) * (Diff_Mean-Diff_Mean_mu) )  - ( Error_YU_Tild * inv(Error_Y) * Error_Y_d * inv(Error_Y) * (Diff_Mean-Diff_Mean_mu) ) + ( Error_YU_Tild * inv(Error_Y) * Diff_Mean_d  )- ( Error_YU_Tild * inv(Error_Y) * Diff_Mean_mu_d );
                    Error_changed_d = Error_U_Tild_d - ( Error_YU_Tild_d * inv(Error_Y) *  Error_YU_Tild') + (Error_YU_Tild * inv(Error_Y) * Error_Y_d * inv(Error_Y) *  Error_YU_Tild') - ( Error_YU_Tild * inv(Error_Y) *  Error_YU_Tild_d');
                else;
                    Mean_changed_d  =  BU_Tild_d ;
                    Error_changed_d = Error_U_Tild_d;
                endif;
                
                Curr_Lower_Threshold = {};
                Curr_Upper_Threshold = {};
                
                if(nvar_mear_ordl > 0);
                    Curr_Lower_Threshold = Curr_Lower_Threshold ~ lower_threshold_matrix[i,.] ;
                    Curr_Upper_Threshold = Curr_Upper_Threshold ~ upper_threshold_matrix[i,.] ;
                endif;
                
                if(nvar_mear_grup > 0);
                    Curr_Lower_Threshold = Curr_Lower_Threshold ~ Category_matrix_lower[i,.] ;
                    Curr_Upper_Threshold = Curr_Upper_Threshold ~ Category_matrix_upper[i,.] ;
                endif;
                
                if(nvar_mear_count > 0);
                    Curr_Lower_Threshold = Curr_Lower_Threshold ~ Count_Threshold[i,1:nvar_mear_count] ;
                    Curr_Upper_Threshold = Curr_Upper_Threshold ~ Count_Threshold[i,nvar_mear_count+1:2*nvar_mear_count] ;
                endif;
                
                Curr_Lower_Threshold = Curr_Lower_Threshold ~ (negative_infinity*ones(1,Alternative_all-num_nominal)) ;
                Curr_Upper_Threshold = Curr_Upper_Threshold ~ (zeros(1,Alternative_all-num_nominal));
                
                
                if(nvar_mear_cont > 0);
                    p1 = pdfmvn(Diff_Mean,Diff_Mean_mu,Error_Y);
                    p1_d = pdfgcov(Diff_Mean,Diff_Mean_mu,vech(Error_Y));
                    
                    if(p1 > upper_limit);
                        p1_dd = (1/p1)*(p1_d' * vech(Error_Y_d));
                    endif;
                endif;
                
                if(nvar_ogc > 1);
                    p2_dd = 0;
                    for g1(1,nvar_mear_ordl+nvar_mear_grup+nvar_mear_count-1,1);
                        for g2(g1+1,nvar_mear_ordl+nvar_mear_grup+nvar_mear_count,1);
                            
                            pair_ogc_count = pair_ogc_count + 1;
                            
                            om_low_g1   =   Error_changed[g1,g1];
                            om_low_g2   =   Error_changed[g2,g2];
                            om_up_g1    =   Error_changed[g1,g1];
                            om_up_g2    =   Error_changed[g2,g2];
                            
                            omncd_low_g1   =   Error_changed_d[g1,g1];
                            omncd_low_g2   =   Error_changed_d[g2,g2];
                            omncd_up_g1    =   Error_changed_d[g1,g1];
                            omncd_up_g2    =   Error_changed_d[g2,g2];
                            
                            rho_low_g1md  =  - Mean_changed_d[g1] ;
                            rho_low_g2md  =  - Mean_changed_d[g2] ;
                            rho_up_g1md   =  - Mean_changed_d[g1] ;
                            rho_up_g2md   =  - Mean_changed_d[g2] ;
                            
                            rho_low_g1m  =  (Curr_Lower_Threshold[1,g1] - Mean_changed[g1] ) ;
                            rho_low_g2m  =  (Curr_Lower_Threshold[1,g2] - Mean_changed[g2] ) ;
                            rho_up_g1m   =  (Curr_Upper_Threshold[1,g1] - Mean_changed[g1] ) ;
                            rho_up_g2m   =  (Curr_Upper_Threshold[1,g2] - Mean_changed[g2] ) ;
                            
                            rho_low_g1d =  ( sqrt(om_low_g1)*  rho_low_g1md -  rho_low_g1m * omncd_low_g1 ./ sqrt(om_low_g1) ./2   ) ./ (om_low_g1);
                            rho_low_g2d =  ( sqrt(om_low_g2)*  rho_low_g2md -  rho_low_g2m * omncd_low_g2 ./ sqrt(om_low_g2) ./2   ) ./ (om_low_g2);
                            rho_up_g1d =   ( sqrt(om_up_g1)*   rho_up_g1md -   rho_up_g1m *  omncd_up_g1 ./ sqrt(om_up_g1)   ./2   ) ./ (om_up_g1);
                            rho_up_g2d =   ( sqrt(om_up_g2)*   rho_up_g2md -   rho_up_g2m *  omncd_up_g2 ./ sqrt(om_up_g2)   ./2   ) ./ (om_up_g2);
                            
                            var_g1g2_d    =   ( ( sqrt(Error_changed[g1,g1]) * sqrt(Error_changed[g2,g2]) ) * Error_changed_d[g1,g2] + (Error_changed[g1,g2]/2) * ( ( sqrt(Error_changed[g1,g1])/sqrt(Error_changed[g2,g2]) )*Error_changed_d[g2,g2] + ( sqrt(Error_changed[g2,g2])/sqrt(Error_changed[g1,g1]) )*Error_changed_d[g1,g1] ) ) / ( Error_changed[g1,g1] * Error_changed[g2,g2]);
                            
                            p2_temp11 = rho_up_g1d | rho_up_g2d | var_g1g2_d;
                            p2_temp22 = rho_up_g1d | rho_low_g2d | var_g1g2_d;
                            p2_temp33 = rho_low_g1d | rho_up_g2d | var_g1g2_d;
                            p2_temp44 = rho_low_g1d | rho_low_g2d | var_g1g2_d;
                            
                            if(Store_ogc[pair_ogc_count,13] > upper_limit);
                                p2_dd = p2_dd + ( (1/Store_ogc[pair_ogc_count,13])*( (Store_ogc[pair_ogc_count,1:3] * p2_temp11) - (Store_ogc[pair_ogc_count,4:6] * p2_temp22) - (Store_ogc[pair_ogc_count,7:9] * p2_temp33) + (Store_ogc[pair_ogc_count,10:12] * p2_temp44) ) );
                            endif;
                            
                            
                            clear rho_low_g1,rho_low_g2,rho_up_g1,rho_up_g2,var_g1g2,p2_temp,rho_low_g1d,rho_low_g2d,rho_up_g1d,rho_up_g2d,p2_temp1,p2_temp2,p2_temp3,p2_temp4,p2_temp11,p2_temp22,p2_temp33,p2_temp44;
                            clear om_low_g1,om_low_g2,om_up_g1,om_up_g2,omncd_low_g1,omncd_low_g2,omncd_up_g1,omncd_up_g2,rho_low_g1md,rho_low_g2md,rho_up_g1md,rho_up_g2md,rho_low_g1m,rho_low_g2m,rho_up_g1m,rho_up_g2m,var_g1g2_d ;
                        endfor;
                    endfor;
                else;
                    p2_dd = 0;
                endif;
                
                if(nvar_ogc > 0);
                    p3_dd = 0;
                    for v1(1,nvar_mear_ordl+nvar_mear_grup+nvar_mear_count,1);
                        for g1(1,num_nominal,1);
                            D_VG = zeros(All_Nominal[1,g1],(nvar_mear_ordl+nvar_mear_grup+nvar_mear_count+Alternative_all-num_nominal));
                            D_VG[1,v1] = 1;
                            
                            pair_ogcn_count = pair_ogcn_count + 1;
                            if(g1 == 1);
                                D_VG[2:rows(D_VG),nvar_mear_ordl+nvar_mear_grup+nvar_mear_count+1:nvar_mear_ordl+nvar_mear_grup+nvar_mear_count+All_Nominal[1,g1]-1] = eye(All_Nominal[1,g1]-1);
                            else;
                                D_VG[2:rows(D_VG),nvar_mear_ordl+nvar_mear_grup+nvar_mear_count+M_mat_Track_csum[g1-1,1]+1:nvar_mear_ordl+nvar_mear_grup+nvar_mear_count+M_mat_Track_csum[g1,1]] = eye(All_Nominal[1,g1]-1);
                            endif;
                            
                            
                            rho_low_g3 = D_VG*Curr_Lower_Threshold';
                            rho_up_g3  = D_VG*Curr_Upper_Threshold';
                            
                            mean_gu    = D_VG*Mean_changed;
                            var_gu     = D_VG*Error_changed*D_VG';
                            
                            mean_gu_d  = D_VG*Mean_changed_d;
                            var_gu_d   = D_VG*Error_changed_d*D_VG';
                            
                            om     =  (diag(var_gu));
                            omncd  = (diag(var_gu_d));
                            
                            mean_low_final = (rho_low_g3 - mean_gu)./sqrt(om);
                            mean_up_final  = (rho_up_g3 - mean_gu)./sqrt(om);
                            
                            var_final      = corrvc(var_gu);
                            var_final      = diagrv(var_final,ones(All_Nominal[1,g1],1));
                            
                            mean_low_final_d = (  - sqrt(om') .* mean_gu_d' - (rho_low_g3 - mean_gu)' .* omncd' ./ sqrt(om') ./2   ) ./ (om');
                            mean_up_final_d  = (  - sqrt(om') .* mean_gu_d' - (rho_up_g3 - mean_gu)' .* omncd' ./ sqrt(om') ./2   ) ./ (om');
                            
                            var_final_d      = ( (var_gu_d./sqrt(om))' ./ sqrt(om) ) - 0.5 * ( (var_gu ./(om^(3/2)) .* omncd )' ./(om^(1/2))   + ((var_gu ./(om^(1/2)) )' ./(om^(3/2))) .* omncd ) ;
                            var_final_d      = diagrv(var_final_d ,ones(All_Nominal[1,g1],1));
                            
                            
                            shi_r_unq = {};
                            for ishi(1,rows(var_final_d)-1,1);
                                shi_r_unq = shi_r_unq ~ var_final_d[ishi,ishi+1:cols(var_final_d)];
                            endfor;
                            
                            if(Store_ogcn[pair_ogcn_count,1] > upper_limit);
                                p3_dd = p3_dd + ( (1/Store_ogcn[pair_ogcn_count,1]) *  ( Store_ogcn[pair_ogcn_count,2:1+cols(mean_up_final_d)] * mean_up_final_d' + Store_ogcn[pair_ogcn_count,1+cols(mean_up_final_d)+1:1+cols(mean_up_final_d)+cols(shi_r_unq)] * shi_r_unq' )  )  ;
                            endif;
                            
                            
                            clear rho_low_g3,rho_up_g3,mean_gu,var_gu,om,mean_low_final,mean_up_final,var_final,diff_cdf,mean_gu_d,mean_low_final_d,mean_up_final_d,w1,g11,w2,g2;
                            clear omncd,var_gu_d,var_final_d,shi_r_unq;
                        endfor;
                    endfor;
                else;
                    p3_dd = 0;
                endif;
                
                
                p4_dd = 0;
                if(num_nominal > 1);
                    for g1(1,num_nominal-1,1);
                        for g2(g1+1,num_nominal,1);
                            R_GG = zeros(All_Nominal[1,g1]+All_Nominal[1,g2]-2,nvar_mear_ordl+nvar_mear_grup+nvar_mear_count+Alternative_all-num_nominal);
                            
                            pair_nn_count = pair_nn_count + 1;
                            if(g1 == 1);
                                R_GG[1:M_mat_Track[1,g1],nvar_mear_ordl+nvar_mear_grup+nvar_mear_count+1:nvar_mear_ordl+nvar_mear_grup+nvar_mear_count+All_Nominal[1,g1]-1] = eye(All_Nominal[1,g1]-1);
                            else;
                                R_GG[1:M_mat_Track[1,g1],nvar_mear_ordl+nvar_mear_grup+nvar_mear_count+M_mat_Track_csum[g1-1,1]+1:nvar_mear_ordl+nvar_mear_grup+nvar_mear_count+M_mat_Track_csum[g1,1]] = eye(All_Nominal[1,g1]-1);
                            endif;
                            
                            R_GG[M_mat_Track[1,g1]+1:rows(R_GG),nvar_mear_ordl+nvar_mear_grup+nvar_mear_count+M_mat_Track_csum[g2-1,1]+1:nvar_mear_ordl+nvar_mear_grup+nvar_mear_count+M_mat_Track_csum[g2,1]] = eye(All_Nominal[1,g2]-1);
                            
                            mean_gu    = -(R_GG*Mean_changed);
                            mean_gu_d  = -(R_GG*Mean_changed_d);
                            
                            var_gu     = R_GG*Error_changed*R_GG';
                            var_gu_d   = R_GG*Error_changed_d*R_GG';
                            
                            om     = (diag(var_gu));
                            omncd  = (diag(var_gu_d));
                            
                            mean_final = mean_gu./sqrt(om);
                            
                            var_final      = corrvc(var_gu);
                            var_final      = diagrv(var_final,ones(All_Nominal[1,g1]+All_Nominal[1,g2]-2,1));
                            
                            mean_final_d  = (  sqrt(om') .* mean_gu_d' -  mean_gu' .* omncd' ./ sqrt(om') ./2   ) ./ (om');
                            var_final_d      = ( (var_gu_d./sqrt(om))' ./ sqrt(om) ) - 0.5 * ( (var_gu ./(om^(3/2)) .* omncd )' ./(om^(1/2))   + ((var_gu ./(om^(1/2)) )' ./(om^(3/2))) .* omncd ) ;
                            var_final_d      = diagrv(var_final_d ,ones(All_Nominal[1,g1]+All_Nominal[1,g2]-2,1));
                            
                            shi_r_unq = {};
                            for ishi(1,rows(var_final_d)-1,1);
                                shi_r_unq = shi_r_unq ~ var_final_d[ishi,ishi+1:cols(var_final_d )];
                            endfor;
                            
                            num_element = All_Nominal[1,g1] + All_Nominal[1,g2] - 2	;
                            
                            if(Store_nn[pair_nn_count,1] > upper_limit);
                                p4_dd = p4_dd + ( (1/Store_nn[pair_nn_count,1]) *  ( Store_nn[pair_nn_count,2:1+num_element] * mean_final_d' + Store_nn[pair_nn_count,1+num_element+1:1+num_element+cols(shi_r_unq)] * shi_r_unq' )  )  ;
                            endif;
                            
                            clear R_GG,mean_gu,var_gu,om,mean_final,var_final,mean_final_d,var_gu_d,var_final_d,shi_r_unq;
                        endfor;
                    endfor;
                elseif(nvar_ogc == 0 and num_nominal == 1);
                    pair_nn_count = pair_nn_count + 1;
                    
                    mean_gu    = - Mean_changed[nvar_ogc+1:rows(Mean_changed)];
                    var_gu     =   Error_changed[nvar_ogc+1:rows(Error_changed),nvar_ogc+1:cols(Error_changed)];
                    
                    mean_gu_d    = - Mean_changed_d[nvar_ogc+1:rows(Mean_changed_d)];
                    var_gu_d     = Error_changed_d[nvar_ogc+1:rows(Error_changed_d),nvar_ogc+1:cols(Error_changed_d)];
                    
                    om     = (diag(var_gu));
                    omncd  = (diag(var_gu_d));
                    mean_gu_final  =   mean_gu./sqrt(om);
                    
                    var_gu_final      = corrvc(var_gu);
                    var_gu_final      = diagrv(var_gu_final,ones((All_Nominal[1,1]-1),1));
                    
                    mean_gu_final_d = (  sqrt(om') .* mean_gu_d' - ( mean_gu)' .* omncd' ./ sqrt(om') ./2   ) ./ (om');
                    
                    
                    var_gu_final_d      = ( (var_gu_d./sqrt(om))' ./ sqrt(om) ) - 0.5 * ( (var_gu ./(om^(3/2)) .* omncd )' ./(om^(1/2))   + ((var_gu ./(om^(1/2)) )' ./(om^(3/2))) .* omncd ) ;
                    var_gu_final_d      = diagrv(var_gu_final_d ,ones((All_Nominal[1,1]-1),1));
                    
                    if(All_Nominal[1,1] > 2);
                        shi_r_unq = {};
                        for ishi(1,rows(var_gu_final_d)-1,1);
                            shi_r_unq = shi_r_unq ~ var_gu_final_d[ishi,ishi+1:cols(var_gu_final_d )];
                        endfor;
                    else;
                        shi_r_unq = 0;
                    endif;
                    
                    num_element = (All_Nominal[1,1]-1);
                    
                    if(Store_nn[pair_nn_count,1] > upper_limit);
                        p4_dd = ( (1/Store_nn[pair_nn_count,1]) *  ( Store_nn[pair_nn_count,2:1+num_element] * mean_gu_final_d' + Store_nn[pair_nn_count,1+num_element+1:1+num_element+cols(shi_r_unq)] * shi_r_unq' )  )  ;
                    endif;
                    clear mean_gu,var_gu,mean_gu_d,var_gu_d,om,omncd,mean_gu_final,var_gu_final,mean_gu_final_d,var_gu_final_d,shi_r_unq,w1,g1;
                endif;
                
                gg = p1_dd + p2_dd + p3_dd + p4_dd;
                gg_temp = gg_temp | gg;
                
                clear Lambda_mat,M,B_Tild,Error_Tild,Mean_changed,Error_changed,BU_Tild,Error_YU_Tild,Error_U_Tild,Error_Y,Diff_Mean,BU_Tild_d,Diff_Mean_d,Mean_changed_d,B_Tild_d,gg;
            endfor;
            lamda_gradient = lamda_gradient ~ gg_temp;
            
            clear yd,Utilityd;
        endif;
    endfor;
    ThreadEnd;
    //------------------------------------Upper Threshold Gradient-------------------------------------------------
    ThreadBegin;
    if(nvar_mear_ordl > 0);
        upper_threshold_gradient = {};
        for iupper_th(1,num_ordl_cat_req,1);
            if(_max_active[nvarmC+nvarma+All_nCholerr+iupper_th] == 0);
                upper_threshold_gradient = upper_threshold_gradient ~ zeros(nobs,1);
            else;
                yd = zeros(nobs,nvar_mear);
                Utilityd = zeros(nobs,Alternative_all);
                
                upper_threshold_d = zeros(num_ordl_cat_req,1);
                upper_threshold_d[iupper_th] = 1;
                
                upper_threshold_K1_d   = zeros(nvar_mear_ordl,Highest_scale);
                for i(1,nvar_mear_ordl,1);
                    if(i==1);
                        upper_threshold_K1_d[i,1:num_ordl_cat_req1[i]] = (upper_threshold_d[1:num_ordl_cat_req_csum[i]])';
                    else;
                        upper_threshold_K1_d[i,1:num_ordl_cat_req1[i]] = (upper_threshold_d[num_ordl_cat_req_csum[i-1]+1:num_ordl_cat_req_csum[i]])';
                    endif;
                endfor;
                
                upper_threshold_K1_d = upper_threshold_K1_d .* upper_threshold_K1;
                upper_threshold_d = (cumsumc(upper_threshold_K1_d'))';
                for i(1,nvar_mear_ordl,1);
                    if(num_ordl_cat_req1[i] < Highest_scale);
                        upper_threshold_d[i,num_ordl_cat_req1[i]+1:Highest_scale] = positive_infinity_d*ones(1,Highest_scale-num_ordl_cat_req1[i]);
                    endif;
                endfor;
                
                
                upper_threshold_d = negative_infinity_d*ones(nvar_mear_ordl,1) ~ zeros(nvar_mear_ordl,1) ~ upper_threshold_d ~ positive_infinity_d*ones(nvar_mear_ordl,1);
                
                lower_threshold_matrix_d = zeros(nind,nvar_mear_ordl);
                upper_threshold_matrix_d = zeros(nind,nvar_mear_ordl);
                
                for i(1,nobs,1);
                    for j(1,nvar_mear_ordl,1);
                        for k(1,num_ordl_cat[j],1);
                            if(dta[i,Ordinal_Index[j]] == k);
                                lower_threshold_matrix_d[i,j] = upper_threshold_d[j,k];
                                upper_threshold_matrix_d[i,j] = upper_threshold_d[j,k+1];
                            endif;
                        endfor;
                    endfor;
                endfor;
                
                
                gg_temp = {};
                pair_ogc_count = 0;
                pair_ogcn_count = 0;
                pair_nn_count = 0;
                
                for i(1,nobs,1);
                    U_Y = {};
                    U_Yd = {};
                    gg = 0;
                    p1_dd = 0;
                    
                    U_Y   = U_Y   | Y[i,.]' | Utility[i,.]';
                    U_Yd   = U_Yd | yd[i,.]'| Utilityd[i,.]';
                    
                    M = zeros(nvar_mear+Alternative_all-num_nominal,nvar_mear+Alternative_all);
                    M[1:nvar_mear,1:nvar_mear] = eye(nvar_mear);
                    
                    Alt_chosen = (dta[i,Altchm])';
                    
                    for j(1,num_nominal,1);
                        iden_matrix = eye(All_Nominal[1,j]-1);
                        one_negative = -1*ones(All_Nominal[1,j]-1,1);
                        if(Alt_chosen[j] eq 1);
                            temp1 = one_negative ~ iden_matrix;
                        elseif(Alt_chosen[j] eq All_Nominal[1,j]);
                            temp1 = iden_matrix ~ one_negative;
                        else;
                            ch = Alt_chosen[j];
                            temp1 = iden_matrix[.,1:ch-1] ~ one_negative ~ iden_matrix[.,ch:All_Nominal[1,j]-1];
                        endif;
                        
                        if(j == 1);
                            M[nvar_mear+1:nvar_mear+All_Nominal[1,j]-1,nvar_mear+1:nvar_mear+All_Nominal[1,j]] = temp1;
                        else;
                            M[nvar_mear+M_mat_Track_csum[j-1,1]+1:nvar_mear+M_mat_Track_csum[j,1],nvar_mear+Nominal_csum[j-1,1]+1:nvar_mear+Nominal_csum[j-1,1]+All_Nominal[1,j]] = temp1;
                        endif;
                        
                        clear temp1;
                    endfor;
                    
                    B_Tild = M * U_Y;
                    B_Tild_d = M * U_Yd;
                    Error_Tild = M * Full_error * M';
                    
                    BU_Tild       = B_Tild[nvar_mear_cont+1:rows(B_Tild)];
                    
                    if(nvar_mear_cont > 0);
                        Error_YU_Tild = Error_Tild[nvar_mear_cont+1:rows(Error_Tild),1:nvar_mear_cont];
                    endif;
                    Error_U_Tild  = Error_Tild[nvar_mear_cont+1:rows(Error_Tild),nvar_mear_cont+1:cols(Error_Tild)];
                    
                    if(nvar_mear_cont > 0);
                        Error_Y       = Error_Tild[1:nvar_mear_cont,1:nvar_mear_cont];
                        Diff_Mean     = (dta[i,Continous_Index])';
                        Diff_Mean_mu  = B_Tild[1:nvar_mear_cont];
                    endif;
                    
                    if(nvar_mear_cont > 0);
                        Mean_changed =  BU_Tild + ( Error_YU_Tild * inv(Error_Y) * (Diff_Mean-Diff_Mean_mu) );
                        Error_changed = Error_U_Tild - ( Error_YU_Tild * inv(Error_Y) *  Error_YU_Tild');
                    else;
                        Mean_changed =  BU_Tild ;
                        Error_changed = Error_U_Tild ;
                    endif;
                    
                    BU_Tild_d        = B_Tild_d[nvar_mear_cont+1:rows(B_Tild_d)];
                    if(nvar_mear_cont > 0);
                        Diff_Mean_d      = zeros(nvar_mear_cont,1);
                        Diff_Mean_mu_d   = B_Tild_d[1:nvar_mear_cont];
                    endif;
                    
                    if(nvar_mear_cont > 0);
                        Mean_changed_d =  BU_Tild_d + ( Error_YU_Tild * inv(Error_Y) * Diff_Mean_d ) - ( Error_YU_Tild * inv(Error_Y) * Diff_Mean_mu_d );
                    else;
                        Mean_changed_d =  BU_Tild_d ;
                    endif;
                    
                    
                    Curr_Lower_Threshold = {};
                    Curr_Upper_Threshold = {};
                    
                    Curr_Lower_Threshold = Curr_Lower_Threshold ~ lower_threshold_matrix[i,.] ;
                    Curr_Upper_Threshold = Curr_Upper_Threshold ~ upper_threshold_matrix[i,.] ;
                    
                    if(nvar_mear_grup > 0);
                        Curr_Lower_Threshold = Curr_Lower_Threshold ~ Category_matrix_lower[i,.] ;
                        Curr_Upper_Threshold = Curr_Upper_Threshold ~ Category_matrix_upper[i,.] ;
                    endif;
                    
                    if(nvar_mear_count > 0);
                        Curr_Lower_Threshold = Curr_Lower_Threshold ~ Count_Threshold[i,1:nvar_mear_count] ;
                        Curr_Upper_Threshold = Curr_Upper_Threshold ~ Count_Threshold[i,nvar_mear_count+1:2*nvar_mear_count] ;
                    endif;
                    
                    Curr_Lower_Threshold = Curr_Lower_Threshold ~ (negative_infinity*ones(1,Alternative_all-num_nominal)) ;
                    Curr_Upper_Threshold = Curr_Upper_Threshold ~ (zeros(1,Alternative_all-num_nominal));
                    
                    Curr_Lower_Threshold_d = {};
                    Curr_Upper_Threshold_d = {};
                    
                    Curr_Lower_Threshold_d = Curr_Lower_Threshold_d ~ lower_threshold_matrix_d[i,.] ;
                    Curr_Upper_Threshold_d = Curr_Upper_Threshold_d ~ upper_threshold_matrix_d[i,.] ;
                    
                    if(nvar_mear_grup > 0);
                        Curr_Lower_Threshold_d = Curr_Lower_Threshold_d ~ 0*Category_matrix_lower[i,.] ;
                        Curr_Upper_Threshold_d = Curr_Upper_Threshold_d ~ 0*Category_matrix_upper[i,.] ;
                    endif;
                    
                    if(nvar_mear_count > 0);
                        Curr_Lower_Threshold_d = Curr_Lower_Threshold_d ~ 0*Count_Threshold[i,1:nvar_mear_count] ;
                        Curr_Upper_Threshold_d = Curr_Upper_Threshold_d ~ 0*Count_Threshold[i,nvar_mear_count+1:2*nvar_mear_count] ;
                    endif;
                    
                    Curr_Lower_Threshold_d = Curr_Lower_Threshold_d ~ (zeros(1,Alternative_all-num_nominal)) ;
                    Curr_Upper_Threshold_d = Curr_Upper_Threshold_d ~ (zeros(1,Alternative_all-num_nominal));
                    
                    if(nvar_mear_cont > 0);
                        p1 = pdfmvn(Diff_Mean,Diff_Mean_mu,Error_Y);
                        p1_d = pdfgmean(Diff_Mean,Diff_Mean_mu,Error_Y);
                        
                        if(p1 > upper_limit);
                            p1_dd = (1/p1)*(p1_d' * (Diff_Mean_d-Diff_Mean_mu_d));
                        endif;
                    endif;
                    
                    
                    if(nvar_ogc > 1);
                        p2_dd = 0;
                        for g1(1,nvar_mear_ordl+nvar_mear_grup+nvar_mear_count-1,1);
                            for g2(g1+1,nvar_mear_ordl+nvar_mear_grup+nvar_mear_count,1);
                                
                                pair_ogc_count = pair_ogc_count + 1;
                                
                                rho_low_g1d =  (Curr_Lower_Threshold_d[1,g1] - Mean_changed_d[g1] ) / sqrt(Error_changed[g1,g1]);
                                rho_low_g2d =  (Curr_Lower_Threshold_d[1,g2] - Mean_changed_d[g2] ) / sqrt(Error_changed[g2,g2]);
                                rho_up_g1d =   (Curr_Upper_Threshold_d[1,g1] - Mean_changed_d[g1] ) / sqrt(Error_changed[g1,g1]);
                                rho_up_g2d =   (Curr_Upper_Threshold_d[1,g2] - Mean_changed_d[g2] ) / sqrt(Error_changed[g2,g2]);
                                
                                p2_temp11 = rho_up_g1d | rho_up_g2d | 0;
                                p2_temp22 = rho_up_g1d | rho_low_g2d | 0;
                                p2_temp33 = rho_low_g1d | rho_up_g2d | 0;
                                p2_temp44 = rho_low_g1d | rho_low_g2d | 0;
                                
                                if(Store_ogc[pair_ogc_count,13] > upper_limit);
                                    p2_dd = p2_dd + ( (1/Store_ogc[pair_ogc_count,13])*( (Store_ogc[pair_ogc_count,1:3] * p2_temp11) - (Store_ogc[pair_ogc_count,4:6] * p2_temp22) - (Store_ogc[pair_ogc_count,7:9] * p2_temp33) + (Store_ogc[pair_ogc_count,10:12] * p2_temp44) ) );
                                endif;
                                clear rho_low_g1,rho_low_g2,rho_up_g1,rho_up_g2,var_g1g2,p2_temp,rho_low_g1d,rho_low_g2d,rho_up_g1d,rho_up_g2d,p2_temp1,p2_temp2,p2_temp3,p2_temp4,p2_temp11,p2_temp22,p2_temp33,p2_temp44;
                            endfor;
                        endfor;
                    else;
                        p2_dd = 0 ;
                    endif;
                    
                    
                    p3_dd = 0;
                    for v1(1,nvar_mear_ordl+nvar_mear_grup+nvar_mear_count,1);
                        for g1(1,num_nominal,1);
                            D_VG = zeros(All_Nominal[1,g1],(nvar_mear_ordl+nvar_mear_grup+nvar_mear_count+Alternative_all-num_nominal));
                            D_VG[1,v1] = 1;
                            
                            pair_ogcn_count = pair_ogcn_count + 1;
                            if(g1 == 1);
                                D_VG[2:rows(D_VG),nvar_mear_ordl+nvar_mear_grup+nvar_mear_count+1:nvar_mear_ordl+nvar_mear_grup+nvar_mear_count+All_Nominal[1,g1]-1] = eye(All_Nominal[1,g1]-1);
                            else;
                                D_VG[2:rows(D_VG),nvar_mear_ordl+nvar_mear_grup+nvar_mear_count+M_mat_Track_csum[g1-1,1]+1:nvar_mear_ordl+nvar_mear_grup+nvar_mear_count+M_mat_Track_csum[g1,1]] = eye(All_Nominal[1,g1]-1);
                            endif;
                            
                            rho_low_g3 = D_VG*Curr_Lower_Threshold';
                            rho_up_g3  = D_VG*Curr_Upper_Threshold';
                            
                            rho_low_g3_d = D_VG*Curr_Lower_Threshold_d';
                            rho_up_g3_d  = D_VG*Curr_Upper_Threshold_d';
                            
                            mean_gu    = D_VG*Mean_changed;
                            var_gu     = D_VG*Error_changed*D_VG';
                            
                            mean_gu_d  = D_VG*Mean_changed_d;
                            
                            om  = sqrt(diag(var_gu));
                            mean_low_final = (rho_low_g3 - mean_gu)./om;
                            mean_up_final  = (rho_up_g3 - mean_gu)./om;
                            
                            var_final      = corrvc(var_gu);
                            var_final      = diagrv(var_final,ones(All_Nominal[1,g1],1));
                            
                            mean_low_final_d = (rho_low_g3_d - mean_gu_d)./om;
                            mean_up_final_d  = (rho_up_g3_d - mean_gu_d)./om;
                            
                            if(Store_ogcn[pair_ogcn_count,1] > upper_limit);
                                p3_dd = p3_dd + ( (1/Store_ogcn[pair_ogcn_count,1]) *  (Store_ogcn[pair_ogcn_count,2:rows(mean_up_final_d)+1] * mean_up_final_d)  )  ;
                            endif;
                            
                            clear rho_low_g3,rho_up_g3,mean_gu,var_gu,om,mean_low_final,mean_up_final,var_final,D_VG,mean_gu_d,mean_low_final_d,mean_up_final_d;
                            clear rho_low_g3_d,rho_up_g3_d;
                        endfor;
                    endfor;
                    
                    
                    p4_dd = 0;
                    if(num_nominal > 1);
                        for g1(1,num_nominal-1,1);
                            for g2(g1+1,num_nominal,1);
                                R_GG = zeros(All_Nominal[1,g1]+All_Nominal[1,g2]-2,nvar_mear_ordl+nvar_mear_grup+nvar_mear_count+Alternative_all-num_nominal);
                                
                                pair_nn_count = pair_nn_count + 1;
                                if(g1 == 1);
                                    R_GG[1:M_mat_Track[1,g1],nvar_mear_ordl+nvar_mear_grup+nvar_mear_count+1:nvar_mear_ordl+nvar_mear_grup+nvar_mear_count+All_Nominal[1,g1]-1] = eye(All_Nominal[1,g1]-1);
                                else;
                                    R_GG[1:M_mat_Track[1,g1],nvar_mear_ordl+nvar_mear_grup+nvar_mear_count+M_mat_Track_csum[g1-1,1]+1:nvar_mear_ordl+nvar_mear_grup+nvar_mear_count+M_mat_Track_csum[g1,1]] = eye(All_Nominal[1,g1]-1);
                                endif;
                                
                                R_GG[M_mat_Track[1,g1]+1:rows(R_GG),nvar_mear_ordl+nvar_mear_grup+nvar_mear_count+M_mat_Track_csum[g2-1,1]+1:nvar_mear_ordl+nvar_mear_grup+nvar_mear_count+M_mat_Track_csum[g2,1]] = eye(All_Nominal[1,g2]-1);
                                
                                mean_gu    = -(R_GG*Mean_changed);
                                mean_gu_d  = -(R_GG*Mean_changed_d);
                                
                                var_gu     = R_GG*Error_changed*R_GG';
                                
                                om  = sqrt(diag(var_gu));
                                mean_final = mean_gu./om;
                                
                                var_final      = corrvc(var_gu);
                                var_final      = diagrv(var_final,ones(All_Nominal[1,g1]+All_Nominal[1,g2]-2,1));
                                
                                mean_final_d  = (mean_gu_d)./om;
                                
                                num_element = All_Nominal[1,g1] + All_Nominal[1,g2] - 2	;
                                
                                if(Store_nn[pair_nn_count,1] > upper_limit);
                                    p4_dd = p4_dd + ( (1/Store_nn[pair_nn_count,1]) *  (Store_nn[pair_nn_count,2:num_element+1] * mean_final_d)  )  ;
                                endif;
                                
                                
                                clear R_GG,mean_gu,var_gu,om,mean_final,var_final,mean_final_d;
                            endfor;
                        endfor;
                    endif;
                    
                    gg = p1_dd + p2_dd + p3_dd + p4_dd;
                    gg_temp = gg_temp | gg;
                    
                    clear Lambda_mat,M,B_Tild,Error_Tild,Mean_changed,Error_changed,BU_Tild,Error_YU_Tild,Error_U_Tild,Error_Y,Diff_Mean,BU_Tild_d,Diff_Mean_d,Mean_changed_d,B_Tild_d,gg;
                endfor;
                upper_threshold_gradient = upper_threshold_gradient ~ gg_temp;
                
                clear yd,Utilityd,Count_Threshold_d;
            endif;
        endfor;
    endif;
    ThreadEnd;
    //----------------------------------------Phi Gradient----------------------------------------------------------------
    ThreadBegin;
    if(nvar_mear_count > 0);
        Phi_gradient = {};
        for iphi(1,Total_Phi,1);
            if(_max_active[nvarmC+nvarma+All_nCholerr+num_ordl_cat_req+iphi] == 0);
                Phi_gradient = Phi_gradient ~ zeros(nobs,1);
            else;
                yd =  zeros(nobs,nvar_mear);
                Utilityd = zeros(nobs,Alternative_all);
                
                Phi_d = zeros(Total_Phi,1);
                Phi_d[iphi] = 1;
                
                Phi_K1_d  = zeros(nvar_mear_count,Highest_Phi);
                for i(1,nvar_mear_count,1);
                    if(i==1);
                        Phi_K1_d[i,1:Num_Phi[i]] = (Phi_d[1:num_Phi_csum[i]])';
                    else;
                        Phi_K1_d[i,1:Num_Phi[i]] = (Phi_d[num_Phi_csum[i-1]+1:num_Phi_csum[i]])';
                    endif;
                endfor;
                
                Phi_K1_d = Phi_K1_d .* Phi_coeff_K1 ;
                Phi_d  = (cumsumc(Phi_K1_d'))';
                
                for i(1,nvar_mear_count,1);
                    if(Num_Phi[i] < Highest_Phi);
                        Phi_d[i,Num_Phi[i]+1:Highest_Phi] = zeros(1,Highest_Phi-Num_Phi[i]);
                    endif;
                endfor;
                
                xPhiMat_d = zeros(nvar_mear_count,threshCountMax+1);
                for iCnt (1,nvar_mear_count,1);
                    xPhiMat_d[iCnt,2:1+Num_Phi[iCnt]] = Phi_d[iCnt,1:Num_Phi[iCnt]];
                endfor;
                
                for iCnt (1,nvar_mear_count,1);
                    xPhiMat_d[iCnt,Num_Phi[iCnt]+2:threshCountMax+1] = Phi_d[iCnt,Num_Phi[iCnt]] .*. ones(1,threshCountMax+1-Num_Phi[iCnt]-1);
                endfor;
                
                Count_Threshold_d = zeros(nobs,nvar_mear_count*2);
                for iobs(1,nobs,1);
                    for jcount(1,nvar_mear_count,1);
                        countObs = dta[iobs,Count_Index[jcount]];
                        if(countObs gt 0);
                            phiUpper = (xPhiMat_d[jcount,countObs+1])';
                            phiLower = (xPhiMat_d[jcount,countObs])';
                        else;
                            phiUpper = 0;
                            phiLower = 0;
                        endif;
                        
                        Count_Threshold_d[iobs,jcount] = phiLower;
                        Count_Threshold_d[iobs,nvar_mear_count+jcount] = phiUpper;
                    endfor;
                endfor;
                
                
                gg_temp = {};
                pair_ogc_count = 0;
                pair_ogcn_count = 0;
                pair_nn_count = 0;
                
                for i(1,nobs,1);
                    U_Y = {};
                    U_Yd = {};
                    gg = 0;
                    p1_dd = 0;
                    
                    U_Y   = U_Y | Y[i,.]'| Utility[i,.]';
                    U_Yd   = U_Yd | yd[i,.]'| Utilityd[i,.]';
                    
                    M = zeros(nvar_mear+Alternative_all-num_nominal,nvar_mear+Alternative_all);
                    M[1:nvar_mear,1:nvar_mear] = eye(nvar_mear);
                    
                    Alt_chosen = (dta[i,Altchm])';
                    
                    for j(1,num_nominal,1);
                        iden_matrix = eye(All_Nominal[1,j]-1);
                        one_negative = -1*ones(All_Nominal[1,j]-1,1);
                        if(Alt_chosen[j] eq 1);
                            temp1 = one_negative ~ iden_matrix;
                        elseif(Alt_chosen[j] eq All_Nominal[1,j]);
                            temp1 = iden_matrix ~ one_negative;
                        else;
                            ch = Alt_chosen[j];
                            temp1 = iden_matrix[.,1:ch-1] ~ one_negative ~ iden_matrix[.,ch:All_Nominal[1,j]-1];
                        endif;
                        
                        if(j == 1);
                            M[nvar_mear+1:nvar_mear+All_Nominal[1,j]-1,nvar_mear+1:nvar_mear+All_Nominal[1,j]] = temp1;
                        else;
                            M[nvar_mear+M_mat_Track_csum[j-1,1]+1:nvar_mear+M_mat_Track_csum[j,1],nvar_mear+Nominal_csum[j-1,1]+1:nvar_mear+Nominal_csum[j-1,1]+All_Nominal[1,j]] = temp1;
                        endif;
                        
                        clear temp1;
                    endfor;
                    
                    B_Tild = M * U_Y;
                    B_Tild_d = M * U_Yd;
                    Error_Tild = M * Full_error * M';
                    
                    BU_Tild       = B_Tild[nvar_mear_cont+1:rows(B_Tild)];
                    
                    if(nvar_mear_cont > 0);
                        Error_YU_Tild = Error_Tild[nvar_mear_cont+1:rows(Error_Tild),1:nvar_mear_cont];
                    endif;
                    Error_U_Tild  = Error_Tild[nvar_mear_cont+1:rows(Error_Tild),nvar_mear_cont+1:cols(Error_Tild)];
                    
                    if(nvar_mear_cont > 0);
                        Error_Y       = Error_Tild[1:nvar_mear_cont,1:nvar_mear_cont];
                        Diff_Mean     = (dta[i,Continous_Index])';
                        Diff_Mean_mu  = B_Tild[1:nvar_mear_cont];
                    endif;
                    
                    if(nvar_mear_cont > 0);
                        Mean_changed =  BU_Tild + ( Error_YU_Tild * inv(Error_Y) * (Diff_Mean-Diff_Mean_mu) );
                        Error_changed = Error_U_Tild - ( Error_YU_Tild * inv(Error_Y) *  Error_YU_Tild');
                    else;
                        Mean_changed =  BU_Tild ;
                        Error_changed = Error_U_Tild ;
                    endif;
                    
                    
                    BU_Tild_d        = B_Tild_d[nvar_mear_cont+1:rows(B_Tild_d)];
                    
                    if(nvar_mear_cont > 0);
                        Diff_Mean_d      = zeros(nvar_mear_cont,1);
                        Diff_Mean_mu_d   = B_Tild_d[1:nvar_mear_cont];
                    endif;
                    
                    if(nvar_mear_cont > 0);
                        Mean_changed_d =  BU_Tild_d + ( Error_YU_Tild * inv(Error_Y) * Diff_Mean_d ) - ( Error_YU_Tild * inv(Error_Y) * Diff_Mean_mu_d );
                    else;
                        Mean_changed_d =  BU_Tild_d ;
                    endif;
                    
                    
                    Curr_Lower_Threshold = {};
                    Curr_Upper_Threshold = {};
                    
                    if(nvar_mear_ordl > 0);
                        Curr_Lower_Threshold = Curr_Lower_Threshold ~ lower_threshold_matrix[i,.] ;
                        Curr_Upper_Threshold = Curr_Upper_Threshold ~ upper_threshold_matrix[i,.] ;
                    endif;
                    
                    if(nvar_mear_grup > 0);
                        Curr_Lower_Threshold = Curr_Lower_Threshold ~ Category_matrix_lower[i,.] ;
                        Curr_Upper_Threshold = Curr_Upper_Threshold ~ Category_matrix_upper[i,.] ;
                    endif;
                    
                    Curr_Lower_Threshold = Curr_Lower_Threshold ~ Count_Threshold[i,1:nvar_mear_count] ;
                    Curr_Upper_Threshold = Curr_Upper_Threshold ~ Count_Threshold[i,nvar_mear_count+1:2*nvar_mear_count] ;
                    
                    Curr_Lower_Threshold = Curr_Lower_Threshold ~ (negative_infinity*ones(1,Alternative_all-num_nominal)) ;
                    Curr_Upper_Threshold = Curr_Upper_Threshold ~ (zeros(1,Alternative_all-num_nominal));
                    
                    Curr_Lower_Threshold_d = {};
                    Curr_Upper_Threshold_d = {};
                    
                    if(nvar_mear_ordl > 0);
                        Curr_Lower_Threshold_d = Curr_Lower_Threshold_d ~ 0*lower_threshold_matrix[i,.] ;
                        Curr_Upper_Threshold_d = Curr_Upper_Threshold_d ~ 0*upper_threshold_matrix[i,.] ;
                    endif;
                    
                    if(nvar_mear_grup > 0);
                        Curr_Lower_Threshold_d = Curr_Lower_Threshold_d ~ 0*Category_matrix_lower[i,.] ;
                        Curr_Upper_Threshold_d = Curr_Upper_Threshold_d ~ 0*Category_matrix_upper[i,.] ;
                    endif;
                    
                    Curr_Lower_Threshold_d = Curr_Lower_Threshold_d ~ Count_Threshold_d[i,1:nvar_mear_count] ;
                    Curr_Upper_Threshold_d = Curr_Upper_Threshold_d ~ Count_Threshold_d[i,nvar_mear_count+1:2*nvar_mear_count] ;
                    
                    Curr_Lower_Threshold_d = Curr_Lower_Threshold_d ~ (zeros(1,Alternative_all-num_nominal)) ;
                    Curr_Upper_Threshold_d = Curr_Upper_Threshold_d ~ (zeros(1,Alternative_all-num_nominal));
                    
                    
                    
                    if(nvar_mear_cont > 0);
                        p1 = pdfmvn(Diff_Mean,Diff_Mean_mu,Error_Y);
                        p1_d = pdfgmean(Diff_Mean,Diff_Mean_mu,Error_Y);
                        
                        if(p1 > upper_limit);
                            p1_dd = (1/p1)*(p1_d' * (Diff_Mean_d-Diff_Mean_mu_d));
                        endif;
                    endif;
                    
                    
                    if(nvar_ogc > 1);
                        p2_dd = 0;
                        for g1(1,nvar_mear_ordl+nvar_mear_grup+nvar_mear_count-1,1);
                            for g2(g1+1,nvar_mear_ordl+nvar_mear_grup+nvar_mear_count,1);
                                
                                pair_ogc_count = pair_ogc_count + 1;
                                
                                rho_low_g1d =  (Curr_Lower_Threshold_d[1,g1] - Mean_changed_d[g1] ) / sqrt(Error_changed[g1,g1]);
                                rho_low_g2d =  (Curr_Lower_Threshold_d[1,g2] - Mean_changed_d[g2] ) / sqrt(Error_changed[g2,g2]);
                                rho_up_g1d =   (Curr_Upper_Threshold_d[1,g1] - Mean_changed_d[g1] ) / sqrt(Error_changed[g1,g1]);
                                rho_up_g2d =   (Curr_Upper_Threshold_d[1,g2] - Mean_changed_d[g2] ) / sqrt(Error_changed[g2,g2]);
                                
                                p2_temp11 = rho_up_g1d | rho_up_g2d | 0;
                                p2_temp22 = rho_up_g1d | rho_low_g2d | 0;
                                p2_temp33 = rho_low_g1d | rho_up_g2d | 0;
                                p2_temp44 = rho_low_g1d | rho_low_g2d | 0;
                                
                                if(Store_ogc[pair_ogc_count,13] > upper_limit);
                                    p2_dd = p2_dd + ( (1/Store_ogc[pair_ogc_count,13])*( (Store_ogc[pair_ogc_count,1:3] * p2_temp11) - (Store_ogc[pair_ogc_count,4:6] * p2_temp22) - (Store_ogc[pair_ogc_count,7:9] * p2_temp33) + (Store_ogc[pair_ogc_count,10:12] * p2_temp44) ) );
                                endif;
                                clear rho_low_g1,rho_low_g2,rho_up_g1,rho_up_g2,var_g1g2,p2_temp,rho_low_g1d,rho_low_g2d,rho_up_g1d,rho_up_g2d,p2_temp1,p2_temp2,p2_temp3,p2_temp4,p2_temp11,p2_temp22,p2_temp33,p2_temp44;
                            endfor;
                        endfor;
                    else;
                        p2_dd = 0;
                    endif;
                    
                    p3_dd = 0;
                    for v1(1,nvar_mear_ordl+nvar_mear_grup+nvar_mear_count,1);
                        for g1(1,num_nominal,1);
                            D_VG = zeros(All_Nominal[1,g1],(nvar_mear_ordl+nvar_mear_grup+nvar_mear_count+Alternative_all-num_nominal));
                            D_VG[1,v1] = 1;
                            
                            pair_ogcn_count = pair_ogcn_count + 1;
                            if(g1 == 1);
                                D_VG[2:rows(D_VG),nvar_mear_ordl+nvar_mear_grup+nvar_mear_count+1:nvar_mear_ordl+nvar_mear_grup+nvar_mear_count+All_Nominal[1,g1]-1] = eye(All_Nominal[1,g1]-1);
                            else;
                                D_VG[2:rows(D_VG),nvar_mear_ordl+nvar_mear_grup+nvar_mear_count+M_mat_Track_csum[g1-1,1]+1:nvar_mear_ordl+nvar_mear_grup+nvar_mear_count+M_mat_Track_csum[g1,1]] = eye(All_Nominal[1,g1]-1);
                            endif;
                            
                            rho_low_g3 = D_VG*Curr_Lower_Threshold';
                            rho_up_g3  = D_VG*Curr_Upper_Threshold';
                            
                            rho_low_g3_d = D_VG*Curr_Lower_Threshold_d';
                            rho_up_g3_d  = D_VG*Curr_Upper_Threshold_d';
                            
                            mean_gu    = D_VG*Mean_changed;
                            var_gu     = D_VG*Error_changed*D_VG';
                            
                            mean_gu_d  = D_VG*Mean_changed_d;
                            
                            om  = sqrt(diag(var_gu));
                            mean_low_final = (rho_low_g3 - mean_gu)./om;
                            mean_up_final  = (rho_up_g3 - mean_gu)./om;
                            
                            var_final      = corrvc(var_gu);
                            var_final      = diagrv(var_final,ones(All_Nominal[1,g1],1));
                            
                            mean_low_final_d = (rho_low_g3_d - mean_gu_d)./om;
                            mean_up_final_d  = (rho_up_g3_d - mean_gu_d)./om;
                            
                            if(Store_ogcn[pair_ogcn_count,1] > upper_limit);
                                p3_dd = p3_dd + ( (1/Store_ogcn[pair_ogcn_count,1]) *  (Store_ogcn[pair_ogcn_count,2:rows(mean_up_final_d)+1] * mean_up_final_d)  )  ;
                            endif;
                            
                            clear rho_low_g3,rho_up_g3,mean_gu,var_gu,om,mean_low_final,mean_up_final,var_final,D_VG,mean_gu_d,mean_low_final_d,mean_up_final_d;
                            clear rho_low_g3_d,rho_up_g3_d;
                        endfor;
                    endfor;
                    
                    
                    p4_dd = 0;
                    if(num_nominal > 1);
                        for g1(1,num_nominal-1,1);
                            for g2(g1+1,num_nominal,1);
                                R_GG = zeros(All_Nominal[1,g1]+All_Nominal[1,g2]-2,nvar_mear_ordl+nvar_mear_grup+nvar_mear_count+Alternative_all-num_nominal);
                                
                                pair_nn_count = pair_nn_count + 1;
                                if(g1 == 1);
                                    R_GG[1:M_mat_Track[1,g1],nvar_mear_ordl+nvar_mear_grup+nvar_mear_count+1:nvar_mear_ordl+nvar_mear_grup+nvar_mear_count+All_Nominal[1,g1]-1] = eye(All_Nominal[1,g1]-1);
                                else;
                                    R_GG[1:M_mat_Track[1,g1],nvar_mear_ordl+nvar_mear_grup+nvar_mear_count+M_mat_Track_csum[g1-1,1]+1:nvar_mear_ordl+nvar_mear_grup+nvar_mear_count+M_mat_Track_csum[g1,1]] = eye(All_Nominal[1,g1]-1);
                                endif;
                                
                                R_GG[M_mat_Track[1,g1]+1:rows(R_GG),nvar_mear_ordl+nvar_mear_grup+nvar_mear_count+M_mat_Track_csum[g2-1,1]+1:nvar_mear_ordl+nvar_mear_grup+nvar_mear_count+M_mat_Track_csum[g2,1]] = eye(All_Nominal[1,g2]-1);
                                
                                mean_gu    = -(R_GG*Mean_changed);
                                mean_gu_d  = -(R_GG*Mean_changed_d);
                                
                                var_gu     = R_GG*Error_changed*R_GG';
                                
                                om  = sqrt(diag(var_gu));
                                mean_final = mean_gu./om;
                                
                                var_final      = corrvc(var_gu);
                                var_final      = diagrv(var_final,ones(All_Nominal[1,g1]+All_Nominal[1,g2]-2,1));
                                
                                mean_final_d  = (mean_gu_d)./om;
                                
                                num_element = All_Nominal[1,g1] + All_Nominal[1,g2] - 2	;
                                
                                if(Store_nn[pair_nn_count,1] > upper_limit);
                                    p4_dd = p4_dd + ( (1/Store_nn[pair_nn_count,1]) *  (Store_nn[pair_nn_count,2:num_element+1] * mean_final_d)  )  ;
                                endif;
                                
                                clear R_GG,mean_gu,var_gu,om,mean_final,var_final,mean_final_d;
                            endfor;
                        endfor;
                    endif;
                    
                    gg = p1_dd + p2_dd + p3_dd + p4_dd;
                    gg_temp = gg_temp | gg;
                    
                    clear Lambda_mat,M,B_Tild,Error_Tild,Mean_changed,Error_changed,BU_Tild,Error_YU_Tild,Error_U_Tild,Error_Y,Diff_Mean,BU_Tild_d,Diff_Mean_d,Mean_changed_d,B_Tild_d,gg;
                endfor;
                Phi_gradient = Phi_gradient ~ gg_temp;
                
                clear yd,Utilityd,Count_Threshold_d;
            endif;
        endfor;
    endif;
    ThreadEnd;
    ThreadJoin;
    //-----------------------------------------------------------------------------------------------------------------
    
    gradient = {};
    gradient = gradient ~ delta_gradient ~ Beta_gradient ~ Lamda_gradient ;
    
    if(nvar_mear_ordl > 0);
        gradient = gradient ~ upper_threshold_gradient;
    endif;
    
    if(nvar_mear_count > 0);
        gradient = gradient ~ Phi_gradient ;
    endif;
    
    Gradient_Store = gradient;
    retp(gradient);
endp;

//----------------------------------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
proc lpr1(parm,dta);
    local LL1,LL2,LL3,LL4,LL5,LL;
    local Store_ogc1,Store_ogc2,Store_ogc3,Store_ogc4,Store_ogc5;
    local Store_ogcn1,Store_ogcn2,Store_ogcn3,Store_ogcn4,Store_ogcn5;
    local Store_nn1,Store_nn2,Store_nn3,Store_nn4,Store_nn5;
    local Store_seed1,Store_seed2,Store_seed3,Store_seed4,Store_seed5;
    local lower_threshold_matrix1,lower_threshold_matrix2,lower_threshold_matrix3,lower_threshold_matrix4,lower_threshold_matrix5;
    local upper_threshold_matrix1,upper_threshold_matrix2,upper_threshold_matrix3,upper_threshold_matrix4,upper_threshold_matrix5;
    local Category_matrix_lower1,Category_matrix_lower2,Category_matrix_lower3,Category_matrix_lower4,Category_matrix_lower5;
    local Category_matrix_upper1,Category_matrix_upper2,Category_matrix_upper3,Category_matrix_upper4,Category_matrix_upper5;
    local Utility1,Utility2,Utility3,Utility4,Utility5;
    local Count_Threshold1,Count_Threshold2,Count_Threshold3,Count_Threshold4,Count_Threshold5;
    local Lambda_count1,Lambda_count2,Lambda_count3,Lambda_count4,Lambda_count5;
    local termt1,termt2,termt3,termt4,termt5;
    
    ThreadBegin;
    { LL1,Store_ogc1,Store_ogcn1,Store_nn1,Store_Seed1,lower_threshold_matrix1,upper_threshold_matrix1,Category_matrix_lower1,Category_matrix_upper1,Utility1,Count_Threshold1,Lambda_count1,termt1 } = lprT1(parm,dta,Data_Split[1,1],Data_Split[1,2]);
    ThreadEnd;
    
    ThreadBegin;
    { LL2,Store_ogc2,Store_ogcn2,Store_nn2,Store_Seed2,lower_threshold_matrix2,upper_threshold_matrix2,Category_matrix_lower2,Category_matrix_upper2,Utility2,Count_Threshold2,Lambda_count2,termt2 } = lprT1(parm,dta,Data_Split[2,1],Data_Split[2,2]);
    ThreadEnd;
    
    
    ThreadBegin;
    { LL3,Store_ogc3,Store_ogcn3,Store_nn3,Store_Seed3,lower_threshold_matrix3,upper_threshold_matrix3,Category_matrix_lower3,Category_matrix_upper3,Utility3,Count_Threshold3,Lambda_count3,termt3 } = lprT1(parm,dta,Data_Split[3,1],Data_Split[3,2]);
    ThreadEnd;
    
    ThreadBegin;
    { LL4,Store_ogc4,Store_ogcn4,Store_nn4,Store_Seed4,lower_threshold_matrix4,upper_threshold_matrix4,Category_matrix_lower4,Category_matrix_upper4,Utility4,Count_Threshold4,Lambda_count4,termt4 } = lprT1(parm,dta,Data_Split[4,1],Data_Split[4,2]);
    ThreadEnd;
    
    ThreadBegin;
    { LL5,Store_ogc5,Store_ogcn5,Store_nn5,Store_Seed5,lower_threshold_matrix5,upper_threshold_matrix5,Category_matrix_lower5,Category_matrix_upper5,Utility5,Count_Threshold5,Lambda_count5,termt5 } = lprT1(parm,dta,Data_Split[5,1],Data_Split[5,2]);
    ThreadEnd;
    ThreadJoin;
    
    LL = {};
    Store_ogc = {};
    Store_ogcn = {};
    Store_nn = {};
    Store_Seed = {};
    lower_threshold_matrix = {} ;
    upper_threshold_matrix = {} ;
    Category_matrix_lower  = {} ;
    Category_matrix_upper  = {} ;
    Utility                = {} ;
    Count_Threshold        = {} ;
    Lambda_count           = {} ;
    term1                  = {} ;
    
    LL = LL | LL1 | LL2 | LL3 | LL4 | LL5;
    Store_ogc  = Store_ogc  | Store_ogc1  | Store_ogc2  | Store_ogc3  | Store_ogc4  | Store_ogc5 ;
    Store_ogcn = Store_ogcn | Store_ogcn1 | Store_ogcn2 | Store_ogcn3 | Store_ogcn4 | Store_ogcn5 ;
    Store_nn   = Store_nn   | Store_nn1   | Store_nn2   | Store_nn3   | Store_nn4   | Store_nn5 ;
    Store_Seed = Store_Seed | Store_seed1 | Store_seed2 | Store_seed3 | Store_seed4 | Store_seed5 ;
    
    lower_threshold_matrix = lower_threshold_matrix | lower_threshold_matrix1 | lower_threshold_matrix2 | lower_threshold_matrix3 | lower_threshold_matrix4 | lower_threshold_matrix5 ;
    upper_threshold_matrix = upper_threshold_matrix | upper_threshold_matrix1 | upper_threshold_matrix2 | upper_threshold_matrix3 | upper_threshold_matrix4 | upper_threshold_matrix5 ;
    Category_matrix_lower  = Category_matrix_lower  | Category_matrix_lower1  | Category_matrix_lower2  | Category_matrix_lower3  | Category_matrix_lower4  | Category_matrix_lower5  ;
    Category_matrix_upper  = Category_matrix_upper  | Category_matrix_upper1  | Category_matrix_upper2  | Category_matrix_upper3  | Category_matrix_upper4  | Category_matrix_upper5  ;
    
    Utility = Utility | Utility1 | Utility2 | Utility3 | Utility4 | Utility5 ;
    
    Count_Threshold = Count_Threshold | Count_Threshold1 | Count_Threshold2 | Count_Threshold3 | Count_Threshold4 | Count_Threshold5 ;
    
    Lambda_count  = Lambda_count | Lambda_count1 | Lambda_count2 | Lambda_count3 | Lambda_count4 | Lambda_count5 ;
    term1         = term1        | termt1        | termt2        | termt3        | termt4        | termt5 ;
    
    clear LL1,LL2,LL3,LL4,LL5;
    clear Store_ogc1,Store_ogc2,Store_ogc3,Store_ogc4,Store_ogc5;
    clear Store_ogcn1,Store_ogcn2,Store_ogcn3,Store_ogcn4,Store_ogcn5;
    clear Store_nn1,Store_nn2,Store_nn3,Store_nn4,Store_nn5;
    clear Store_seed1,Store_seed2,Store_seed3,Store_seed4,Store_seed5;
    clear lower_threshold_matrix1,lower_threshold_matrix2,lower_threshold_matrix3,lower_threshold_matrix4,lower_threshold_matrix5;
    clear upper_threshold_matrix1,upper_threshold_matrix2,upper_threshold_matrix3,upper_threshold_matrix4,upper_threshold_matrix5;
    clear Category_matrix_lower1,Category_matrix_lower2,Category_matrix_lower3,Category_matrix_lower4,Category_matrix_lower5;
    clear Category_matrix_upper1,Category_matrix_upper2,Category_matrix_upper3,Category_matrix_upper4,Category_matrix_upper5;
    clear Utility1,Utility2,Utility3,Utility4,Utility5;
    clear Count_Threshold1,Count_Threshold2,Count_Threshold3,Count_Threshold4,Count_Threshold5;
    clear Lambda_count1,Lambda_count2,Lambda_count3,Lambda_count4,Lambda_count5;
    clear termt1,termt2,termt3,termt4,termt5;
    
    retp (LL);
endp;
//----------------------------------------------------------------------------------------------------------------------------------------
proc(13)=lprT1(parm,dta,st_iter,end_iter);
    
    local Alpha_coeff,Chol_Alpha_corr,delta_coeff,d_matrix_coeff,Chol_Psi_matrix,Beta_coeff,Lambda_coeff,Chol_Lamda1,Chol_Lamda2,Theta_coeff,Phi_coeff,upper_threshold,lower_threshold;
    local Chol_Alpha_corr_adjusted,row_all,row_all_sq,denom,i,j,Alpha_corr,Lambda_mat,Psi_matrix,Psi_matrix_big,Lamda1,Lamda2,Lamda,AlphaW,z,y1,Gamma_X,y2,Y,y2_temp;
    local Xbeta,Xbeta1,Xbeta2,v11,v12,v1,countObs,smallCObs,term2,threshUpper,threshLower,phiUpper;
    local phiLower,iden_matrix1,iden_matrix2,one_negative1,one_negative2,seednext,Likelihood,U_Y,LL,Full_error,e1,e12,e21,e22,M,Alt_chosen1,Alt_chosen2,temp1,temp2,ch;
    local B_Tild,Error_Tild,BU_Tild,Error_YU_Tild,Error_U_Tild,Error_Y,Diff_Mean,Diff_Mean_mu,Mean_changed,Error_changed,Curr_Lower_Threshold,Curr_Upper_Threshold,p1,p2,p3,p4;
    local pair_GG,g1,g2,rho_low_g1,rho_low_g2,rho_up_g1,rho_up_g2,var_g1g2,p2_temp,D_VG,rho_low_g3,rho_up_g3,mean_gu,var_gu,om,mean_low_final,mean_up_final,var_final,p3_1_uo,ss_up;
    local R_GG,mean_final,p4_temp,sss,Chol_Alpha_corr_adjusted1,temp,seed20,p3_1_up,Temp_negative,p3_1_low,ss_low,upper_threshold_K,upper_threshold_decider,Chol_Lamda;
    local Lamda_chol,temp_num1,temp_num2,curr_ele,curr_mat,Beta_coeff_expand,Alt_chosen,iden_matrix,one_negative,row_add;
    local pair_ogc_count,pair_ogcn_count,pair_nn_count,p2_temp1,p2_temp2,p2_temp3,p2_temp4,g3_1_up,g4_temp,p4_tempd,count;
    local phi_All,phi_mat,temp_arr,Gamma_phi,ZGP,temp_store,part1,mean_gu_final,var_gu_final,p4_1,g4_1,ss,curr_pair,threshCountMax;
    local upper_threshold_K1,Phi_coeff1,Phi_coeff_K1,Chol_Lamda_adjusted,Chol_Lamda_adjusted1,row_num,Count_Threshold_temp,curr_obs;
    local num_obs,Store_ogc_temp,Store_ogcn_temp,Store_nn_temp,Store_Seed_temp,ord_count,Utilitym,Lambda_count_temp,term1_temp;
    local lower_threshold_matrix_temp,upper_threshold_matrix_temp,Category_matrix_lower_temp,Category_matrix_upper_temp,xPhiMat;
    
    delta_coeff         = parm[1:nvarmC];
    Beta_coeff          = parm[nvarmC+1:nvarmC+nvarma];
    Chol_Lamda          = xpnd(parm[nvarmC+nvarma+1:nvarmC+nvarma+All_nCholerr]);
    
    
    if(nvar_mear_ordl > 0);
        upper_threshold_K    =  parm[nvarmC+nvarma+All_nCholerr+1:nvarmC+nvarma+All_nCholerr+num_ordl_cat_req];
        upper_threshold_K1   =  zeros(nvar_mear_ordl,Highest_scale);
        for i(1,nvar_mear_ordl,1);
            if(i==1);
                upper_threshold_K1[i,1:num_ordl_cat_req1[i]] = (upper_threshold_K[1:num_ordl_cat_req_csum[i]])';
            else;
                upper_threshold_K1[i,1:num_ordl_cat_req1[i]] = (upper_threshold_K[num_ordl_cat_req_csum[i-1]+1:num_ordl_cat_req_csum[i]])';
            endif;
        endfor;
        
        upper_threshold      =  upper_threshold_K1 ;
        for i(1,nvar_mear_ordl,1);
            if(num_ordl_cat_req1[i] < Highest_scale);
                upper_threshold[i,num_ordl_cat_req1[i]+1:Highest_scale] = positive_infinity*ones(1,Highest_scale-num_ordl_cat_req1[i]);
            endif;
        endfor;
        upper_threshold_decider = negative_infinity*ones(nvar_mear_ordl,1) ~ zeros(nvar_mear_ordl,1) ~ upper_threshold ~ positive_infinity*ones(nvar_mear_ordl,1);
    endif;
    
    if(nvar_mear_count > 0);
        Phi_coeff1      = parm[nvarmC+nvarma+All_nCholerr+num_ordl_cat_req+1:nvarmC+nvarma+All_nCholerr+num_ordl_cat_req+Total_Phi];
        Phi_coeff_K1    = zeros(nvar_mear_count,Highest_Phi);
        for i(1,nvar_mear_count,1);
            if(i==1);
                Phi_coeff_K1[i,1:Num_Phi[i]] = (Phi_coeff1[1:num_Phi_csum[i]])';
            else;
                Phi_coeff_K1[i,1:Num_Phi[i]] = (Phi_coeff1[num_Phi_csum[i-1]+1:num_Phi_csum[i]])';
            endif;
        endfor;
        
        Phi_coeff      =  Phi_coeff_K1 ;
        for i(1,nvar_mear_count,1);
            if(Num_Phi[i] < Highest_Phi);
                Phi_coeff[i,Num_Phi[i]+1:Highest_Phi] = zeros(1,Highest_Phi-Num_Phi[i]);
            endif;
        endfor;
    endif;
    
    Lamda      = Chol_Lamda;
    Full_error = D_matrix*Lamda*D_matrix';
    
    seednext     = Store_Seed[st_iter,1];
    num_obs      = end_iter - st_iter + 1;
    
    if(nvar_ogc > 1);
        Store_ogc_temp  = zeros(num_obs*Com_ogc_r,13);
    endif;
    
    if(nvar_ogc > 0);
        Store_ogcn_temp = zeros(num_obs*Com_ogcn_r,Com_ogcn_c);
    endif;
    
    if(num_nominal > 1);
        Store_nn_temp   = zeros(num_obs*Com_nn_r,Com_nn_c);
    endif;
    
    Store_Seed_temp = zeros(num_obs,(Com_ogcn_r+Com_nn_r));
    
    Gamma_X = (ones(nvar_mear,1) .*. delta_coeff  )*~(dta[st_iter:end_iter,ivgenvC])';
    y2 = {};
    j = 1;
    
    do until j > nvar_mear;
        y2 = y2~(sumc(Gamma_X[(j-1)*nvarmC+1:(j*nvarmC),.]));           // Y stores the Y variables value for each observation. nobs X nvar_mear. 1st col has Y1, 2nd Y2 and so on for all observations.
        j = j+1;
    endo;
    
    if(nvar_mear_count > 0);
        y2_temp = {};
        y2_temp = y2_temp ~ y2[.,1:(nvar_mear_cont+nvar_mear_ordl+nvar_mear_grup)] ~ zeros(num_obs,nvar_mear_count);
        Y       = y2_temp;
        clear y2_temp;
    else;
        Y = y2;
    endif;
    
    if(nvar_mear_ordl > 0);
        lower_threshold_matrix_temp = zeros(num_obs,nvar_mear_ordl);
        upper_threshold_matrix_temp = zeros(num_obs,nvar_mear_ordl);
        ord_count = 0;
        for i(st_iter,end_iter,1);
            for j(1,nvar_mear_ordl,1);
                for k(1,num_ordl_cat[j],1);
                    if(dta[i,Ordinal_Index[j]] == k);
                        ord_count = ord_count + 1;
                        lower_threshold_matrix_temp[ord_count,j] = upper_threshold_decider[j,k];
                        upper_threshold_matrix_temp[ord_count,j] = upper_threshold_decider[j,k+1];
                    endif;
                endfor;
            endfor;
        endfor;
    endif;
    
    if(nvar_mear_grup > 0);
        Category_matrix_lower_temp = zeros(num_obs,nvar_mear_grup);
        Category_matrix_upper_temp = zeros(num_obs,nvar_mear_grup);
        ord_count = 0;
        for i(st_iter,end_iter,1);
            for j(1,nvar_mear_grup,1);
                for k(1,Num_group[j],1);
                    if(dta[i,Group_Index[j]] == k);
                        ord_count = ord_count + 1;
                        Category_matrix_upper_temp[ord_count,j] = Group_Threshold[j,k+1];
                        Category_matrix_lower_temp[ord_count,j] = Group_Threshold[j,k];
                    endif;
                endfor;
            endfor;
        endfor;
    endif;
    
    Beta_coeff_expand = {};
    for i(1,num_nominal,1);
        if(i == 1);
            Beta_coeff_expand = Beta_coeff_expand | (ones(All_Nominal[1,i],1) .*. Beta_coeff[1:nvarma_csum[i]]);
        else;
            Beta_coeff_expand = Beta_coeff_expand | (ones(All_Nominal[1,i],1) .*. Beta_coeff[nvarma_csum[i-1]+1:nvarma_csum[i]]);
        endif;
    endfor;
    
    
    Xbeta = (Beta_coeff_expand)*~(dta[st_iter:end_iter,ivgenva])';
    
    Utilitym = {};
    for i(1,num_nominal,1);
        j = 1;
        
        if(i == 1);
            row_add = 0;
        else;
            row_add = sumr(All_Nominal[1,1:i-1] .* nvarma_all[1,1:i-1]);
        endif;
        
        do until j > All_Nominal[1,i];
            Utilitym = Utilitym~(sumc(Xbeta[row_add+(j-1)*nvarma_all[1,i]+1:row_add+(j*nvarma_all[1,i]),.]));
            j = j+1;
        endo;
    endfor;
    
    ord_count = 0;
    for i(st_iter,end_iter,1);
        for j(1,Alternative_all,1);
            if(dta[i,Avalability[j]] == 0);
                ord_count = ord_count + 1;
                Utilitym[ord_count,j] = Negative_Infinity;
            endif;
        endfor;
    endfor;
    
    
    if(nvar_mear_count > 0);
        Lambda_count_temp = exp(y2[.,nvar_mear_cont+nvar_mear_ordl+nvar_mear_grup+1:nvar_mear_cont+nvar_mear_ordl+nvar_mear_grup+nvar_mear_count]) ;
        
        term1_temp = exp(-Lambda_count_temp);
        
        threshCountMax = threshCountMax_Global;
        xPhiMat = zeros(nvar_mear_count,threshCountMax+1);
        
        for iCnt (1,nvar_mear_count,1);
            xPhiMat[iCnt,2:1+Num_Phi[iCnt]] = (Phi_coeff[iCnt,1:Num_Phi[iCnt]]);
        endfor;
        
        for iCnt (1,nvar_mear_count,1);
            xPhiMat[iCnt,Num_Phi[iCnt]+2:threshCountMax+1] = ones(1,(threshCountMax+1-Num_Phi[iCnt]-1)) .*. Phi_coeff[iCnt,Num_Phi[iCnt]];
        endfor;
        
        Count_Threshold_temp = zeros(num_obs,nvar_mear_count*2);
        ord_count = 0;
        for iobs(st_iter,end_iter,1);
            for jcount(1,nvar_mear_count,1);
                ord_count = ord_count + 1;
                countObs = dta[iobs,Count_Index[jcount]];
                term2 = 0;
                
                for icnt (0,countObs,1);
                    term2 = term2 + ( (Lambda_count_temp[ord_count,jcount]^iCnt)/(iCnt!) ) ;
                endfor;
                
                threshUpper = term1_temp[ord_count,jcount] * term2;
                
                if(countObs gt 0);
                    term2 = term2 - ( (Lambda_count_temp[ord_count,jcount]^countObs)/(countObs!) ) ;
                    threshLower = term1_temp[ord_count,jcount] * term2;
                    phiUpper = (xPhiMat[jcount,countObs+1])';
                    phiLower = (xPhiMat[jcount,countObs])';
                    
                else;
                    threshLower = 0;
                    phiUpper = 0;
                    phiLower = 0;
                endif;
                
                threshUpper = minc( threshUpper|0.99999999999999999);
                threshLower = minc( threshLower|0.99999999999999999);
                
                threshUpper = cdfni(threshUpper) + phiUpper;
                threshLower = cdfni(threshLower) + phiLower;
                
                Count_Threshold_temp[ord_count,jcount] = threshLower;
                Count_Threshold_temp[ord_count,nvar_mear_count+jcount] = threshUpper;
            endfor;
        endfor;
    endif;
    
    pair_ogc_count = 0;
    pair_ogcn_count = 0;
    pair_nn_count = 0;
    curr_obs = 0;
    Likelihood = {};
    
    for i(st_iter,end_iter,1);
        U_Y = {};
        LL = 0;
        p1=1;
        curr_obs = curr_obs + 1;
        curr_pair = 0;
        
        U_Y   = U_Y | Y[curr_obs,.]'| Utilitym[curr_obs,.]';
        
        M = zeros(nvar_mear+Alternative_all-num_nominal,nvar_mear+Alternative_all);
        M[1:nvar_mear,1:nvar_mear] = eye(nvar_mear);
        
        Alt_chosen = (dta[i,Altchm])';
        
        for j(1,num_nominal,1);
            iden_matrix = eye(All_Nominal[1,j]-1);
            one_negative = -1*ones(All_Nominal[1,j]-1,1);
            if(Alt_chosen[j] eq 1);
                temp1 = one_negative ~ iden_matrix;
            elseif(Alt_chosen[j] eq All_Nominal[1,j]);
                temp1 = iden_matrix ~ one_negative;
            else;
                ch = Alt_chosen[j];
                temp1 = iden_matrix[.,1:ch-1] ~ one_negative ~ iden_matrix[.,ch:All_Nominal[1,j]-1];
            endif;
            
            if(j == 1);
                M[nvar_mear+1:nvar_mear+All_Nominal[1,j]-1,nvar_mear+1:nvar_mear+All_Nominal[1,j]] = temp1;
            else;
                M[nvar_mear+M_mat_Track_csum[j-1,1]+1:nvar_mear+M_mat_Track_csum[j,1],nvar_mear+Nominal_csum[j-1,1]+1:nvar_mear+Nominal_csum[j-1,1]+All_Nominal[1,j]] = temp1;
            endif;
            
            clear temp1;
        endfor;
        
        
        B_Tild = M * U_Y;
        Error_Tild = M * Full_error * M';
        
        BU_Tild       = B_Tild[nvar_mear_cont+1:rows(B_Tild)];
        if(nvar_mear_cont > 0);
            Error_YU_Tild = Error_Tild[nvar_mear_cont+1:rows(Error_Tild),1:nvar_mear_cont];
        endif;
        
        Error_U_Tild  = Error_Tild[nvar_mear_cont+1:rows(Error_Tild),nvar_mear_cont+1:cols(Error_Tild)];
        
        if(nvar_mear_cont > 0);
            Error_Y       = Error_Tild[1:nvar_mear_cont,1:nvar_mear_cont];
            Diff_Mean     = (dta[i,Continous_Index])';
            Diff_Mean_mu  = B_Tild[1:nvar_mear_cont];
        endif;
        
        
        if(nvar_mear_cont > 0);
            Mean_changed =  BU_Tild + ( Error_YU_Tild * inv(Error_Y) * (Diff_Mean-Diff_Mean_mu) );
            Error_changed = Error_U_Tild - ( Error_YU_Tild * inv(Error_Y) *  Error_YU_Tild');
        else;
            Mean_changed =  BU_Tild ;
            Error_changed = Error_U_Tild ;
        endif;
        
        if(nvar_mear_cont > 0);
            p1 = pdfmvn(Diff_Mean,Diff_Mean_mu,Error_Y);
            if(p1 <= upper_limit);
                p1 = (p1-((p1<=upper_limit)*(p1-upper_limit)));
            endif;
        endif;
        
        Curr_Lower_Threshold = {};
        Curr_Upper_Threshold = {};
        
        
        if(nvar_mear_ordl > 0);
            Curr_Lower_Threshold = Curr_Lower_Threshold ~ lower_threshold_matrix_temp[curr_obs,.] ;
            Curr_Upper_Threshold = Curr_Upper_Threshold ~ upper_threshold_matrix_temp[curr_obs,.] ;
        endif;
        
        if(nvar_mear_grup > 0);
            Curr_Lower_Threshold = Curr_Lower_Threshold ~ Category_matrix_lower_temp[curr_obs,.] ;
            Curr_Upper_Threshold = Curr_Upper_Threshold ~ Category_matrix_upper_temp[curr_obs,.] ;
        endif;
        
        if(nvar_mear_count > 0);
            Curr_Lower_Threshold = Curr_Lower_Threshold ~ Count_Threshold_temp[curr_obs,1:nvar_mear_count] ;
            Curr_Upper_Threshold = Curr_Upper_Threshold ~ Count_Threshold_temp[curr_obs,nvar_mear_count+1:2*nvar_mear_count] ;
        endif;
        
        Curr_Lower_Threshold = Curr_Lower_Threshold ~ (negative_infinity*ones(1,Alternative_all-num_nominal)) ;
        Curr_Upper_Threshold = Curr_Upper_Threshold ~ (zeros(1,Alternative_all-num_nominal));
        
        if(nvar_ogc > 1);
            p2 = 1;
            for g1(1,nvar_mear_ordl+nvar_mear_grup+nvar_mear_count-1,1);
                for g2(g1+1,nvar_mear_ordl+nvar_mear_grup+nvar_mear_count,1);
                    
                    pair_ogc_count = pair_ogc_count + 1;
                    rho_low_g1  =  (Curr_Lower_Threshold[1,g1] - Mean_changed[g1] ) / sqrt(Error_changed[g1,g1]);
                    rho_low_g2  =  (Curr_Lower_Threshold[1,g2] - Mean_changed[g2] ) / sqrt(Error_changed[g2,g2]);
                    rho_up_g1   =  (Curr_Upper_Threshold[1,g1] - Mean_changed[g1] ) / sqrt(Error_changed[g1,g1]);
                    rho_up_g2   =  (Curr_Upper_Threshold[1,g2] - Mean_changed[g2] ) / sqrt(Error_changed[g2,g2]);
                    var_g1g2    =  Error_changed[g1,g2] / ( sqrt(Error_changed[g1,g1]) * sqrt(Error_changed[g2,g2]) );
                    
                    
                    p2_temp = cdfbvn(rho_up_g1,rho_up_g2,var_g1g2) - cdfbvn(rho_up_g1,rho_low_g2,var_g1g2) - cdfbvn(rho_low_g1,rho_up_g2,var_g1g2) + cdfbvn(rho_low_g1,rho_low_g2,var_g1g2);
                    
                    p2_temp1 = cdfbvn_grad(rho_up_g1,rho_up_g2,var_g1g2);
                    p2_temp2 = cdfbvn_grad(rho_up_g1,rho_low_g2,var_g1g2);
                    p2_temp3 = cdfbvn_grad(rho_low_g1,rho_up_g2,var_g1g2);
                    p2_temp4 = cdfbvn_grad(rho_low_g1,rho_low_g2,var_g1g2);
                    
                    Store_ogc_temp[pair_ogc_count,1:3] = p2_temp1';
                    Store_ogc_temp[pair_ogc_count,4:6] = p2_temp2';
                    Store_ogc_temp[pair_ogc_count,7:9] = p2_temp3';
                    Store_ogc_temp[pair_ogc_count,10:12] = p2_temp4';
                    Store_ogc_temp[pair_ogc_count,13] = p2_temp;
                    
                    if(p2_temp > upper_limit);
                        p2 = p2*p2_temp;
                    else;
                        p2 = p2* (p2_temp-((p2_temp<=upper_limit)*(p2_temp-upper_limit)));
                    endif;
                    clear rho_low_g1,rho_low_g2,rho_up_g1,rho_up_g2,var_g1g2,p2_temp,p2_temp1,p2_temp2,p2_temp3,p2_temp4;
                endfor;
            endfor;
        else;
            p2 = 1;
        endif;
        
        if(nvar_ogc > 0);
            p3 = 1;
            for v1(1,nvar_mear_ordl+nvar_mear_grup+nvar_mear_count,1);
                for g1(1,num_nominal,1);
                    
                    pair_ogcn_count = pair_ogcn_count + 1;
                    D_VG = zeros(All_Nominal[1,g1],(nvar_mear_ordl+nvar_mear_grup+nvar_mear_count+Alternative_all-num_nominal));
                    D_VG[1,v1] = 1;
                    
                    if(g1 == 1);
                        D_VG[2:rows(D_VG),nvar_mear_ordl+nvar_mear_grup+nvar_mear_count+1:nvar_mear_ordl+nvar_mear_grup+nvar_mear_count+All_Nominal[1,g1]-1] = eye(All_Nominal[1,g1]-1);
                    else;
                        D_VG[2:rows(D_VG),nvar_mear_ordl+nvar_mear_grup+nvar_mear_count+M_mat_Track_csum[g1-1,1]+1:nvar_mear_ordl+nvar_mear_grup+nvar_mear_count+M_mat_Track_csum[g1,1]] = eye(All_Nominal[1,g1]-1);
                    endif;
                    
                    rho_low_g3 = D_VG*Curr_Lower_Threshold';
                    rho_up_g3  = D_VG*Curr_Upper_Threshold';
                    
                    mean_gu    = D_VG*Mean_changed;
                    var_gu     = D_VG*Error_changed*D_VG';
                    
                    om  = sqrt(diag(var_gu));
                    mean_low_final = (rho_low_g3 - mean_gu)./om;
                    mean_up_final  = (rho_up_g3 - mean_gu)./om;
                    
                    var_final      = corrvc(var_gu);
                    var_final      = diagrv(var_final,ones(All_Nominal[1,g1],1));
                    
                    if(All_Nominal[1,g1]> 2);
                        curr_pair  = curr_pair  + 1;
                        seed20 = seednext;
                        Store_Seed_temp[curr_obs,curr_pair] = seed20;
                        {p3_1_up,g3_1_up,ss_up} = pdfmvnac(mean_up_final',var_final,Store_Seed[i,curr_pair]);
                        seednext = ss_up;
                        Store_ogcn_temp[pair_ogcn_count,1] = p3_1_up;
                        Store_ogcn_temp[pair_ogcn_count,2:cols(g3_1_up)+1] = g3_1_up;
                    else;
                        curr_pair  = curr_pair  + 1;
                        seed20 = seednext;
                        Store_Seed_temp[curr_obs,curr_pair] = seed20;
                        seednext = seed20;
                        p3_1_up  = cdfbvn(mean_up_final[1,1],mean_up_final[2,1],var_final[1,2]);
                        g3_1_up  = cdfbvn_grad(mean_up_final[1,1],mean_up_final[2,1],var_final[1,2]);
                        Store_ogcn_temp[pair_ogcn_count,1] = p3_1_up;
                        Store_ogcn_temp[pair_ogcn_count,2:rows(g3_1_up)+1] = g3_1_up';
                    endif;
                    
                    if(p3_1_up > upper_limit);
                        p3 = p3*p3_1_up;
                    else;
                        p3= p3* (p3_1_up-((p3_1_up<=upper_limit)*(p3_1_up-upper_limit)));
                    endif;
                    
                    clear rho_low_g3,rho_up_g3,mean_gu,var_gu,om,mean_low_final,mean_up_final,var_final,D_VG,g3_1_up,p3_1_up;
                endfor;
            endfor;
        else;
            p3 = 1;
        endif;
        
        
        p4 = 1;
        
        if(num_nominal > 1);
            for g1(1,num_nominal-1,1);
                for g2(g1+1,num_nominal,1);
                    R_GG = zeros(All_Nominal[1,g1]+All_Nominal[1,g2]-2,nvar_mear_ordl+nvar_mear_grup+nvar_mear_count+Alternative_all-num_nominal);
                    
                    pair_nn_count = pair_nn_count + 1;
                    if(g1 == 1);
                        R_GG[1:M_mat_Track[1,g1],nvar_mear_ordl+nvar_mear_grup+nvar_mear_count+1:nvar_mear_ordl+nvar_mear_grup+nvar_mear_count+All_Nominal[1,g1]-1] = eye(All_Nominal[1,g1]-1);
                    else;
                        R_GG[1:M_mat_Track[1,g1],nvar_mear_ordl+nvar_mear_grup+nvar_mear_count+M_mat_Track_csum[g1-1,1]+1:nvar_mear_ordl+nvar_mear_grup+nvar_mear_count+M_mat_Track_csum[g1,1]] = eye(All_Nominal[1,g1]-1);
                    endif;
                    
                    R_GG[M_mat_Track[1,g1]+1:rows(R_GG),nvar_mear_ordl+nvar_mear_grup+nvar_mear_count+M_mat_Track_csum[g2-1,1]+1:nvar_mear_ordl+nvar_mear_grup+nvar_mear_count+M_mat_Track_csum[g2,1]] = eye(All_Nominal[1,g2]-1);
                    
                    mean_gu    = -(R_GG*Mean_changed);
                    var_gu     = R_GG*Error_changed*R_GG';
                    
                    om  = sqrt(diag(var_gu));
                    mean_final = mean_gu./om;
                    
                    var_final      = corrvc(var_gu);
                    var_final      = diagrv(var_final,ones(All_Nominal[1,g1]+All_Nominal[1,g2]-2,1));
                    
                    if((All_Nominal[1,g1]+All_Nominal[1,g2]-2) > 2);
                        curr_pair  = curr_pair  + 1;
                        seed20 = seednext;
                        Store_Seed_temp[curr_obs,curr_pair] = seed20;
                        {p4_temp,g4_temp,sss} = pdfmvnac(mean_final',var_final,Store_Seed[i,curr_pair]);
                        seednext = sss;
                        Store_nn_temp[pair_nn_count,1] = p4_temp;
                        Store_nn_temp[pair_nn_count,2:cols(g4_temp)+1] = g4_temp;
                    else;
                        curr_pair  = curr_pair  + 1;
                        seed20 = seednext;
                        Store_Seed_temp[curr_obs,curr_pair] = seed20;
                        seednext = seed20;
                        p4_temp  = cdfbvn(mean_final[1,1],mean_final[2,1],var_final[1,2]);
                        p4_tempd = cdfbvn_grad(mean_final[1,1],mean_final[2,1],var_final[1,2]);
                        Store_nn_temp[pair_nn_count,1] = p4_temp;
                        Store_nn_temp[pair_nn_count,2:rows(p4_tempd)+1] = p4_tempd';
                    endif;
                    
                    if(p4_temp > upper_limit);
                        p4 = p4*p4_temp;
                    else;
                        p4 = p4* (p4_temp-((p4_temp<=upper_limit)*(p4_temp-upper_limit)));
                    endif;
                    
                    clear R_GG,mean_gu,var_gu,om,mean_final,var_final,p4_temp,p4_temp,p4_tempd;
                endfor;
            endfor;
        elseif(nvar_ogc == 0 and num_nominal == 1);
            pair_nn_count = pair_nn_count + 1;
            
            mean_gu    = - Mean_changed[nvar_ogc+1:rows(Mean_changed)];
            var_gu     =   Error_changed[nvar_ogc+1:rows(Error_changed),nvar_ogc+1:cols(Error_changed)];
            
            om  = diag(var_gu);
            mean_gu_final = mean_gu'./(sqrt(om))';
            var_gu_final = corrvc(var_gu);
            var_gu_final = diagrv(var_gu_final,ones((All_Nominal[1,1]-1),1));
            
            if(All_Nominal[1,1] > 3);
                curr_pair  = curr_pair  + 1;
                seed20 = seednext;
                Store_Seed_temp[curr_obs,curr_pair] = seed20;
                {p4_1,g4_1,ss} = pdfmvnac(mean_gu_final,var_gu_final,Store_Seed[i,curr_pair]);
                seednext = ss;
            elseif(All_Nominal[1,1] == 3);
                curr_pair  = curr_pair  + 1;
                seed20 = seednext;
                Store_Seed_temp[curr_obs,curr_pair] = seed20;
                seednext = seed20;
                p4_1  = cdfbvn(mean_gu_final[1,1],mean_gu_final[1,2],var_gu_final[1,2]);
                g4_1  = cdfbvn_grad(mean_gu_final[1,1],mean_gu_final[1,2],var_gu_final[1,2]);
                g4_1  = g4_1';
            elseif(All_Nominal[1,1] == 2);
                curr_pair  = curr_pair  + 1;
                seed20 = seednext;
                Store_Seed_temp[curr_obs,curr_pair] = seed20;
                seednext = seed20;
                p4_1  = cdfN(mean_gu_final[1,1]);
                g4_1  = pdfn(mean_gu_final[1,1]);
            endif;
            
            Store_nn_temp[pair_nn_count,1] = p4_1;
            Store_nn_temp[pair_nn_count,2:cols(g4_1)+1] = g4_1;
            
            if(p4_1 > upper_limit);
                p4 = p4_1;
            else;
                p4 = (p4_1-((p4_1<=upper_limit)*(p4_1-upper_limit)));
            endif;
            clear mean_gu,var_gu,om,mean_gu_final,var_gu_final,p4_1,g4_1;
        endif;
        
        LL = ln(p1*p2*p3*p4);
        Likelihood = Likelihood | LL;
        clear M,B_Tild,Error_Tild,Mean_changed,Error_changed,BU_Tild,Error_YU_Tild,Error_U_Tild,Error_Y,Diff_Mean;
    endfor;
    
    if(nvar_ogc < 1);
        Store_ogc_temp  = zeros(num_obs*Com_ogc_r,1);
    endif;
    
    if(nvar_ogc == 0);
        Store_ogcn_temp = zeros(num_obs*Com_ogcn_r,Com_ogcn_c);
    endif;
    
    if(nvar_mear_count == 0);
        Count_Threshold_temp = zeros(num_obs,1);
        Lambda_count_temp    = zeros(num_obs,1);
        term1_temp           = zeros(num_obs,1);
    endif;
    
    if(nvar_mear_ordl == 0);
        lower_threshold_matrix_temp = zeros(num_obs,1);
        upper_threshold_matrix_temp = zeros(num_obs,1);
    endif;
    
    if(nvar_mear_grup == 0);
        Category_matrix_lower_temp = zeros(num_obs,1);
        Category_matrix_upper_temp = zeros(num_obs,1);
    endif;
    
    retp(Likelihood,Store_ogc_temp,Store_ogcn_temp,Store_nn_temp,Store_Seed_temp,lower_threshold_matrix_temp,upper_threshold_matrix_temp,Category_matrix_lower_temp,Category_matrix_upper_temp,Utilitym,Count_Threshold_temp,Lambda_count_temp,term1_temp);
endp;

/*-----------------------------------------------------------------------------------------------------------------------------------------------------------*/
proc lgd1(parm,dta);
    
    local Alpha_coeff,Chol_Alpha_corr,delta_coeff,d_matrix_coeff,Chol_Psi_matrix,Beta_coeff,Lambda_coeff,Chol_Lamda1,Chol_Lamda2,Theta_coeff,Phi_coeff,upper_threshold,lower_threshold;
    local Chol_Alpha_corr_adjusted,row_all,row_all_sq,denom,i,j,Alpha_corr,Lambda_mat,Psi_matrix,Psi_matrix_big,Lamda1,Lamda2,Lamda,AlphaW,z,y1,Gamma_X,y2,Y,y2_temp;
    local Xbeta,Xbeta1,Xbeta2,v11,v12,v1,countObs,smallCObs,term2,threshUpper,threshLower,phiUpper;
    local phiLower,iden_matrix1,iden_matrix2,one_negative1,one_negative2,seednext,Likelihood,U_Y,LL,Full_error,e1,e12,e21,e22,M,Alt_chosen1,Alt_chosen2,temp1,temp2,ch;
    local B_Tild,Error_Tild,BU_Tild,Error_YU_Tild,Error_U_Tild,Error_Y,Diff_Mean,Diff_Mean_mu,Mean_changed,Error_changed,Curr_Lower_Threshold,Curr_Upper_Threshold,p1,p2,p3,p4;
    local pair_GG,g1,g2,rho_low_g1,rho_low_g2,rho_up_g1,rho_up_g2,var_g1g2,p2_temp,D_VG,rho_low_g3,rho_up_g3,mean_gu,var_gu,om,mean_low_final,mean_up_final,var_final,p3_1_uo,ss_up;
    local R_GG,mean_final,p4_temp,sss,Chol_Alpha_corr_adjusted1,temp,seed20,p3_1_up,Temp_negative;
    
    local alpha_gradient,alphad,AlphaWd,zd,yd,LambdaZd,Utilityd,gg_temp,U_Yd,B_Tild_d,gg,BU_Tild_d,Diff_Mean_d,Diff_Mean_mu_d,Mean_changed_d;
    local p1_d,p1_dd,p2_dd,p3_dd,p4_dd,rho_low_g1d,rho_low_g2d,rho_up_g1d,rho_up_g2d,p2_temp1,p2_temp2,p2_temp3,p2_temp4,p2_temp11,p2_temp22,p2_temp33,p2_temp44;
    local mean_gu_d,mean_low_final_d,mean_up_final_d,w1,g11,mean_final_d,ss,gradient,num_element,Psi_matrix_big_d,Lamda_d;
    
    local alpha_corr_gradient,d_chol_alpha_corr1,row_num,col_num,denom1,d_chol_alpha_corr,Alpha_corrd,Full_error_d,e1_d,e12_d,e21_d,e22_d;
    local Error_Tild_d,Error_YU_Tild_d,Error_U_Tild_d,Error_Y_d,Error_changed_d,om_low_g1,om_low_g2,om_up_g1,om_up_g2,omncd_low_g1;
    local omncd_low_g2,omncd_up_g1,omncd_up_g2,rho_low_g1md,rho_low_g2md,rho_up_g1md,rho_up_g2md,rho_low_g1m,rho_low_g2m,rho_up_g1m,rho_up_g2m;
    local var_g1g2_d,var_gu_d,omncd,var_final_d,shi_r_unq,diff_cdf,w2;
    
    local delta_gradient,delta_d,idel,Gamma_X_d,y2_d,Lambda_count_d,dgam_smallC,dgam_term1,Count_Threshold_d,Curr_Lower_Threshold_d,Curr_Upper_Threshold_d;
    local rho_low_g3_d,rho_up_g3_d,D_matrix_gradient,d_matrix_coeff_d,idmat,D_matrix_d,p1_dm,p1_dr,Alpha_corrd_d,Psi_gradient;
    local d_chol_psi,Psidd,Psid,Psi_matrix_big_dd,Beta_gradient,betad,Xbeta_d,Xbeta1_d,Xbeta2_d,ibeta,iPsi,ilambda,Lambda_gradient;
    local d_lambda,Lambda_mat_d,ilamda,Lamda_gradient,d_chol_lamda,lamdadd,lamdad1,Lamdad,Lamda_dd;
    local Theta_gradient,dthet_smallC,dthet_term1,Phi_gradient,dphi_threshUpper,dphi_threshLower;
    local upper_threshold_gradient,lower_threshold_d,upper_threshold_d,lower_threshold_matrix_d,upper_threshold_matrix_d,iupper_th,g22,ss_low;
    local upper_threshold_K,upper_threshold_decider,upper_threshold_K_d,Phi_d,xPhiMat_d,Phi_coeff_d,Chol_Lamda,Lamda_chol,temp_num1,temp_num2,curr_ele,curr_mat,Beta_coeff_expand;
    local Beta_coeff_expand_d,Alt_chosen,iden_matrix,one_negative,Xbetad,row_add;
    local upper_threshold_K1_d,Phi_K1_d,count;
    local pair_ogc_count,pair_ogcn_count,pair_nn_count;
    local phi_All,phi_mat,GP_Global_d,temp_arr,Gamma_Phi_d,ZGPD,temp_store;
    local mean_gu_final,var_gu_final,p4_1,g4_1,mean_gu_final_d,var_gu_final_d;
    local upper_threshold_K1,Phi_coeff1,Phi_coeff_K1,Chol_Lamda_adjusted,Chol_Lamda_adjusted1,row_found,threshCountMax,xPhiMat;
    
    delta_coeff         = parm[1:nvarmC];
    Beta_coeff          = parm[nvarmC+1:nvarmC+nvarma];
    Chol_Lamda          = xpnd(parm[nvarmC+nvarma+1:nvarmC+nvarma+All_nCholerr]);
    
    
    if(nvar_mear_ordl > 0);
        upper_threshold_K    = parm[nvarmC+nvarma+All_nCholerr+1:nvarmC+nvarma+All_nCholerr+num_ordl_cat_req];
        upper_threshold_K1   = zeros(nvar_mear_ordl,Highest_scale);
        for i(1,nvar_mear_ordl,1);
            if(i==1);
                upper_threshold_K1[i,1:num_ordl_cat_req1[i]] = (upper_threshold_K[1:num_ordl_cat_req_csum[i]])';
            else;
                upper_threshold_K1[i,1:num_ordl_cat_req1[i]] = (upper_threshold_K[num_ordl_cat_req_csum[i-1]+1:num_ordl_cat_req_csum[i]])';
            endif;
        endfor;
        
        upper_threshold      =  upper_threshold_K1 ;
        for i(1,nvar_mear_ordl,1);
            if(num_ordl_cat_req1[i] < Highest_scale);
                upper_threshold[i,num_ordl_cat_req1[i]+1:Highest_scale] = positive_infinity*ones(1,Highest_scale-num_ordl_cat_req1[i]);
            endif;
        endfor;
        upper_threshold_decider = negative_infinity*ones(nvar_mear_ordl,1) ~ zeros(nvar_mear_ordl,1) ~ upper_threshold ~ positive_infinity*ones(nvar_mear_ordl,1);
    endif;
    
    if(nvar_mear_count > 0);
        Phi_coeff1      = parm[nvarmC+nvarma+All_nCholerr+num_ordl_cat_req+1:nvarmC+nvarma+All_nCholerr+num_ordl_cat_req+Total_Phi];
        Phi_coeff_K1    = zeros(nvar_mear_count,Highest_Phi);
        for i(1,nvar_mear_count,1);
            if(i==1);
                Phi_coeff_K1[i,1:Num_Phi[i]] = (Phi_coeff1[1:num_Phi_csum[i]])';
            else;
                Phi_coeff_K1[i,1:Num_Phi[i]] = (Phi_coeff1[num_Phi_csum[i-1]+1:num_Phi_csum[i]])';
            endif;
        endfor;
        
        Phi_coeff      =  Phi_coeff_K1 ;
        for i(1,nvar_mear_count,1);
            if(Num_Phi[i] < Highest_Phi);
                Phi_coeff[i,Num_Phi[i]+1:Highest_Phi] = zeros(1,Highest_Phi-Num_Phi[i]);
            endif;
        endfor;
    endif;
    
    Lamda      = Chol_Lamda;
    Full_error = D_matrix*Lamda*D_matrix';
    
    Gamma_X = (ones(nvar_mear,1) .*. delta_coeff  )*~(dta[.,ivgenvC])';
    y2 = {};
    j = 1;
    
    do until j > nvar_mear;
        y2 = y2~(sumc(Gamma_X[(j-1)*nvarmC+1:(j*nvarmC),.]));           // Y stores the Y variables value for each observation. nobs X nvar_mear. 1st col has Y1, 2nd Y2 and so on for all observations.
        j = j+1;
    endo;
    
    if(nvar_mear_count > 0);
        y2_temp = {};
        y2_temp = y2_temp ~ y2[.,1:(nvar_mear_cont+nvar_mear_ordl+nvar_mear_grup)] ~ zeros(nobs,nvar_mear_count);
        Y = y2_temp;
        clear y2_temp;
    else;
        Y = y2;
    endif;
    
    //------------------------------------------delta Gradient--------------------------------------------------------------
    ThreadBegin;
    delta_gradient = {};
    for idel(1,nvarmC,1);
        if(_max_active[idel] == 0);
            delta_gradient = delta_gradient ~ zeros(nobs,1);
        else;
            delta_d = zeros(nvarmC,1);
            delta_d[idel] = 1;
            
            Gamma_X_d = (ones(nvar_mear,1) .*. delta_d  )*~(dta[.,ivgenvC])';
            y2_d = {};
            j = 1;
            
            do until j > nvar_mear;
                y2_d = y2_d~(sumc(Gamma_X_d[(j-1)*nvarmC+1:(j*nvarmC),.]));           // Y stores the Y variables value for each observation. nobs X nvar_mear. 1st col has Y1, 2nd Y2 and so on for all observations.
                j = j+1;
            endo;
            
            yd = {};
            if(nvar_mear_count > 0);
                yd =  yd ~ y2_d[.,1:(nvar_mear_cont+nvar_mear_ordl+nvar_mear_grup)] ~ zeros(nobs,nvar_mear_count);
                
                Lambda_count_d = Lambda_count .* y2_d[.,nvar_mear_cont+nvar_mear_ordl+nvar_mear_grup+1:nvar_mear_cont+nvar_mear_ordl+nvar_mear_grup+nvar_mear_count] ;
                
                dgam_term1  = -(term1 .* Lambda_count_d);
                
                threshCountMax = threshCountMax_Global;
                xPhiMat = zeros(nvar_mear_count,threshCountMax+1);
                
                for iCnt (1,nvar_mear_count,1);
                    xPhiMat[iCnt,2:1+Num_Phi[iCnt]] = (Phi_coeff[iCnt,1:Num_Phi[iCnt]]);
                endfor;
                
                for iCnt (1,nvar_mear_count,1);
                    xPhiMat[iCnt,Num_Phi[iCnt]+2:threshCountMax+1] = ones(1,(threshCountMax+1-Num_Phi[iCnt]-1)) .*. Phi_coeff[iCnt,Num_Phi[iCnt]];
                endfor;
                
                Count_Threshold_d = zeros(nobs,nvar_mear_count*2);
                for iobs(1,nobs,1);
                    for jcount(1,nvar_mear_count,1);
                        countObs = dta[iobs,Count_Index[1,jcount]];
                        local dthet_term2,dthet_threshUpper,dthet_threshLower,dgam_term2,dgam_threshUpper,dgam_threshLower;
                        
                        term2 = 0;
                        dgam_term2 = 0;
                        
                        for icnt (0,countObs,1);
                            term2 = term2 + ( (Lambda_count[iobs,jcount]^iCnt)/(iCnt!) ) ;
                            dgam_term2  = dgam_term2 + ( ((iCnt)*Lambda_count[iobs,jcount]^(iCnt-1))/(iCnt!) * Lambda_count_d[iobs,jcount] ) ;
                        endfor;
                        
                        threshUpper = term1[iobs,jcount] * term2;
                        dgam_threshUpper  = dgam_term1[iobs,jcount] * term2  +  term1[iobs,jcount] * dgam_term2;
                        
                        if(countObs gt 0);
                            term2 = term2 - ( (Lambda_count[iobs,jcount]^countObs)/(countObs!) ) ;
                            dgam_term2 = dgam_term2 - ( ((countObs)*Lambda_count[iobs,jcount]^(countObs-1))/(countObs!) * Lambda_count_d[iobs,jcount] ) ;
                            threshLower = term1[iobs,jcount] * term2;
                            phiUpper = (xPhiMat[jcount,countObs+1])';
                            phiLower = (xPhiMat[jcount,countObs])';
                            dgam_threshLower  = dgam_term1[iobs,jcount] * term2  +  term1[iobs,jcount] * dgam_term2;
                        else;
                            threshLower = 0;
                            dgam_threshLower = 0;
                            phiUpper = 0;
                            phiLower = 0;
                        endif;
                        
                        threshUpper = minc( threshUpper|0.99999999999999999);
                        threshLower = minc( threshLower|0.99999999999999999);
                        
                        dgam_threshUpper = 1/pdfn(cdfni(threshUpper ))*dgam_threshUpper;
                        dgam_threshLower = 1/pdfn(cdfni(threshLower))*dgam_threshLower;
                        
                        Count_Threshold_d[iobs,jcount] = dgam_threshLower;
                        Count_Threshold_d[iobs,nvar_mear_count+jcount] = dgam_threshUpper;
                    endfor;
                endfor;
            else;
                yd =  yd ~ y2_d;
            endif;
            
            
            Utilityd = zeros(nobs,Alternative_all);
            
            gg_temp = {};
            pair_ogc_count = 0;
            pair_ogcn_count = 0;
            pair_nn_count = 0;
            
            for i(1,nobs,1);
                U_Y = {};
                U_Yd = {};
                gg = 0;
                p1_dd = 0;
                
                U_Y   = U_Y  | Y[i,.]' | Utility[i,.]';
                U_Yd  = U_Yd | yd[i,.]'| Utilityd[i,.]';
                
                M = zeros(nvar_mear+Alternative_all-num_nominal,nvar_mear+Alternative_all);
                M[1:nvar_mear,1:nvar_mear] = eye(nvar_mear);
                
                Alt_chosen = (dta[i,Altchm])';
                
                for j(1,num_nominal,1);
                    iden_matrix = eye(All_Nominal[1,j]-1);
                    one_negative = -1*ones(All_Nominal[1,j]-1,1);
                    if(Alt_chosen[j] eq 1);
                        temp1 = one_negative ~ iden_matrix;
                    elseif(Alt_chosen[j] eq All_Nominal[1,j]);
                        temp1 = iden_matrix ~ one_negative;
                    else;
                        ch = Alt_chosen[j];
                        temp1 = iden_matrix[.,1:ch-1] ~ one_negative ~ iden_matrix[.,ch:All_Nominal[1,j]-1];
                    endif;
                    
                    if(j == 1);
                        M[nvar_mear+1:nvar_mear+All_Nominal[1,j]-1,nvar_mear+1:nvar_mear+All_Nominal[1,j]] = temp1;
                    else;
                        M[nvar_mear+M_mat_Track_csum[j-1,1]+1:nvar_mear+M_mat_Track_csum[j,1],nvar_mear+Nominal_csum[j-1,1]+1:nvar_mear+Nominal_csum[j-1,1]+All_Nominal[1,j]] = temp1;
                    endif;
                    
                    clear temp1;
                endfor;
                
                B_Tild = M * U_Y;
                B_Tild_d = M * U_Yd;
                Error_Tild = M * Full_error * M';
                
                BU_Tild       = B_Tild[nvar_mear_cont+1:rows(B_Tild)];
                
                if(nvar_mear_cont > 0);
                    Error_YU_Tild = Error_Tild[nvar_mear_cont+1:rows(Error_Tild),1:nvar_mear_cont];
                endif;
                
                Error_U_Tild  = Error_Tild[nvar_mear_cont+1:rows(Error_Tild),nvar_mear_cont+1:cols(Error_Tild)];
                
                if(nvar_mear_cont > 0);
                    Error_Y       = Error_Tild[1:nvar_mear_cont,1:nvar_mear_cont];
                    Diff_Mean     = (dta[i,Continous_Index])';
                    Diff_Mean_mu  = B_Tild[1:nvar_mear_cont];
                endif;
                
                if(nvar_mear_cont > 0);
                    Mean_changed =  BU_Tild + ( Error_YU_Tild * inv(Error_Y) * (Diff_Mean-Diff_Mean_mu) );
                    Error_changed = Error_U_Tild - ( Error_YU_Tild * inv(Error_Y) *  Error_YU_Tild');
                else;
                    Mean_changed =  BU_Tild ;
                    Error_changed = Error_U_Tild ;
                endif;
                
                
                
                BU_Tild_d        = B_Tild_d[nvar_mear_cont+1:rows(B_Tild_d)];
                
                if(nvar_mear_cont > 0);
                    Diff_Mean_d      = zeros(nvar_mear_cont,1);
                    Diff_Mean_mu_d   = B_Tild_d[1:nvar_mear_cont];
                endif;
                
                if(nvar_mear_cont > 0);
                    Mean_changed_d =  BU_Tild_d + ( Error_YU_Tild * inv(Error_Y) * Diff_Mean_d ) - ( Error_YU_Tild * inv(Error_Y) * Diff_Mean_mu_d );
                else;
                    Mean_changed_d =  BU_Tild_d ;
                endif;
                
                Curr_Lower_Threshold = {};
                Curr_Upper_Threshold = {};
                
                Curr_Lower_Threshold_d = {};
                Curr_Upper_Threshold_d = {};
                
                if(nvar_mear_ordl > 0);
                    Curr_Lower_Threshold = Curr_Lower_Threshold ~ lower_threshold_matrix[i,.] ;
                    Curr_Upper_Threshold = Curr_Upper_Threshold ~ upper_threshold_matrix[i,.] ;
                endif;
                
                if(nvar_mear_grup > 0);
                    Curr_Lower_Threshold = Curr_Lower_Threshold ~ Category_matrix_lower[i,.] ;
                    Curr_Upper_Threshold = Curr_Upper_Threshold ~ Category_matrix_upper[i,.] ;
                endif;
                
                if(nvar_mear_count > 0);
                    Curr_Lower_Threshold = Curr_Lower_Threshold ~ Count_Threshold[i,1:nvar_mear_count] ;
                    Curr_Upper_Threshold = Curr_Upper_Threshold ~ Count_Threshold[i,nvar_mear_count+1:2*nvar_mear_count] ;
                endif;
                
                Curr_Lower_Threshold = Curr_Lower_Threshold ~ (negative_infinity*ones(1,Alternative_all-num_nominal)) ;
                Curr_Upper_Threshold = Curr_Upper_Threshold ~ (zeros(1,Alternative_all-num_nominal));
                
                if(nvar_mear_ordl > 0);
                    Curr_Lower_Threshold_d = Curr_Lower_Threshold_d ~ 0*lower_threshold_matrix[i,.] ;
                    Curr_Upper_Threshold_d = Curr_Upper_Threshold_d ~ 0*upper_threshold_matrix[i,.] ;
                endif;
                
                if(nvar_mear_grup > 0);
                    Curr_Lower_Threshold_d = Curr_Lower_Threshold_d ~ 0*Category_matrix_lower[i,.] ;
                    Curr_Upper_Threshold_d = Curr_Upper_Threshold_d ~ 0*Category_matrix_upper[i,.] ;
                endif;
                
                if(nvar_mear_count > 0);
                    Curr_Lower_Threshold_d = Curr_Lower_Threshold_d ~ Count_Threshold_d[i,1:nvar_mear_count] ;
                    Curr_Upper_Threshold_d = Curr_Upper_Threshold_d ~ Count_Threshold_d[i,nvar_mear_count+1:2*nvar_mear_count] ;
                endif;
                
                Curr_Lower_Threshold_d = Curr_Lower_Threshold_d ~ (zeros(1,Alternative_all-num_nominal)) ;
                Curr_Upper_Threshold_d = Curr_Upper_Threshold_d ~ (zeros(1,Alternative_all-num_nominal));
                
                
                if(nvar_mear_cont > 0);
                    p1 = pdfmvn(Diff_Mean,Diff_Mean_mu,Error_Y);
                    p1_d = pdfgmean(Diff_Mean,Diff_Mean_mu,Error_Y);
                    
                    if(p1 > upper_limit);
                        p1_dd = (1/p1)*(p1_d' * (Diff_Mean_d-Diff_Mean_mu_d));
                    endif;
                endif;
                
                if(nvar_ogc > 1);
                    p2_dd = 0;
                    for g1(1,nvar_mear_ordl+nvar_mear_grup+nvar_mear_count-1,1);
                        for g2(g1+1,nvar_mear_ordl+nvar_mear_grup+nvar_mear_count,1);
                            
                            pair_ogc_count = pair_ogc_count + 1;
                            
                            rho_low_g1d =  (Curr_Lower_Threshold_d[1,g1] - Mean_changed_d[g1] ) / sqrt(Error_changed[g1,g1]);
                            rho_low_g2d =  (Curr_Lower_Threshold_d[1,g2] - Mean_changed_d[g2] ) / sqrt(Error_changed[g2,g2]);
                            rho_up_g1d =   (Curr_Upper_Threshold_d[1,g1] - Mean_changed_d[g1] ) / sqrt(Error_changed[g1,g1]);
                            rho_up_g2d =   (Curr_Upper_Threshold_d[1,g2] - Mean_changed_d[g2] ) / sqrt(Error_changed[g2,g2]);
                            
                            p2_temp11 = rho_up_g1d | rho_up_g2d | 0;
                            p2_temp22 = rho_up_g1d | rho_low_g2d | 0;
                            p2_temp33 = rho_low_g1d | rho_up_g2d | 0;
                            p2_temp44 = rho_low_g1d | rho_low_g2d | 0;
                            
                            if(Store_ogc[pair_ogc_count,13] > upper_limit);
                                p2_dd = p2_dd + ( (1/Store_ogc[pair_ogc_count,13])*( (Store_ogc[pair_ogc_count,1:3] * p2_temp11) - (Store_ogc[pair_ogc_count,4:6] * p2_temp22) - (Store_ogc[pair_ogc_count,7:9] * p2_temp33) + (Store_ogc[pair_ogc_count,10:12] * p2_temp44) ) );
                            endif;
                            clear rho_low_g1,rho_low_g2,rho_up_g1,rho_up_g2,var_g1g2,p2_temp,rho_low_g1d,rho_low_g2d,rho_up_g1d,rho_up_g2d,p2_temp1,p2_temp2,p2_temp3,p2_temp4,p2_temp11,p2_temp22,p2_temp33,p2_temp44;
                        endfor;
                    endfor;
                else;
                    p2_dd = 0;
                endif;
                
                if(nvar_ogc > 0);
                    p3_dd = 0;
                    for v1(1,nvar_mear_ordl+nvar_mear_grup+nvar_mear_count,1);
                        for g1(1,num_nominal,1);
                            D_VG = zeros(All_Nominal[1,g1],(nvar_mear_ordl+nvar_mear_grup+nvar_mear_count+Alternative_all-num_nominal));
                            D_VG[1,v1] = 1;
                            
                            pair_ogcn_count = pair_ogcn_count + 1;
                            if(g1 == 1);
                                D_VG[2:rows(D_VG),nvar_mear_ordl+nvar_mear_grup+nvar_mear_count+1:nvar_mear_ordl+nvar_mear_grup+nvar_mear_count+All_Nominal[1,g1]-1] = eye(All_Nominal[1,g1]-1);
                            else;
                                D_VG[2:rows(D_VG),nvar_mear_ordl+nvar_mear_grup+nvar_mear_count+M_mat_Track_csum[g1-1,1]+1:nvar_mear_ordl+nvar_mear_grup+nvar_mear_count+M_mat_Track_csum[g1,1]] = eye(All_Nominal[1,g1]-1);
                            endif;
                            
                            rho_low_g3 = D_VG*Curr_Lower_Threshold';
                            rho_up_g3  = D_VG*Curr_Upper_Threshold';
                            
                            rho_low_g3_d = D_VG*Curr_Lower_Threshold_d';
                            rho_up_g3_d  = D_VG*Curr_Upper_Threshold_d';
                            
                            mean_gu    = D_VG*Mean_changed;
                            var_gu     = D_VG*Error_changed*D_VG';
                            
                            mean_gu_d  = D_VG*Mean_changed_d;
                            
                            om  = sqrt(diag(var_gu));
                            mean_low_final = (rho_low_g3 - mean_gu)./om;
                            mean_up_final  = (rho_up_g3 - mean_gu)./om;
                            
                            var_final      = corrvc(var_gu);
                            var_final      = diagrv(var_final,ones(All_Nominal[1,g1],1));
                            
                            mean_low_final_d = (rho_low_g3_d - mean_gu_d)./om;
                            mean_up_final_d  = (rho_up_g3_d - mean_gu_d)./om;
                            
                            if(Store_ogcn[pair_ogcn_count,1] > upper_limit);
                                p3_dd = p3_dd + ( (1/Store_ogcn[pair_ogcn_count,1]) *  (Store_ogcn[pair_ogcn_count,2:rows(mean_up_final_d)+1] * mean_up_final_d)  )  ;
                            endif;
                            
                            clear rho_low_g3,rho_up_g3,mean_gu,var_gu,om,mean_low_final,mean_up_final,var_final,D_VG,mean_gu_d,mean_low_final_d,mean_up_final_d;
                            clear rho_low_g3_d,rho_up_g3_d;
                        endfor;
                    endfor;
                else;
                    p3_dd = 0 ;
                endif;
                
                
                p4_dd = 0;
                if(num_nominal > 1);
                    for g1(1,num_nominal-1,1);
                        for g2(g1+1,num_nominal,1);
                            R_GG = zeros(All_Nominal[1,g1]+All_Nominal[1,g2]-2,nvar_mear_ordl+nvar_mear_grup+nvar_mear_count+Alternative_all-num_nominal);
                            
                            pair_nn_count = pair_nn_count + 1;
                            if(g1 == 1);
                                R_GG[1:M_mat_Track[1,g1],nvar_mear_ordl+nvar_mear_grup+nvar_mear_count+1:nvar_mear_ordl+nvar_mear_grup+nvar_mear_count+All_Nominal[1,g1]-1] = eye(All_Nominal[1,g1]-1);
                            else;
                                R_GG[1:M_mat_Track[1,g1],nvar_mear_ordl+nvar_mear_grup+nvar_mear_count+M_mat_Track_csum[g1-1,1]+1:nvar_mear_ordl+nvar_mear_grup+nvar_mear_count+M_mat_Track_csum[g1,1]] = eye(All_Nominal[1,g1]-1);
                            endif;
                            
                            R_GG[M_mat_Track[1,g1]+1:rows(R_GG),nvar_mear_ordl+nvar_mear_grup+nvar_mear_count+M_mat_Track_csum[g2-1,1]+1:nvar_mear_ordl+nvar_mear_grup+nvar_mear_count+M_mat_Track_csum[g2,1]] = eye(All_Nominal[1,g2]-1);
                            
                            
                            mean_gu    = -(R_GG*Mean_changed);
                            mean_gu_d  = -(R_GG*Mean_changed_d);
                            
                            var_gu     = R_GG*Error_changed*R_GG';
                            
                            om  = sqrt(diag(var_gu));
                            mean_final = mean_gu./om;
                            
                            var_final      = corrvc(var_gu);
                            var_final      = diagrv(var_final,ones(All_Nominal[1,g1]+All_Nominal[1,g2]-2,1));
                            
                            mean_final_d  = (mean_gu_d)./om;
                            
                            num_element = All_Nominal[1,g1] + All_Nominal[1,g2] - 2	;
                            
                            if(Store_nn[pair_nn_count,1] > upper_limit);
                                p4_dd = p4_dd + ( (1/Store_nn[pair_nn_count,1]) *  (Store_nn[pair_nn_count,2:num_element+1] * mean_final_d)  )  ;
                            endif;
                            
                            clear R_GG,mean_gu,var_gu,om,mean_final,var_final,mean_final_d;
                        endfor;
                    endfor;
                elseif(nvar_ogc == 0 and num_nominal == 1);
                    pair_nn_count = pair_nn_count + 1;
                    
                    mean_gu    = - Mean_changed[nvar_ogc+1:rows(Mean_changed)];
                    var_gu     =   Error_changed[nvar_ogc+1:rows(Error_changed),nvar_ogc+1:cols(Error_changed)];
                    
                    om  = sqrt(diag(var_gu));
                    mean_gu_final = mean_gu./om;
                    var_gu_final = corrvc(var_gu);
                    var_gu_final = diagrv(var_gu_final,ones((All_Nominal[1,1]-1),1));
                    
                    mean_gu_d        =      -Mean_changed_d[nvar_ogc+1:rows(Mean_changed_d)];
                    mean_gu_final_d  = (mean_gu_d)./om;
                    
                    num_element = (All_Nominal[1,1]-1);
                    if(Store_nn[pair_nn_count,1] > upper_limit);
                        p4_dd = ( (1/Store_nn[pair_nn_count,1]) *  (Store_nn[pair_nn_count,2:num_element+1] * mean_gu_final_d)  )  ;
                    endif;
                    clear mean_gu,var_gu,om,mean_gu_final,var_gu_final,mean_gu_d,mean_gu_final_d;
                endif;
                
                gg = p1_dd + p2_dd + p3_dd + p4_dd;
                gg_temp = gg_temp | gg;
                
                clear Lambda_mat,M,B_Tild,Error_Tild,Mean_changed,Error_changed,BU_Tild,Error_YU_Tild,Error_U_Tild,Error_Y,Diff_Mean,BU_Tild_d,Diff_Mean_d,Mean_changed_d,B_Tild_d,gg;
            endfor;
            delta_gradient = delta_gradient ~ gg_temp;
            
            clear yd,Utilityd,Count_Threshold_d;
        endif;
    endfor;
    ThreadEnd;
    //----------------------------------------------------------Beta Gradient-------------------------------------------
    ThreadBegin;
    Beta_gradient = {};
    for ibeta(1,nvarma,1);
        if(_max_active[nvarmC+ibeta] == 0);
            Beta_gradient = Beta_gradient ~ zeros(nobs,1);
        else;
            betad = zeros(nvarma,1);
            betad[ibeta] = 1;
            
            Beta_coeff_expand_d = {};
            for j(1,num_nominal,1);
                if(j == 1);
                    Beta_coeff_expand_d = Beta_coeff_expand_d | (ones(All_Nominal[1,j],1) .*. betad[1:nvarma_csum[j]]);
                else;
                    Beta_coeff_expand_d = Beta_coeff_expand_d | (ones(All_Nominal[1,j],1) .*. betad[nvarma_csum[j-1]+1:nvarma_csum[j]]);
                endif;
            endfor;
            
            
            Xbetad = (Beta_coeff_expand_d)*~(dta[.,ivgenva])';
            
            Utilityd = {};
            for i1(1,num_nominal,1);
                j = 1;
                
                if(i1 == 1);
                    row_add = 0;
                else;
                    row_add = sumr(All_Nominal[1,1:i1-1] .* nvarma_all[1,1:i1-1]);
                endif;
                
                do until j > All_Nominal[1,i1];
                    Utilityd = Utilityd~(sumc(Xbetad[row_add+(j-1)*nvarma_all[1,i1]+1:row_add+(j*nvarma_all[1,i1]),.]));
                    j = j+1;
                endo;
            endfor;
            
            for i(1,nobs,1);
                for j(1,Alternative_all,1);
                    if(dta[i,Avalability[j]] == 0);
                        Utilityd[i,j] = Negative_Infinity_d;
                    endif;
                endfor;
            endfor;
            
            yd = zeros(nobs,nvar_mear);
            
            clear betad,Beta_coeff_expand_d,Xbetad;
            
            
            gg_temp = {};
            pair_ogc_count = 0;
            pair_ogcn_count = 0;
            pair_nn_count = 0;
            
            for i(1,nobs,1);
                U_Y = {};
                U_Yd = {};
                gg = 0;
                p1_dd = 0;
                
                U_Y   = U_Y   | Y[i,.]' | Utility[i,.]';
                U_Yd   = U_Yd | yd[i,.]'| Utilityd[i,.]';
                
                M = zeros(nvar_mear+Alternative_all-num_nominal,nvar_mear+Alternative_all);
                M[1:nvar_mear,1:nvar_mear] = eye(nvar_mear);
                
                Alt_chosen = (dta[i,Altchm])';
                
                for j(1,num_nominal,1);
                    iden_matrix = eye(All_Nominal[1,j]-1);
                    one_negative = -1*ones(All_Nominal[1,j]-1,1);
                    if(Alt_chosen[j] eq 1);
                        temp1 = one_negative ~ iden_matrix;
                    elseif(Alt_chosen[j] eq All_Nominal[1,j]);
                        temp1 = iden_matrix ~ one_negative;
                    else;
                        ch = Alt_chosen[j];
                        temp1 = iden_matrix[.,1:ch-1] ~ one_negative ~ iden_matrix[.,ch:All_Nominal[1,j]-1];
                    endif;
                    
                    if(j == 1);
                        M[nvar_mear+1:nvar_mear+All_Nominal[1,j]-1,nvar_mear+1:nvar_mear+All_Nominal[1,j]] = temp1;
                    else;
                        M[nvar_mear+M_mat_Track_csum[j-1,1]+1:nvar_mear+M_mat_Track_csum[j,1],nvar_mear+Nominal_csum[j-1,1]+1:nvar_mear+Nominal_csum[j-1,1]+All_Nominal[1,j]] = temp1;
                    endif;
                    
                    clear temp1;
                endfor;
                
                B_Tild = M * U_Y;
                B_Tild_d = M * U_Yd;
                Error_Tild = M * Full_error * M';
                
                BU_Tild       = B_Tild[nvar_mear_cont+1:rows(B_Tild)];
                
                if(nvar_mear_cont > 0);
                    Error_YU_Tild = Error_Tild[nvar_mear_cont+1:rows(Error_Tild),1:nvar_mear_cont];
                endif;
                
                Error_U_Tild  = Error_Tild[nvar_mear_cont+1:rows(Error_Tild),nvar_mear_cont+1:cols(Error_Tild)];
                
                if(nvar_mear_cont > 0);
                    Error_Y       = Error_Tild[1:nvar_mear_cont,1:nvar_mear_cont];
                    Diff_Mean     = (dta[i,Continous_Index])';
                    Diff_Mean_mu  = B_Tild[1:nvar_mear_cont];
                endif;
                
                if(nvar_mear_cont > 0);
                    Mean_changed =  BU_Tild + ( Error_YU_Tild * inv(Error_Y) * (Diff_Mean-Diff_Mean_mu) );
                    Error_changed = Error_U_Tild - ( Error_YU_Tild * inv(Error_Y) *  Error_YU_Tild');
                else;
                    Mean_changed =  BU_Tild ;
                    Error_changed = Error_U_Tild ;
                endif;
                
                BU_Tild_d        = B_Tild_d[nvar_mear_cont+1:rows(B_Tild_d)];
                
                if(nvar_mear_cont > 0);
                    Diff_Mean_d      = zeros(nvar_mear_cont,1);
                    Diff_Mean_mu_d   = B_Tild_d[1:nvar_mear_cont];
                endif;
                
                if(nvar_mear_cont > 0);
                    Mean_changed_d =  BU_Tild_d + ( Error_YU_Tild * inv(Error_Y) * Diff_Mean_d ) - ( Error_YU_Tild * inv(Error_Y) * Diff_Mean_mu_d );
                else;
                    Mean_changed_d =  BU_Tild_d ;
                endif;
                
                
                Curr_Lower_Threshold = {};
                Curr_Upper_Threshold = {};
                
                if(nvar_mear_ordl > 0);
                    Curr_Lower_Threshold = Curr_Lower_Threshold ~ lower_threshold_matrix[i,.] ;
                    Curr_Upper_Threshold = Curr_Upper_Threshold ~ upper_threshold_matrix[i,.] ;
                endif;
                
                if(nvar_mear_grup > 0);
                    Curr_Lower_Threshold = Curr_Lower_Threshold ~ Category_matrix_lower[i,.] ;
                    Curr_Upper_Threshold = Curr_Upper_Threshold ~ Category_matrix_upper[i,.] ;
                endif;
                
                if(nvar_mear_count > 0);
                    Curr_Lower_Threshold = Curr_Lower_Threshold ~ Count_Threshold[i,1:nvar_mear_count] ;
                    Curr_Upper_Threshold = Curr_Upper_Threshold ~ Count_Threshold[i,nvar_mear_count+1:2*nvar_mear_count] ;
                endif;
                
                Curr_Lower_Threshold = Curr_Lower_Threshold ~ (negative_infinity*ones(1,Alternative_all-num_nominal)) ;
                Curr_Upper_Threshold = Curr_Upper_Threshold ~ (zeros(1,Alternative_all-num_nominal));
                
                if(nvar_mear_cont > 0);
                    p1 = pdfmvn(Diff_Mean,Diff_Mean_mu,Error_Y);
                    p1_d = pdfgmean(Diff_Mean,Diff_Mean_mu,Error_Y);
                    
                    if(p1 > upper_limit);
                        p1_dd = (1/p1)*(p1_d' * (Diff_Mean_d-Diff_Mean_mu_d));
                    endif;
                endif;
                
                
                if(nvar_ogc > 1);
                    p2_dd = 0;
                    for g1(1,nvar_mear_ordl+nvar_mear_grup+nvar_mear_count-1,1);
                        for g2(g1+1,nvar_mear_ordl+nvar_mear_grup+nvar_mear_count,1);
                            
                            pair_ogc_count = pair_ogc_count + 1;
                            
                            rho_low_g1d =  (- Mean_changed_d[g1] ) / sqrt(Error_changed[g1,g1]);
                            rho_low_g2d =  (- Mean_changed_d[g2] ) / sqrt(Error_changed[g2,g2]);
                            rho_up_g1d =   (- Mean_changed_d[g1] ) / sqrt(Error_changed[g1,g1]);
                            rho_up_g2d =   (- Mean_changed_d[g2] ) / sqrt(Error_changed[g2,g2]);
                            
                            p2_temp11 = rho_up_g1d | rho_up_g2d | 0;
                            p2_temp22 = rho_up_g1d | rho_low_g2d | 0;
                            p2_temp33 = rho_low_g1d | rho_up_g2d | 0;
                            p2_temp44 = rho_low_g1d | rho_low_g2d | 0;
                            
                            if(Store_ogc[pair_ogc_count,13] > upper_limit);
                                p2_dd = p2_dd + ( (1/Store_ogc[pair_ogc_count,13])*( (Store_ogc[pair_ogc_count,1:3] * p2_temp11) - (Store_ogc[pair_ogc_count,4:6] * p2_temp22) - (Store_ogc[pair_ogc_count,7:9] * p2_temp33) + (Store_ogc[pair_ogc_count,10:12] * p2_temp44) ) );
                            endif;
                            clear rho_low_g1,rho_low_g2,rho_up_g1,rho_up_g2,var_g1g2,p2_temp,rho_low_g1d,rho_low_g2d,rho_up_g1d,rho_up_g2d,p2_temp1,p2_temp2,p2_temp3,p2_temp4,p2_temp11,p2_temp22,p2_temp33,p2_temp44;
                        endfor;
                    endfor;
                else;
                    p2_dd = 0;
                endif;
                
                if(nvar_ogc > 0);
                    p3_dd = 0;
                    for v1(1,nvar_mear_ordl+nvar_mear_grup+nvar_mear_count,1);
                        for g1(1,num_nominal,1);
                            D_VG = zeros(All_Nominal[1,g1],(nvar_mear_ordl+nvar_mear_grup+nvar_mear_count+Alternative_all-num_nominal));
                            D_VG[1,v1] = 1;
                            
                            pair_ogcn_count = pair_ogcn_count + 1;
                            if(g1 == 1);
                                D_VG[2:rows(D_VG),nvar_mear_ordl+nvar_mear_grup+nvar_mear_count+1:nvar_mear_ordl+nvar_mear_grup+nvar_mear_count+All_Nominal[1,g1]-1] = eye(All_Nominal[1,g1]-1);
                            else;
                                D_VG[2:rows(D_VG),nvar_mear_ordl+nvar_mear_grup+nvar_mear_count+M_mat_Track_csum[g1-1,1]+1:nvar_mear_ordl+nvar_mear_grup+nvar_mear_count+M_mat_Track_csum[g1,1]] = eye(All_Nominal[1,g1]-1);
                            endif;
                            
                            rho_low_g3 = D_VG*Curr_Lower_Threshold';
                            rho_up_g3  = D_VG*Curr_Upper_Threshold';
                            
                            mean_gu    = D_VG*Mean_changed;
                            var_gu     = D_VG*Error_changed*D_VG';
                            
                            mean_gu_d  = D_VG*Mean_changed_d;
                            
                            om  = sqrt(diag(var_gu));
                            mean_low_final = (rho_low_g3 - mean_gu)./om;
                            mean_up_final  = (rho_up_g3 - mean_gu)./om;
                            
                            var_final      = corrvc(var_gu);
                            var_final      = diagrv(var_final,ones(All_Nominal[1,g1],1));
                            
                            mean_low_final_d = (- mean_gu_d)./om;
                            mean_up_final_d  = (- mean_gu_d)./om;
                            
                            if(Store_ogcn[pair_ogcn_count,1] > upper_limit);
                                p3_dd = p3_dd + ( (1/Store_ogcn[pair_ogcn_count,1]) *  (Store_ogcn[pair_ogcn_count,2:rows(mean_up_final_d)+1] * mean_up_final_d)  )  ;
                            endif;
                            
                            clear rho_low_g3,rho_up_g3,mean_gu,var_gu,om,mean_low_final,mean_up_final,var_final,D_VG,mean_gu_d,mean_low_final_d,mean_up_final_d;
                        endfor;
                    endfor;
                else;
                    p3_dd = 0 ;
                endif;
                
                p4_dd = 0;
                if(num_nominal > 1);
                    for g1(1,num_nominal-1,1);
                        for g2(g1+1,num_nominal,1);
                            R_GG = zeros(All_Nominal[1,g1]+All_Nominal[1,g2]-2,nvar_mear_ordl+nvar_mear_grup+nvar_mear_count+Alternative_all-num_nominal);
                            
                            pair_nn_count = pair_nn_count + 1;
                            if(g1 == 1);
                                R_GG[1:M_mat_Track[1,g1],nvar_mear_ordl+nvar_mear_grup+nvar_mear_count+1:nvar_mear_ordl+nvar_mear_grup+nvar_mear_count+All_Nominal[1,g1]-1] = eye(All_Nominal[1,g1]-1);
                            else;
                                R_GG[1:M_mat_Track[1,g1],nvar_mear_ordl+nvar_mear_grup+nvar_mear_count+M_mat_Track_csum[g1-1,1]+1:nvar_mear_ordl+nvar_mear_grup+nvar_mear_count+M_mat_Track_csum[g1,1]] = eye(All_Nominal[1,g1]-1);
                            endif;
                            
                            R_GG[M_mat_Track[1,g1]+1:rows(R_GG),nvar_mear_ordl+nvar_mear_grup+nvar_mear_count+M_mat_Track_csum[g2-1,1]+1:nvar_mear_ordl+nvar_mear_grup+nvar_mear_count+M_mat_Track_csum[g2,1]] = eye(All_Nominal[1,g2]-1);
                            
                            mean_gu    = -(R_GG*Mean_changed);
                            mean_gu_d  = -(R_GG*Mean_changed_d);
                            
                            var_gu     = R_GG*Error_changed*R_GG';
                            
                            om  = sqrt(diag(var_gu));
                            mean_final = mean_gu./om;
                            
                            var_final      = corrvc(var_gu);
                            var_final      = diagrv(var_final,ones(All_Nominal[1,g1]+All_Nominal[1,g2]-2,1));
                            
                            mean_final_d  = (mean_gu_d)./om;
                            
                            num_element = All_Nominal[1,g1] + All_Nominal[1,g2] - 2	;
                            
                            if(Store_nn[pair_nn_count,1] > upper_limit);
                                p4_dd = p4_dd + ( (1/Store_nn[pair_nn_count,1]) *  (Store_nn[pair_nn_count,2:num_element+1] * mean_final_d)  )  ;
                            endif;
                            
                            clear R_GG,mean_gu,var_gu,om,mean_final,var_final,mean_final_d;
                        endfor;
                    endfor;
                elseif(nvar_ogc == 0 and num_nominal == 1);
                    pair_nn_count = pair_nn_count + 1;
                    
                    mean_gu    = - Mean_changed[nvar_ogc+1:rows(Mean_changed)];
                    var_gu     =   Error_changed[nvar_ogc+1:rows(Error_changed),nvar_ogc+1:cols(Error_changed)];
                    
                    om  = sqrt(diag(var_gu));
                    mean_gu_final = mean_gu./om;
                    var_gu_final = corrvc(var_gu);
                    var_gu_final = diagrv(var_gu_final,ones((All_Nominal[1,1]-1),1));
                    
                    mean_gu_d        =      -Mean_changed_d[nvar_ogc+1:rows(Mean_changed_d)];
                    mean_gu_final_d  = (mean_gu_d)./om;
                    
                    num_element = (All_Nominal[1,1]-1);
                    if(Store_nn[pair_nn_count,1] > upper_limit);
                        p4_dd = ( (1/Store_nn[pair_nn_count,1]) *  (Store_nn[pair_nn_count,2:num_element+1] * mean_gu_final_d)  )  ;
                    endif;
                    clear mean_gu,var_gu,om,mean_gu_final,var_gu_final,mean_gu_d,mean_gu_final_d;
                endif;
                
                
                gg = p1_dd + p2_dd + p3_dd + p4_dd;
                gg_temp = gg_temp | gg;
                
                clear Lambda_mat,M,B_Tild,Error_Tild,Mean_changed,Error_changed,BU_Tild,Error_YU_Tild,Error_U_Tild,Error_Y,Diff_Mean,BU_Tild_d,Diff_Mean_d,Mean_changed_d,B_Tild_d,gg;
            endfor;
            Beta_gradient = Beta_gradient ~ gg_temp;
            
            clear yd,Utilityd;
        endif;
    endfor;
    ThreadEnd;
    //--------------------------------------------------------------------Error Matrix--------------------------------------------------
    ThreadBegin;
    lamda_gradient = {};
    for ia_corr(1,All_nCholerr,1);
        
        if(_max_active[nvarmC+nvarma+ia_corr] eq 0);
            
            lamda_gradient = lamda_gradient ~ zeros(nobs,1);
            
        else;
            
            d_chol_alpha_corr1           = zeros(All_nCholerr,1);
            d_chol_alpha_corr1[ia_corr]  = 1;
            Lamdad                       = xpnd(d_chol_alpha_corr1);
            Full_error_d = D_matrix*Lamdad*D_matrix';
            
            yd = zeros(nobs,nvar_mear);
            Utilityd = zeros(nobs,Alternative_all);
            
            gg_temp = {};
            
            pair_ogc_count = 0;
            pair_ogcn_count = 0;
            pair_nn_count = 0;
            
            for i(1,nobs,1);
                U_Y = {};
                U_Yd = {};
                gg = 0;
                p1_dd = 0;
                
                U_Y   = U_Y   | Y[i,.]' | Utility[i,.]';
                U_Yd   = U_Yd | yd[i,.]'| Utilityd[i,.]';
                
                M = zeros(nvar_mear+Alternative_all-num_nominal,nvar_mear+Alternative_all);
                M[1:nvar_mear,1:nvar_mear] = eye(nvar_mear);
                
                Alt_chosen = (dta[i,Altchm])';
                
                for j(1,num_nominal,1);
                    iden_matrix = eye(All_Nominal[1,j]-1);
                    one_negative = -1*ones(All_Nominal[1,j]-1,1);
                    if(Alt_chosen[j] eq 1);
                        temp1 = one_negative ~ iden_matrix;
                    elseif(Alt_chosen[j] eq All_Nominal[1,j]);
                        temp1 = iden_matrix ~ one_negative;
                    else;
                        ch = Alt_chosen[j];
                        temp1 = iden_matrix[.,1:ch-1] ~ one_negative ~ iden_matrix[.,ch:All_Nominal[1,j]-1];
                    endif;
                    
                    if(j == 1);
                        M[nvar_mear+1:nvar_mear+All_Nominal[1,j]-1,nvar_mear+1:nvar_mear+All_Nominal[1,j]] = temp1;
                    else;
                        M[nvar_mear+M_mat_Track_csum[j-1,1]+1:nvar_mear+M_mat_Track_csum[j,1],nvar_mear+Nominal_csum[j-1,1]+1:nvar_mear+Nominal_csum[j-1,1]+All_Nominal[1,j]] = temp1;
                    endif;
                    
                    clear temp1;
                endfor;
                
                B_Tild = M * U_Y;
                Error_Tild = M * Full_error * M';
                
                B_Tild_d = M * U_Yd;
                Error_Tild_d = M * Full_error_d * M';
                
                BU_Tild       = B_Tild[nvar_mear_cont+1:rows(B_Tild)];
                
                if(nvar_mear_cont > 0);
                    Error_YU_Tild = Error_Tild[nvar_mear_cont+1:rows(Error_Tild),1:nvar_mear_cont];
                endif;
                Error_U_Tild  = Error_Tild[nvar_mear_cont+1:rows(Error_Tild),nvar_mear_cont+1:cols(Error_Tild)];
                
                if(nvar_mear_cont > 0);
                    Error_Y       = Error_Tild[1:nvar_mear_cont,1:nvar_mear_cont];
                    Diff_Mean     = (dta[i,Continous_Index])';
                    Diff_Mean_mu  = B_Tild[1:nvar_mear_cont];
                endif;
                
                if(nvar_mear_cont > 0);
                    Mean_changed =  BU_Tild + ( Error_YU_Tild * inv(Error_Y) * (Diff_Mean-Diff_Mean_mu) );
                    Error_changed = Error_U_Tild - ( Error_YU_Tild * inv(Error_Y) *  Error_YU_Tild');
                else;
                    Mean_changed =  BU_Tild ;
                    Error_changed = Error_U_Tild ;
                endif;
                
                BU_Tild_d        = B_Tild_d[nvar_mear_cont+1:rows(B_Tild_d)];
                
                if(nvar_mear_cont > 0);
                    Error_YU_Tild_d  = Error_Tild_d[nvar_mear_cont+1:rows(Error_Tild_d),1:nvar_mear_cont];
                endif;
                Error_U_Tild_d   = Error_Tild_d[nvar_mear_cont+1:rows(Error_Tild_d),nvar_mear_cont+1:cols(Error_Tild_d)];
                
                if(nvar_mear_cont > 0);
                    Error_Y_d        = Error_Tild_d[1:nvar_mear_cont,1:nvar_mear_cont];
                    Diff_Mean_d      = zeros(nvar_mear_cont,1);
                    Diff_Mean_mu_d   = B_Tild_d[1:nvar_mear_cont];
                endif;
                
                if(nvar_mear_cont > 0);
                    Mean_changed_d  =  BU_Tild_d + ( Error_YU_Tild_d * inv(Error_Y) * (Diff_Mean-Diff_Mean_mu) )  - ( Error_YU_Tild * inv(Error_Y) * Error_Y_d * inv(Error_Y) * (Diff_Mean-Diff_Mean_mu) ) + ( Error_YU_Tild * inv(Error_Y) * Diff_Mean_d  )- ( Error_YU_Tild * inv(Error_Y) * Diff_Mean_mu_d );
                    Error_changed_d = Error_U_Tild_d - ( Error_YU_Tild_d * inv(Error_Y) *  Error_YU_Tild') + (Error_YU_Tild * inv(Error_Y) * Error_Y_d * inv(Error_Y) *  Error_YU_Tild') - ( Error_YU_Tild * inv(Error_Y) *  Error_YU_Tild_d');
                else;
                    Mean_changed_d  =  BU_Tild_d ;
                    Error_changed_d = Error_U_Tild_d;
                endif;
                
                Curr_Lower_Threshold = {};
                Curr_Upper_Threshold = {};
                
                if(nvar_mear_ordl > 0);
                    Curr_Lower_Threshold = Curr_Lower_Threshold ~ lower_threshold_matrix[i,.] ;
                    Curr_Upper_Threshold = Curr_Upper_Threshold ~ upper_threshold_matrix[i,.] ;
                endif;
                
                if(nvar_mear_grup > 0);
                    Curr_Lower_Threshold = Curr_Lower_Threshold ~ Category_matrix_lower[i,.] ;
                    Curr_Upper_Threshold = Curr_Upper_Threshold ~ Category_matrix_upper[i,.] ;
                endif;
                
                if(nvar_mear_count > 0);
                    Curr_Lower_Threshold = Curr_Lower_Threshold ~ Count_Threshold[i,1:nvar_mear_count] ;
                    Curr_Upper_Threshold = Curr_Upper_Threshold ~ Count_Threshold[i,nvar_mear_count+1:2*nvar_mear_count] ;
                endif;
                
                Curr_Lower_Threshold = Curr_Lower_Threshold ~ (negative_infinity*ones(1,Alternative_all-num_nominal)) ;
                Curr_Upper_Threshold = Curr_Upper_Threshold ~ (zeros(1,Alternative_all-num_nominal));
                
                
                if(nvar_mear_cont > 0);
                    p1 = pdfmvn(Diff_Mean,Diff_Mean_mu,Error_Y);
                    p1_d = pdfgcov(Diff_Mean,Diff_Mean_mu,vech(Error_Y));
                    
                    if(p1 > upper_limit);
                        p1_dd = (1/p1)*(p1_d' * vech(Error_Y_d));
                    endif;
                endif;
                
                if(nvar_ogc > 1);
                    p2_dd = 0;
                    for g1(1,nvar_mear_ordl+nvar_mear_grup+nvar_mear_count-1,1);
                        for g2(g1+1,nvar_mear_ordl+nvar_mear_grup+nvar_mear_count,1);
                            
                            pair_ogc_count = pair_ogc_count + 1;
                            
                            om_low_g1   =   Error_changed[g1,g1];
                            om_low_g2   =   Error_changed[g2,g2];
                            om_up_g1    =   Error_changed[g1,g1];
                            om_up_g2    =   Error_changed[g2,g2];
                            
                            omncd_low_g1   =   Error_changed_d[g1,g1];
                            omncd_low_g2   =   Error_changed_d[g2,g2];
                            omncd_up_g1    =   Error_changed_d[g1,g1];
                            omncd_up_g2    =   Error_changed_d[g2,g2];
                            
                            rho_low_g1md  =  - Mean_changed_d[g1] ;
                            rho_low_g2md  =  - Mean_changed_d[g2] ;
                            rho_up_g1md   =  - Mean_changed_d[g1] ;
                            rho_up_g2md   =  - Mean_changed_d[g2] ;
                            
                            rho_low_g1m  =  (Curr_Lower_Threshold[1,g1] - Mean_changed[g1] ) ;
                            rho_low_g2m  =  (Curr_Lower_Threshold[1,g2] - Mean_changed[g2] ) ;
                            rho_up_g1m   =  (Curr_Upper_Threshold[1,g1] - Mean_changed[g1] ) ;
                            rho_up_g2m   =  (Curr_Upper_Threshold[1,g2] - Mean_changed[g2] ) ;
                            
                            rho_low_g1d =  ( sqrt(om_low_g1)*  rho_low_g1md -  rho_low_g1m * omncd_low_g1 ./ sqrt(om_low_g1) ./2   ) ./ (om_low_g1);
                            rho_low_g2d =  ( sqrt(om_low_g2)*  rho_low_g2md -  rho_low_g2m * omncd_low_g2 ./ sqrt(om_low_g2) ./2   ) ./ (om_low_g2);
                            rho_up_g1d =   ( sqrt(om_up_g1)*   rho_up_g1md -   rho_up_g1m *  omncd_up_g1 ./ sqrt(om_up_g1)   ./2   ) ./ (om_up_g1);
                            rho_up_g2d =   ( sqrt(om_up_g2)*   rho_up_g2md -   rho_up_g2m *  omncd_up_g2 ./ sqrt(om_up_g2)   ./2   ) ./ (om_up_g2);
                            
                            var_g1g2_d    =   ( ( sqrt(Error_changed[g1,g1]) * sqrt(Error_changed[g2,g2]) ) * Error_changed_d[g1,g2] + (Error_changed[g1,g2]/2) * ( ( sqrt(Error_changed[g1,g1])/sqrt(Error_changed[g2,g2]) )*Error_changed_d[g2,g2] + ( sqrt(Error_changed[g2,g2])/sqrt(Error_changed[g1,g1]) )*Error_changed_d[g1,g1] ) ) / ( Error_changed[g1,g1] * Error_changed[g2,g2]);
                            
                            p2_temp11 = rho_up_g1d | rho_up_g2d | var_g1g2_d;
                            p2_temp22 = rho_up_g1d | rho_low_g2d | var_g1g2_d;
                            p2_temp33 = rho_low_g1d | rho_up_g2d | var_g1g2_d;
                            p2_temp44 = rho_low_g1d | rho_low_g2d | var_g1g2_d;
                            
                            if(Store_ogc[pair_ogc_count,13] > upper_limit);
                                p2_dd = p2_dd + ( (1/Store_ogc[pair_ogc_count,13])*( (Store_ogc[pair_ogc_count,1:3] * p2_temp11) - (Store_ogc[pair_ogc_count,4:6] * p2_temp22) - (Store_ogc[pair_ogc_count,7:9] * p2_temp33) + (Store_ogc[pair_ogc_count,10:12] * p2_temp44) ) );
                            endif;
                            
                            
                            clear rho_low_g1,rho_low_g2,rho_up_g1,rho_up_g2,var_g1g2,p2_temp,rho_low_g1d,rho_low_g2d,rho_up_g1d,rho_up_g2d,p2_temp1,p2_temp2,p2_temp3,p2_temp4,p2_temp11,p2_temp22,p2_temp33,p2_temp44;
                            clear om_low_g1,om_low_g2,om_up_g1,om_up_g2,omncd_low_g1,omncd_low_g2,omncd_up_g1,omncd_up_g2,rho_low_g1md,rho_low_g2md,rho_up_g1md,rho_up_g2md,rho_low_g1m,rho_low_g2m,rho_up_g1m,rho_up_g2m,var_g1g2_d ;
                        endfor;
                    endfor;
                else;
                    p2_dd = 0;
                endif;
                
                if(nvar_ogc > 0);
                    p3_dd = 0;
                    for v1(1,nvar_mear_ordl+nvar_mear_grup+nvar_mear_count,1);
                        for g1(1,num_nominal,1);
                            D_VG = zeros(All_Nominal[1,g1],(nvar_mear_ordl+nvar_mear_grup+nvar_mear_count+Alternative_all-num_nominal));
                            D_VG[1,v1] = 1;
                            
                            pair_ogcn_count = pair_ogcn_count + 1;
                            if(g1 == 1);
                                D_VG[2:rows(D_VG),nvar_mear_ordl+nvar_mear_grup+nvar_mear_count+1:nvar_mear_ordl+nvar_mear_grup+nvar_mear_count+All_Nominal[1,g1]-1] = eye(All_Nominal[1,g1]-1);
                            else;
                                D_VG[2:rows(D_VG),nvar_mear_ordl+nvar_mear_grup+nvar_mear_count+M_mat_Track_csum[g1-1,1]+1:nvar_mear_ordl+nvar_mear_grup+nvar_mear_count+M_mat_Track_csum[g1,1]] = eye(All_Nominal[1,g1]-1);
                            endif;
                            
                            
                            rho_low_g3 = D_VG*Curr_Lower_Threshold';
                            rho_up_g3  = D_VG*Curr_Upper_Threshold';
                            
                            mean_gu    = D_VG*Mean_changed;
                            var_gu     = D_VG*Error_changed*D_VG';
                            
                            mean_gu_d  = D_VG*Mean_changed_d;
                            var_gu_d   = D_VG*Error_changed_d*D_VG';
                            
                            om     =  (diag(var_gu));
                            omncd  = (diag(var_gu_d));
                            
                            mean_low_final = (rho_low_g3 - mean_gu)./sqrt(om);
                            mean_up_final  = (rho_up_g3 - mean_gu)./sqrt(om);
                            
                            var_final      = corrvc(var_gu);
                            var_final      = diagrv(var_final,ones(All_Nominal[1,g1],1));
                            
                            mean_low_final_d = (  - sqrt(om') .* mean_gu_d' - (rho_low_g3 - mean_gu)' .* omncd' ./ sqrt(om') ./2   ) ./ (om');
                            mean_up_final_d  = (  - sqrt(om') .* mean_gu_d' - (rho_up_g3 - mean_gu)' .* omncd' ./ sqrt(om') ./2   ) ./ (om');
                            
                            var_final_d      = ( (var_gu_d./sqrt(om))' ./ sqrt(om) ) - 0.5 * ( (var_gu ./(om^(3/2)) .* omncd )' ./(om^(1/2))   + ((var_gu ./(om^(1/2)) )' ./(om^(3/2))) .* omncd ) ;
                            var_final_d      = diagrv(var_final_d ,ones(All_Nominal[1,g1],1));
                            
                            
                            shi_r_unq = {};
                            for ishi(1,rows(var_final_d)-1,1);
                                shi_r_unq = shi_r_unq ~ var_final_d[ishi,ishi+1:cols(var_final_d)];
                            endfor;
                            
                            if(Store_ogcn[pair_ogcn_count,1] > upper_limit);
                                p3_dd = p3_dd + ( (1/Store_ogcn[pair_ogcn_count,1]) *  ( Store_ogcn[pair_ogcn_count,2:1+cols(mean_up_final_d)] * mean_up_final_d' + Store_ogcn[pair_ogcn_count,1+cols(mean_up_final_d)+1:1+cols(mean_up_final_d)+cols(shi_r_unq)] * shi_r_unq' )  )  ;
                            endif;
                            
                            
                            clear rho_low_g3,rho_up_g3,mean_gu,var_gu,om,mean_low_final,mean_up_final,var_final,diff_cdf,mean_gu_d,mean_low_final_d,mean_up_final_d,w1,g11,w2,g2;
                            clear omncd,var_gu_d,var_final_d,shi_r_unq;
                        endfor;
                    endfor;
                else;
                    p3_dd = 0;
                endif;
                
                
                p4_dd = 0;
                if(num_nominal > 1);
                    for g1(1,num_nominal-1,1);
                        for g2(g1+1,num_nominal,1);
                            R_GG = zeros(All_Nominal[1,g1]+All_Nominal[1,g2]-2,nvar_mear_ordl+nvar_mear_grup+nvar_mear_count+Alternative_all-num_nominal);
                            
                            pair_nn_count = pair_nn_count + 1;
                            if(g1 == 1);
                                R_GG[1:M_mat_Track[1,g1],nvar_mear_ordl+nvar_mear_grup+nvar_mear_count+1:nvar_mear_ordl+nvar_mear_grup+nvar_mear_count+All_Nominal[1,g1]-1] = eye(All_Nominal[1,g1]-1);
                            else;
                                R_GG[1:M_mat_Track[1,g1],nvar_mear_ordl+nvar_mear_grup+nvar_mear_count+M_mat_Track_csum[g1-1,1]+1:nvar_mear_ordl+nvar_mear_grup+nvar_mear_count+M_mat_Track_csum[g1,1]] = eye(All_Nominal[1,g1]-1);
                            endif;
                            
                            R_GG[M_mat_Track[1,g1]+1:rows(R_GG),nvar_mear_ordl+nvar_mear_grup+nvar_mear_count+M_mat_Track_csum[g2-1,1]+1:nvar_mear_ordl+nvar_mear_grup+nvar_mear_count+M_mat_Track_csum[g2,1]] = eye(All_Nominal[1,g2]-1);
                            
                            mean_gu    = -(R_GG*Mean_changed);
                            mean_gu_d  = -(R_GG*Mean_changed_d);
                            
                            var_gu     = R_GG*Error_changed*R_GG';
                            var_gu_d   = R_GG*Error_changed_d*R_GG';
                            
                            om     = (diag(var_gu));
                            omncd  = (diag(var_gu_d));
                            
                            mean_final = mean_gu./sqrt(om);
                            
                            var_final      = corrvc(var_gu);
                            var_final      = diagrv(var_final,ones(All_Nominal[1,g1]+All_Nominal[1,g2]-2,1));
                            
                            mean_final_d  = (  sqrt(om') .* mean_gu_d' -  mean_gu' .* omncd' ./ sqrt(om') ./2   ) ./ (om');
                            var_final_d      = ( (var_gu_d./sqrt(om))' ./ sqrt(om) ) - 0.5 * ( (var_gu ./(om^(3/2)) .* omncd )' ./(om^(1/2))   + ((var_gu ./(om^(1/2)) )' ./(om^(3/2))) .* omncd ) ;
                            var_final_d      = diagrv(var_final_d ,ones(All_Nominal[1,g1]+All_Nominal[1,g2]-2,1));
                            
                            shi_r_unq = {};
                            for ishi(1,rows(var_final_d)-1,1);
                                shi_r_unq = shi_r_unq ~ var_final_d[ishi,ishi+1:cols(var_final_d )];
                            endfor;
                            
                            num_element = All_Nominal[1,g1] + All_Nominal[1,g2] - 2	;
                            
                            if(Store_nn[pair_nn_count,1] > upper_limit);
                                p4_dd = p4_dd + ( (1/Store_nn[pair_nn_count,1]) *  ( Store_nn[pair_nn_count,2:1+num_element] * mean_final_d' + Store_nn[pair_nn_count,1+num_element+1:1+num_element+cols(shi_r_unq)] * shi_r_unq' )  )  ;
                            endif;
                            
                            clear R_GG,mean_gu,var_gu,om,mean_final,var_final,mean_final_d,var_gu_d,var_final_d,shi_r_unq;
                        endfor;
                    endfor;
                elseif(nvar_ogc == 0 and num_nominal == 1);
                    pair_nn_count = pair_nn_count + 1;
                    
                    mean_gu    = - Mean_changed[nvar_ogc+1:rows(Mean_changed)];
                    var_gu     =   Error_changed[nvar_ogc+1:rows(Error_changed),nvar_ogc+1:cols(Error_changed)];
                    
                    mean_gu_d    = - Mean_changed_d[nvar_ogc+1:rows(Mean_changed_d)];
                    var_gu_d     = Error_changed_d[nvar_ogc+1:rows(Error_changed_d),nvar_ogc+1:cols(Error_changed_d)];
                    
                    om     = (diag(var_gu));
                    omncd  = (diag(var_gu_d));
                    mean_gu_final  =   mean_gu./sqrt(om);
                    
                    var_gu_final      = corrvc(var_gu);
                    var_gu_final      = diagrv(var_gu_final,ones((All_Nominal[1,1]-1),1));
                    
                    mean_gu_final_d = (  sqrt(om') .* mean_gu_d' - ( mean_gu)' .* omncd' ./ sqrt(om') ./2   ) ./ (om');
                    
                    
                    var_gu_final_d      = ( (var_gu_d./sqrt(om))' ./ sqrt(om) ) - 0.5 * ( (var_gu ./(om^(3/2)) .* omncd )' ./(om^(1/2))   + ((var_gu ./(om^(1/2)) )' ./(om^(3/2))) .* omncd ) ;
                    var_gu_final_d      = diagrv(var_gu_final_d ,ones((All_Nominal[1,1]-1),1));
                    
                    if(All_Nominal[1,1] > 2);
                        shi_r_unq = {};
                        for ishi(1,rows(var_gu_final_d)-1,1);
                            shi_r_unq = shi_r_unq ~ var_gu_final_d[ishi,ishi+1:cols(var_gu_final_d )];
                        endfor;
                    else;
                        shi_r_unq = 0;
                    endif;
                    
                    num_element = (All_Nominal[1,1]-1);
                    
                    if(Store_nn[pair_nn_count,1] > upper_limit);
                        p4_dd = ( (1/Store_nn[pair_nn_count,1]) *  ( Store_nn[pair_nn_count,2:1+num_element] * mean_gu_final_d' + Store_nn[pair_nn_count,1+num_element+1:1+num_element+cols(shi_r_unq)] * shi_r_unq' )  )  ;
                    endif;
                    clear mean_gu,var_gu,mean_gu_d,var_gu_d,om,omncd,mean_gu_final,var_gu_final,mean_gu_final_d,var_gu_final_d,shi_r_unq,w1,g1;
                endif;
                
                gg = p1_dd + p2_dd + p3_dd + p4_dd;
                gg_temp = gg_temp | gg;
                
                clear Lambda_mat,M,B_Tild,Error_Tild,Mean_changed,Error_changed,BU_Tild,Error_YU_Tild,Error_U_Tild,Error_Y,Diff_Mean,BU_Tild_d,Diff_Mean_d,Mean_changed_d,B_Tild_d,gg;
            endfor;
            lamda_gradient = lamda_gradient ~ gg_temp;
            
            clear yd,Utilityd;
        endif;
    endfor;
    ThreadEnd;
    //------------------------------------Upper Threshold Gradient-------------------------------------------------
    ThreadBegin;
    if(nvar_mear_ordl > 0);
        upper_threshold_gradient = {};
        for iupper_th(1,num_ordl_cat_req,1);
            if(_max_active[nvarmC+nvarma+All_nCholerr+iupper_th] == 0);
                upper_threshold_gradient = upper_threshold_gradient ~ zeros(nobs,1);
            else;
                yd = zeros(nobs,nvar_mear);
                Utilityd = zeros(nobs,Alternative_all);
                
                upper_threshold_d = zeros(num_ordl_cat_req,1);
                upper_threshold_d[iupper_th] = 1;
                
                upper_threshold_K1_d   = zeros(nvar_mear_ordl,Highest_scale);
                for i(1,nvar_mear_ordl,1);
                    if(i==1);
                        upper_threshold_K1_d[i,1:num_ordl_cat_req1[i]] = (upper_threshold_d[1:num_ordl_cat_req_csum[i]])';
                    else;
                        upper_threshold_K1_d[i,1:num_ordl_cat_req1[i]] = (upper_threshold_d[num_ordl_cat_req_csum[i-1]+1:num_ordl_cat_req_csum[i]])';
                    endif;
                endfor;
                
                upper_threshold_d = upper_threshold_K1_d;
                for i(1,nvar_mear_ordl,1);
                    if(num_ordl_cat_req1[i] < Highest_scale);
                        upper_threshold_d[i,num_ordl_cat_req1[i]+1:Highest_scale] = positive_infinity_d*ones(1,Highest_scale-num_ordl_cat_req1[i]);
                    endif;
                endfor;
                
                
                upper_threshold_d = negative_infinity_d*ones(nvar_mear_ordl,1) ~ zeros(nvar_mear_ordl,1) ~ upper_threshold_d ~ positive_infinity_d*ones(nvar_mear_ordl,1);
                
                lower_threshold_matrix_d = zeros(nind,nvar_mear_ordl);
                upper_threshold_matrix_d = zeros(nind,nvar_mear_ordl);
                
                for i(1,nobs,1);
                    for j(1,nvar_mear_ordl,1);
                        for k(1,num_ordl_cat[j],1);
                            if(dta[i,Ordinal_Index[j]] == k);
                                lower_threshold_matrix_d[i,j] = upper_threshold_d[j,k];
                                upper_threshold_matrix_d[i,j] = upper_threshold_d[j,k+1];
                            endif;
                        endfor;
                    endfor;
                endfor;
                
                
                gg_temp = {};
                pair_ogc_count = 0;
                pair_ogcn_count = 0;
                pair_nn_count = 0;
                
                for i(1,nobs,1);
                    U_Y = {};
                    U_Yd = {};
                    gg = 0;
                    p1_dd = 0;
                    
                    U_Y   = U_Y   | Y[i,.]' | Utility[i,.]';
                    U_Yd   = U_Yd | yd[i,.]'| Utilityd[i,.]';
                    
                    M = zeros(nvar_mear+Alternative_all-num_nominal,nvar_mear+Alternative_all);
                    M[1:nvar_mear,1:nvar_mear] = eye(nvar_mear);
                    
                    Alt_chosen = (dta[i,Altchm])';
                    
                    for j(1,num_nominal,1);
                        iden_matrix = eye(All_Nominal[1,j]-1);
                        one_negative = -1*ones(All_Nominal[1,j]-1,1);
                        if(Alt_chosen[j] eq 1);
                            temp1 = one_negative ~ iden_matrix;
                        elseif(Alt_chosen[j] eq All_Nominal[1,j]);
                            temp1 = iden_matrix ~ one_negative;
                        else;
                            ch = Alt_chosen[j];
                            temp1 = iden_matrix[.,1:ch-1] ~ one_negative ~ iden_matrix[.,ch:All_Nominal[1,j]-1];
                        endif;
                        
                        if(j == 1);
                            M[nvar_mear+1:nvar_mear+All_Nominal[1,j]-1,nvar_mear+1:nvar_mear+All_Nominal[1,j]] = temp1;
                        else;
                            M[nvar_mear+M_mat_Track_csum[j-1,1]+1:nvar_mear+M_mat_Track_csum[j,1],nvar_mear+Nominal_csum[j-1,1]+1:nvar_mear+Nominal_csum[j-1,1]+All_Nominal[1,j]] = temp1;
                        endif;
                        
                        clear temp1;
                    endfor;
                    
                    B_Tild = M * U_Y;
                    B_Tild_d = M * U_Yd;
                    Error_Tild = M * Full_error * M';
                    
                    BU_Tild       = B_Tild[nvar_mear_cont+1:rows(B_Tild)];
                    
                    if(nvar_mear_cont > 0);
                        Error_YU_Tild = Error_Tild[nvar_mear_cont+1:rows(Error_Tild),1:nvar_mear_cont];
                    endif;
                    Error_U_Tild  = Error_Tild[nvar_mear_cont+1:rows(Error_Tild),nvar_mear_cont+1:cols(Error_Tild)];
                    
                    if(nvar_mear_cont > 0);
                        Error_Y       = Error_Tild[1:nvar_mear_cont,1:nvar_mear_cont];
                        Diff_Mean     = (dta[i,Continous_Index])';
                        Diff_Mean_mu  = B_Tild[1:nvar_mear_cont];
                    endif;
                    
                    if(nvar_mear_cont > 0);
                        Mean_changed =  BU_Tild + ( Error_YU_Tild * inv(Error_Y) * (Diff_Mean-Diff_Mean_mu) );
                        Error_changed = Error_U_Tild - ( Error_YU_Tild * inv(Error_Y) *  Error_YU_Tild');
                    else;
                        Mean_changed =  BU_Tild ;
                        Error_changed = Error_U_Tild ;
                    endif;
                    
                    BU_Tild_d        = B_Tild_d[nvar_mear_cont+1:rows(B_Tild_d)];
                    if(nvar_mear_cont > 0);
                        Diff_Mean_d      = zeros(nvar_mear_cont,1);
                        Diff_Mean_mu_d   = B_Tild_d[1:nvar_mear_cont];
                    endif;
                    
                    if(nvar_mear_cont > 0);
                        Mean_changed_d =  BU_Tild_d + ( Error_YU_Tild * inv(Error_Y) * Diff_Mean_d ) - ( Error_YU_Tild * inv(Error_Y) * Diff_Mean_mu_d );
                    else;
                        Mean_changed_d =  BU_Tild_d ;
                    endif;
                    
                    
                    Curr_Lower_Threshold = {};
                    Curr_Upper_Threshold = {};
                    
                    Curr_Lower_Threshold = Curr_Lower_Threshold ~ lower_threshold_matrix[i,.] ;
                    Curr_Upper_Threshold = Curr_Upper_Threshold ~ upper_threshold_matrix[i,.] ;
                    
                    if(nvar_mear_grup > 0);
                        Curr_Lower_Threshold = Curr_Lower_Threshold ~ Category_matrix_lower[i,.] ;
                        Curr_Upper_Threshold = Curr_Upper_Threshold ~ Category_matrix_upper[i,.] ;
                    endif;
                    
                    if(nvar_mear_count > 0);
                        Curr_Lower_Threshold = Curr_Lower_Threshold ~ Count_Threshold[i,1:nvar_mear_count] ;
                        Curr_Upper_Threshold = Curr_Upper_Threshold ~ Count_Threshold[i,nvar_mear_count+1:2*nvar_mear_count] ;
                    endif;
                    
                    Curr_Lower_Threshold = Curr_Lower_Threshold ~ (negative_infinity*ones(1,Alternative_all-num_nominal)) ;
                    Curr_Upper_Threshold = Curr_Upper_Threshold ~ (zeros(1,Alternative_all-num_nominal));
                    
                    Curr_Lower_Threshold_d = {};
                    Curr_Upper_Threshold_d = {};
                    
                    Curr_Lower_Threshold_d = Curr_Lower_Threshold_d ~ lower_threshold_matrix_d[i,.] ;
                    Curr_Upper_Threshold_d = Curr_Upper_Threshold_d ~ upper_threshold_matrix_d[i,.] ;
                    
                    if(nvar_mear_grup > 0);
                        Curr_Lower_Threshold_d = Curr_Lower_Threshold_d ~ 0*Category_matrix_lower[i,.] ;
                        Curr_Upper_Threshold_d = Curr_Upper_Threshold_d ~ 0*Category_matrix_upper[i,.] ;
                    endif;
                    
                    if(nvar_mear_count > 0);
                        Curr_Lower_Threshold_d = Curr_Lower_Threshold_d ~ 0*Count_Threshold[i,1:nvar_mear_count] ;
                        Curr_Upper_Threshold_d = Curr_Upper_Threshold_d ~ 0*Count_Threshold[i,nvar_mear_count+1:2*nvar_mear_count] ;
                    endif;
                    
                    Curr_Lower_Threshold_d = Curr_Lower_Threshold_d ~ (zeros(1,Alternative_all-num_nominal)) ;
                    Curr_Upper_Threshold_d = Curr_Upper_Threshold_d ~ (zeros(1,Alternative_all-num_nominal));
                    
                    if(nvar_mear_cont > 0);
                        p1 = pdfmvn(Diff_Mean,Diff_Mean_mu,Error_Y);
                        p1_d = pdfgmean(Diff_Mean,Diff_Mean_mu,Error_Y);
                        
                        if(p1 > upper_limit);
                            p1_dd = (1/p1)*(p1_d' * (Diff_Mean_d-Diff_Mean_mu_d));
                        endif;
                    endif;
                    
                    
                    if(nvar_ogc > 1);
                        p2_dd = 0;
                        for g1(1,nvar_mear_ordl+nvar_mear_grup+nvar_mear_count-1,1);
                            for g2(g1+1,nvar_mear_ordl+nvar_mear_grup+nvar_mear_count,1);
                                
                                pair_ogc_count = pair_ogc_count + 1;
                                
                                rho_low_g1d =  (Curr_Lower_Threshold_d[1,g1] - Mean_changed_d[g1] ) / sqrt(Error_changed[g1,g1]);
                                rho_low_g2d =  (Curr_Lower_Threshold_d[1,g2] - Mean_changed_d[g2] ) / sqrt(Error_changed[g2,g2]);
                                rho_up_g1d =   (Curr_Upper_Threshold_d[1,g1] - Mean_changed_d[g1] ) / sqrt(Error_changed[g1,g1]);
                                rho_up_g2d =   (Curr_Upper_Threshold_d[1,g2] - Mean_changed_d[g2] ) / sqrt(Error_changed[g2,g2]);
                                
                                p2_temp11 = rho_up_g1d | rho_up_g2d | 0;
                                p2_temp22 = rho_up_g1d | rho_low_g2d | 0;
                                p2_temp33 = rho_low_g1d | rho_up_g2d | 0;
                                p2_temp44 = rho_low_g1d | rho_low_g2d | 0;
                                
                                if(Store_ogc[pair_ogc_count,13] > upper_limit);
                                    p2_dd = p2_dd + ( (1/Store_ogc[pair_ogc_count,13])*( (Store_ogc[pair_ogc_count,1:3] * p2_temp11) - (Store_ogc[pair_ogc_count,4:6] * p2_temp22) - (Store_ogc[pair_ogc_count,7:9] * p2_temp33) + (Store_ogc[pair_ogc_count,10:12] * p2_temp44) ) );
                                endif;
                                clear rho_low_g1,rho_low_g2,rho_up_g1,rho_up_g2,var_g1g2,p2_temp,rho_low_g1d,rho_low_g2d,rho_up_g1d,rho_up_g2d,p2_temp1,p2_temp2,p2_temp3,p2_temp4,p2_temp11,p2_temp22,p2_temp33,p2_temp44;
                            endfor;
                        endfor;
                    else;
                        p2_dd = 0 ;
                    endif;
                    
                    
                    p3_dd = 0;
                    for v1(1,nvar_mear_ordl+nvar_mear_grup+nvar_mear_count,1);
                        for g1(1,num_nominal,1);
                            D_VG = zeros(All_Nominal[1,g1],(nvar_mear_ordl+nvar_mear_grup+nvar_mear_count+Alternative_all-num_nominal));
                            D_VG[1,v1] = 1;
                            
                            pair_ogcn_count = pair_ogcn_count + 1;
                            if(g1 == 1);
                                D_VG[2:rows(D_VG),nvar_mear_ordl+nvar_mear_grup+nvar_mear_count+1:nvar_mear_ordl+nvar_mear_grup+nvar_mear_count+All_Nominal[1,g1]-1] = eye(All_Nominal[1,g1]-1);
                            else;
                                D_VG[2:rows(D_VG),nvar_mear_ordl+nvar_mear_grup+nvar_mear_count+M_mat_Track_csum[g1-1,1]+1:nvar_mear_ordl+nvar_mear_grup+nvar_mear_count+M_mat_Track_csum[g1,1]] = eye(All_Nominal[1,g1]-1);
                            endif;
                            
                            rho_low_g3 = D_VG*Curr_Lower_Threshold';
                            rho_up_g3  = D_VG*Curr_Upper_Threshold';
                            
                            rho_low_g3_d = D_VG*Curr_Lower_Threshold_d';
                            rho_up_g3_d  = D_VG*Curr_Upper_Threshold_d';
                            
                            mean_gu    = D_VG*Mean_changed;
                            var_gu     = D_VG*Error_changed*D_VG';
                            
                            mean_gu_d  = D_VG*Mean_changed_d;
                            
                            om  = sqrt(diag(var_gu));
                            mean_low_final = (rho_low_g3 - mean_gu)./om;
                            mean_up_final  = (rho_up_g3 - mean_gu)./om;
                            
                            var_final      = corrvc(var_gu);
                            var_final      = diagrv(var_final,ones(All_Nominal[1,g1],1));
                            
                            mean_low_final_d = (rho_low_g3_d - mean_gu_d)./om;
                            mean_up_final_d  = (rho_up_g3_d - mean_gu_d)./om;
                            
                            if(Store_ogcn[pair_ogcn_count,1] > upper_limit);
                                p3_dd = p3_dd + ( (1/Store_ogcn[pair_ogcn_count,1]) *  (Store_ogcn[pair_ogcn_count,2:rows(mean_up_final_d)+1] * mean_up_final_d)  )  ;
                            endif;
                            
                            clear rho_low_g3,rho_up_g3,mean_gu,var_gu,om,mean_low_final,mean_up_final,var_final,D_VG,mean_gu_d,mean_low_final_d,mean_up_final_d;
                            clear rho_low_g3_d,rho_up_g3_d;
                        endfor;
                    endfor;
                    
                    
                    p4_dd = 0;
                    if(num_nominal > 1);
                        for g1(1,num_nominal-1,1);
                            for g2(g1+1,num_nominal,1);
                                R_GG = zeros(All_Nominal[1,g1]+All_Nominal[1,g2]-2,nvar_mear_ordl+nvar_mear_grup+nvar_mear_count+Alternative_all-num_nominal);
                                
                                pair_nn_count = pair_nn_count + 1;
                                if(g1 == 1);
                                    R_GG[1:M_mat_Track[1,g1],nvar_mear_ordl+nvar_mear_grup+nvar_mear_count+1:nvar_mear_ordl+nvar_mear_grup+nvar_mear_count+All_Nominal[1,g1]-1] = eye(All_Nominal[1,g1]-1);
                                else;
                                    R_GG[1:M_mat_Track[1,g1],nvar_mear_ordl+nvar_mear_grup+nvar_mear_count+M_mat_Track_csum[g1-1,1]+1:nvar_mear_ordl+nvar_mear_grup+nvar_mear_count+M_mat_Track_csum[g1,1]] = eye(All_Nominal[1,g1]-1);
                                endif;
                                
                                R_GG[M_mat_Track[1,g1]+1:rows(R_GG),nvar_mear_ordl+nvar_mear_grup+nvar_mear_count+M_mat_Track_csum[g2-1,1]+1:nvar_mear_ordl+nvar_mear_grup+nvar_mear_count+M_mat_Track_csum[g2,1]] = eye(All_Nominal[1,g2]-1);
                                
                                mean_gu    = -(R_GG*Mean_changed);
                                mean_gu_d  = -(R_GG*Mean_changed_d);
                                
                                var_gu     = R_GG*Error_changed*R_GG';
                                
                                om  = sqrt(diag(var_gu));
                                mean_final = mean_gu./om;
                                
                                var_final      = corrvc(var_gu);
                                var_final      = diagrv(var_final,ones(All_Nominal[1,g1]+All_Nominal[1,g2]-2,1));
                                
                                mean_final_d  = (mean_gu_d)./om;
                                
                                num_element = All_Nominal[1,g1] + All_Nominal[1,g2] - 2	;
                                
                                if(Store_nn[pair_nn_count,1] > upper_limit);
                                    p4_dd = p4_dd + ( (1/Store_nn[pair_nn_count,1]) *  (Store_nn[pair_nn_count,2:num_element+1] * mean_final_d)  )  ;
                                endif;
                                
                                
                                clear R_GG,mean_gu,var_gu,om,mean_final,var_final,mean_final_d;
                            endfor;
                        endfor;
                    endif;
                    
                    gg = p1_dd + p2_dd + p3_dd + p4_dd;
                    gg_temp = gg_temp | gg;
                    
                    clear Lambda_mat,M,B_Tild,Error_Tild,Mean_changed,Error_changed,BU_Tild,Error_YU_Tild,Error_U_Tild,Error_Y,Diff_Mean,BU_Tild_d,Diff_Mean_d,Mean_changed_d,B_Tild_d,gg;
                endfor;
                upper_threshold_gradient = upper_threshold_gradient ~ gg_temp;
                
                clear yd,Utilityd,Count_Threshold_d;
            endif;
        endfor;
    endif;
    ThreadEnd;
    //----------------------------------------Phi Gradient----------------------------------------------------------------
    ThreadBegin;
    if(nvar_mear_count > 0);
        Phi_gradient = {};
        for iphi(1,Total_Phi,1);
            if(_max_active[nvarmC+nvarma+All_nCholerr+num_ordl_cat_req+iphi] == 0);
                Phi_gradient = Phi_gradient ~ zeros(nobs,1);
            else;
                yd =  zeros(nobs,nvar_mear);
                Utilityd = zeros(nobs,Alternative_all);
                
                Phi_d = zeros(Total_Phi,1);
                Phi_d[iphi] = 1;
                
                Phi_K1_d  = zeros(nvar_mear_count,Highest_Phi);
                for i(1,nvar_mear_count,1);
                    if(i==1);
                        Phi_K1_d[i,1:Num_Phi[i]] = (Phi_d[1:num_Phi_csum[i]])';
                    else;
                        Phi_K1_d[i,1:Num_Phi[i]] = (Phi_d[num_Phi_csum[i-1]+1:num_Phi_csum[i]])';
                    endif;
                endfor;
                
                Phi_d  = Phi_K1_d;
                
                for i(1,nvar_mear_count,1);
                    if(Num_Phi[i] < Highest_Phi);
                        Phi_d[i,Num_Phi[i]+1:Highest_Phi] = zeros(1,Highest_Phi-Num_Phi[i]);
                    endif;
                endfor;
                
                xPhiMat_d = zeros(nvar_mear_count,threshCountMax+1);
                for iCnt (1,nvar_mear_count,1);
                    xPhiMat_d[iCnt,2:1+Num_Phi[iCnt]] = Phi_d[iCnt,1:Num_Phi[iCnt]];
                endfor;
                
                for iCnt (1,nvar_mear_count,1);
                    xPhiMat_d[iCnt,Num_Phi[iCnt]+2:threshCountMax+1] = Phi_d[iCnt,Num_Phi[iCnt]] .*. ones(1,threshCountMax+1-Num_Phi[iCnt]-1);
                endfor;
                
                Count_Threshold_d = zeros(nobs,nvar_mear_count*2);
                for iobs(1,nobs,1);
                    for jcount(1,nvar_mear_count,1);
                        countObs = dta[iobs,Count_Index[jcount]];
                        if(countObs gt 0);
                            phiUpper = (xPhiMat_d[jcount,countObs+1])';
                            phiLower = (xPhiMat_d[jcount,countObs])';
                        else;
                            phiUpper = 0;
                            phiLower = 0;
                        endif;
                        
                        Count_Threshold_d[iobs,jcount] = phiLower;
                        Count_Threshold_d[iobs,nvar_mear_count+jcount] = phiUpper;
                    endfor;
                endfor;
                
                
                gg_temp = {};
                pair_ogc_count = 0;
                pair_ogcn_count = 0;
                pair_nn_count = 0;
                
                for i(1,nobs,1);
                    U_Y = {};
                    U_Yd = {};
                    gg = 0;
                    p1_dd = 0;
                    
                    U_Y   = U_Y | Y[i,.]'| Utility[i,.]';
                    U_Yd   = U_Yd | yd[i,.]'| Utilityd[i,.]';
                    
                    M = zeros(nvar_mear+Alternative_all-num_nominal,nvar_mear+Alternative_all);
                    M[1:nvar_mear,1:nvar_mear] = eye(nvar_mear);
                    
                    Alt_chosen = (dta[i,Altchm])';
                    
                    for j(1,num_nominal,1);
                        iden_matrix = eye(All_Nominal[1,j]-1);
                        one_negative = -1*ones(All_Nominal[1,j]-1,1);
                        if(Alt_chosen[j] eq 1);
                            temp1 = one_negative ~ iden_matrix;
                        elseif(Alt_chosen[j] eq All_Nominal[1,j]);
                            temp1 = iden_matrix ~ one_negative;
                        else;
                            ch = Alt_chosen[j];
                            temp1 = iden_matrix[.,1:ch-1] ~ one_negative ~ iden_matrix[.,ch:All_Nominal[1,j]-1];
                        endif;
                        
                        if(j == 1);
                            M[nvar_mear+1:nvar_mear+All_Nominal[1,j]-1,nvar_mear+1:nvar_mear+All_Nominal[1,j]] = temp1;
                        else;
                            M[nvar_mear+M_mat_Track_csum[j-1,1]+1:nvar_mear+M_mat_Track_csum[j,1],nvar_mear+Nominal_csum[j-1,1]+1:nvar_mear+Nominal_csum[j-1,1]+All_Nominal[1,j]] = temp1;
                        endif;
                        
                        clear temp1;
                    endfor;
                    
                    B_Tild = M * U_Y;
                    B_Tild_d = M * U_Yd;
                    Error_Tild = M * Full_error * M';
                    
                    BU_Tild       = B_Tild[nvar_mear_cont+1:rows(B_Tild)];
                    
                    if(nvar_mear_cont > 0);
                        Error_YU_Tild = Error_Tild[nvar_mear_cont+1:rows(Error_Tild),1:nvar_mear_cont];
                    endif;
                    Error_U_Tild  = Error_Tild[nvar_mear_cont+1:rows(Error_Tild),nvar_mear_cont+1:cols(Error_Tild)];
                    
                    if(nvar_mear_cont > 0);
                        Error_Y       = Error_Tild[1:nvar_mear_cont,1:nvar_mear_cont];
                        Diff_Mean     = (dta[i,Continous_Index])';
                        Diff_Mean_mu  = B_Tild[1:nvar_mear_cont];
                    endif;
                    
                    if(nvar_mear_cont > 0);
                        Mean_changed =  BU_Tild + ( Error_YU_Tild * inv(Error_Y) * (Diff_Mean-Diff_Mean_mu) );
                        Error_changed = Error_U_Tild - ( Error_YU_Tild * inv(Error_Y) *  Error_YU_Tild');
                    else;
                        Mean_changed =  BU_Tild ;
                        Error_changed = Error_U_Tild ;
                    endif;
                    
                    
                    BU_Tild_d        = B_Tild_d[nvar_mear_cont+1:rows(B_Tild_d)];
                    
                    if(nvar_mear_cont > 0);
                        Diff_Mean_d      = zeros(nvar_mear_cont,1);
                        Diff_Mean_mu_d   = B_Tild_d[1:nvar_mear_cont];
                    endif;
                    
                    if(nvar_mear_cont > 0);
                        Mean_changed_d =  BU_Tild_d + ( Error_YU_Tild * inv(Error_Y) * Diff_Mean_d ) - ( Error_YU_Tild * inv(Error_Y) * Diff_Mean_mu_d );
                    else;
                        Mean_changed_d =  BU_Tild_d ;
                    endif;
                    
                    
                    Curr_Lower_Threshold = {};
                    Curr_Upper_Threshold = {};
                    
                    if(nvar_mear_ordl > 0);
                        Curr_Lower_Threshold = Curr_Lower_Threshold ~ lower_threshold_matrix[i,.] ;
                        Curr_Upper_Threshold = Curr_Upper_Threshold ~ upper_threshold_matrix[i,.] ;
                    endif;
                    
                    if(nvar_mear_grup > 0);
                        Curr_Lower_Threshold = Curr_Lower_Threshold ~ Category_matrix_lower[i,.] ;
                        Curr_Upper_Threshold = Curr_Upper_Threshold ~ Category_matrix_upper[i,.] ;
                    endif;
                    
                    Curr_Lower_Threshold = Curr_Lower_Threshold ~ Count_Threshold[i,1:nvar_mear_count] ;
                    Curr_Upper_Threshold = Curr_Upper_Threshold ~ Count_Threshold[i,nvar_mear_count+1:2*nvar_mear_count] ;
                    
                    Curr_Lower_Threshold = Curr_Lower_Threshold ~ (negative_infinity*ones(1,Alternative_all-num_nominal)) ;
                    Curr_Upper_Threshold = Curr_Upper_Threshold ~ (zeros(1,Alternative_all-num_nominal));
                    
                    Curr_Lower_Threshold_d = {};
                    Curr_Upper_Threshold_d = {};
                    
                    if(nvar_mear_ordl > 0);
                        Curr_Lower_Threshold_d = Curr_Lower_Threshold_d ~ 0*lower_threshold_matrix[i,.] ;
                        Curr_Upper_Threshold_d = Curr_Upper_Threshold_d ~ 0*upper_threshold_matrix[i,.] ;
                    endif;
                    
                    if(nvar_mear_grup > 0);
                        Curr_Lower_Threshold_d = Curr_Lower_Threshold_d ~ 0*Category_matrix_lower[i,.] ;
                        Curr_Upper_Threshold_d = Curr_Upper_Threshold_d ~ 0*Category_matrix_upper[i,.] ;
                    endif;
                    
                    Curr_Lower_Threshold_d = Curr_Lower_Threshold_d ~ Count_Threshold_d[i,1:nvar_mear_count] ;
                    Curr_Upper_Threshold_d = Curr_Upper_Threshold_d ~ Count_Threshold_d[i,nvar_mear_count+1:2*nvar_mear_count] ;
                    
                    Curr_Lower_Threshold_d = Curr_Lower_Threshold_d ~ (zeros(1,Alternative_all-num_nominal)) ;
                    Curr_Upper_Threshold_d = Curr_Upper_Threshold_d ~ (zeros(1,Alternative_all-num_nominal));
                    
                    
                    
                    if(nvar_mear_cont > 0);
                        p1 = pdfmvn(Diff_Mean,Diff_Mean_mu,Error_Y);
                        p1_d = pdfgmean(Diff_Mean,Diff_Mean_mu,Error_Y);
                        
                        if(p1 > upper_limit);
                            p1_dd = (1/p1)*(p1_d' * (Diff_Mean_d-Diff_Mean_mu_d));
                        endif;
                    endif;
                    
                    
                    if(nvar_ogc > 1);
                        p2_dd = 0;
                        for g1(1,nvar_mear_ordl+nvar_mear_grup+nvar_mear_count-1,1);
                            for g2(g1+1,nvar_mear_ordl+nvar_mear_grup+nvar_mear_count,1);
                                
                                pair_ogc_count = pair_ogc_count + 1;
                                
                                rho_low_g1d =  (Curr_Lower_Threshold_d[1,g1] - Mean_changed_d[g1] ) / sqrt(Error_changed[g1,g1]);
                                rho_low_g2d =  (Curr_Lower_Threshold_d[1,g2] - Mean_changed_d[g2] ) / sqrt(Error_changed[g2,g2]);
                                rho_up_g1d =   (Curr_Upper_Threshold_d[1,g1] - Mean_changed_d[g1] ) / sqrt(Error_changed[g1,g1]);
                                rho_up_g2d =   (Curr_Upper_Threshold_d[1,g2] - Mean_changed_d[g2] ) / sqrt(Error_changed[g2,g2]);
                                
                                p2_temp11 = rho_up_g1d | rho_up_g2d | 0;
                                p2_temp22 = rho_up_g1d | rho_low_g2d | 0;
                                p2_temp33 = rho_low_g1d | rho_up_g2d | 0;
                                p2_temp44 = rho_low_g1d | rho_low_g2d | 0;
                                
                                if(Store_ogc[pair_ogc_count,13] > upper_limit);
                                    p2_dd = p2_dd + ( (1/Store_ogc[pair_ogc_count,13])*( (Store_ogc[pair_ogc_count,1:3] * p2_temp11) - (Store_ogc[pair_ogc_count,4:6] * p2_temp22) - (Store_ogc[pair_ogc_count,7:9] * p2_temp33) + (Store_ogc[pair_ogc_count,10:12] * p2_temp44) ) );
                                endif;
                                clear rho_low_g1,rho_low_g2,rho_up_g1,rho_up_g2,var_g1g2,p2_temp,rho_low_g1d,rho_low_g2d,rho_up_g1d,rho_up_g2d,p2_temp1,p2_temp2,p2_temp3,p2_temp4,p2_temp11,p2_temp22,p2_temp33,p2_temp44;
                            endfor;
                        endfor;
                    else;
                        p2_dd = 0;
                    endif;
                    
                    p3_dd = 0;
                    for v1(1,nvar_mear_ordl+nvar_mear_grup+nvar_mear_count,1);
                        for g1(1,num_nominal,1);
                            D_VG = zeros(All_Nominal[1,g1],(nvar_mear_ordl+nvar_mear_grup+nvar_mear_count+Alternative_all-num_nominal));
                            D_VG[1,v1] = 1;
                            
                            pair_ogcn_count = pair_ogcn_count + 1;
                            if(g1 == 1);
                                D_VG[2:rows(D_VG),nvar_mear_ordl+nvar_mear_grup+nvar_mear_count+1:nvar_mear_ordl+nvar_mear_grup+nvar_mear_count+All_Nominal[1,g1]-1] = eye(All_Nominal[1,g1]-1);
                            else;
                                D_VG[2:rows(D_VG),nvar_mear_ordl+nvar_mear_grup+nvar_mear_count+M_mat_Track_csum[g1-1,1]+1:nvar_mear_ordl+nvar_mear_grup+nvar_mear_count+M_mat_Track_csum[g1,1]] = eye(All_Nominal[1,g1]-1);
                            endif;
                            
                            rho_low_g3 = D_VG*Curr_Lower_Threshold';
                            rho_up_g3  = D_VG*Curr_Upper_Threshold';
                            
                            rho_low_g3_d = D_VG*Curr_Lower_Threshold_d';
                            rho_up_g3_d  = D_VG*Curr_Upper_Threshold_d';
                            
                            mean_gu    = D_VG*Mean_changed;
                            var_gu     = D_VG*Error_changed*D_VG';
                            
                            mean_gu_d  = D_VG*Mean_changed_d;
                            
                            om  = sqrt(diag(var_gu));
                            mean_low_final = (rho_low_g3 - mean_gu)./om;
                            mean_up_final  = (rho_up_g3 - mean_gu)./om;
                            
                            var_final      = corrvc(var_gu);
                            var_final      = diagrv(var_final,ones(All_Nominal[1,g1],1));
                            
                            mean_low_final_d = (rho_low_g3_d - mean_gu_d)./om;
                            mean_up_final_d  = (rho_up_g3_d - mean_gu_d)./om;
                            
                            if(Store_ogcn[pair_ogcn_count,1] > upper_limit);
                                p3_dd = p3_dd + ( (1/Store_ogcn[pair_ogcn_count,1]) *  (Store_ogcn[pair_ogcn_count,2:rows(mean_up_final_d)+1] * mean_up_final_d)  )  ;
                            endif;
                            
                            clear rho_low_g3,rho_up_g3,mean_gu,var_gu,om,mean_low_final,mean_up_final,var_final,D_VG,mean_gu_d,mean_low_final_d,mean_up_final_d;
                            clear rho_low_g3_d,rho_up_g3_d;
                        endfor;
                    endfor;
                    
                    
                    p4_dd = 0;
                    if(num_nominal > 1);
                        for g1(1,num_nominal-1,1);
                            for g2(g1+1,num_nominal,1);
                                R_GG = zeros(All_Nominal[1,g1]+All_Nominal[1,g2]-2,nvar_mear_ordl+nvar_mear_grup+nvar_mear_count+Alternative_all-num_nominal);
                                
                                pair_nn_count = pair_nn_count + 1;
                                if(g1 == 1);
                                    R_GG[1:M_mat_Track[1,g1],nvar_mear_ordl+nvar_mear_grup+nvar_mear_count+1:nvar_mear_ordl+nvar_mear_grup+nvar_mear_count+All_Nominal[1,g1]-1] = eye(All_Nominal[1,g1]-1);
                                else;
                                    R_GG[1:M_mat_Track[1,g1],nvar_mear_ordl+nvar_mear_grup+nvar_mear_count+M_mat_Track_csum[g1-1,1]+1:nvar_mear_ordl+nvar_mear_grup+nvar_mear_count+M_mat_Track_csum[g1,1]] = eye(All_Nominal[1,g1]-1);
                                endif;
                                
                                R_GG[M_mat_Track[1,g1]+1:rows(R_GG),nvar_mear_ordl+nvar_mear_grup+nvar_mear_count+M_mat_Track_csum[g2-1,1]+1:nvar_mear_ordl+nvar_mear_grup+nvar_mear_count+M_mat_Track_csum[g2,1]] = eye(All_Nominal[1,g2]-1);
                                
                                mean_gu    = -(R_GG*Mean_changed);
                                mean_gu_d  = -(R_GG*Mean_changed_d);
                                
                                var_gu     = R_GG*Error_changed*R_GG';
                                
                                om  = sqrt(diag(var_gu));
                                mean_final = mean_gu./om;
                                
                                var_final      = corrvc(var_gu);
                                var_final      = diagrv(var_final,ones(All_Nominal[1,g1]+All_Nominal[1,g2]-2,1));
                                
                                mean_final_d  = (mean_gu_d)./om;
                                
                                num_element = All_Nominal[1,g1] + All_Nominal[1,g2] - 2	;
                                
                                if(Store_nn[pair_nn_count,1] > upper_limit);
                                    p4_dd = p4_dd + ( (1/Store_nn[pair_nn_count,1]) *  (Store_nn[pair_nn_count,2:num_element+1] * mean_final_d)  )  ;
                                endif;
                                
                                clear R_GG,mean_gu,var_gu,om,mean_final,var_final,mean_final_d;
                            endfor;
                        endfor;
                    endif;
                    
                    gg = p1_dd + p2_dd + p3_dd + p4_dd;
                    gg_temp = gg_temp | gg;
                    
                    clear Lambda_mat,M,B_Tild,Error_Tild,Mean_changed,Error_changed,BU_Tild,Error_YU_Tild,Error_U_Tild,Error_Y,Diff_Mean,BU_Tild_d,Diff_Mean_d,Mean_changed_d,B_Tild_d,gg;
                endfor;
                Phi_gradient = Phi_gradient ~ gg_temp;
                
                clear yd,Utilityd,Count_Threshold_d;
            endif;
        endfor;
    endif;
    ThreadEnd;
    ThreadJoin;
    //-----------------------------------------------------------------------------------------------------------------
    
    gradient = {};
    gradient = gradient ~ delta_gradient ~ Beta_gradient ~ Lamda_gradient ;
    
    if(nvar_mear_ordl > 0);
        gradient = gradient ~ upper_threshold_gradient;
    endif;
    
    if(nvar_mear_count > 0);
        gradient = gradient ~ Phi_gradient ;
    endif;
    
    Gradient_Store1 = gradient;
    retp(gradient);
endp;

//----------------------------------------------------------------------------------------------------------------------------------------------------------


//---------------------------------------------------------------------------------------------------------------------------------------
proc(1)= pdfmvn(x,mu,s);
    local d,p,p1,p2;
    d = rows(x);
    p1 = exp(-0.5*((x-mu)'*inv(s)*(x-mu)));
    p2 = ((2*pi)^(d/2))*sqrt(det(s));
    p = p1/p2;
    retp(p);
endp;


proc(1)=pdfgmean(x,mu,s);
    local d,p,p1,p2,p3,grad1,grad,store,ie;
    d = rows(x);
    p1 = exp(-0.5*((x-mu)'*inv(s)*(x-mu)));
    p2 = ((2*pi)^(d/2))*sqrt(det(s));
    p3 = inv(s);
    p = p1/p2;
    store = zeros(d,1);
    for ie(1,d,1);
        grad = -1*((x-mu).*p3[.,ie]);
        grad1 = sumc(grad);
        grad1 = p*grad1;
        store[ie] = grad1;
    endfor;
    retp(store);
endp;

proc(1)=pdfgcov(x,mu,r);
    local d,p1,p2,p,p4,out,i,j,diff_matrix,part11,part12,part13,part1,s,ncholerr,diff_matrix1;
    local part21,part22,part23,part24,part2,gradient;
    d = rows(x);
    s = xpnd(r);
    ncholerr = rows(r);
    p1 = exp(-0.5*((x-mu)'*inv(s)*(x-mu)));
    p2 = ((2*pi)^(d/2));
    p = p1/p2;
    p4 = inv(s);
    out = {};
    for i(1,ncholerr,1);
        
        diff_matrix1 = zeros(ncholerr,1);
        diff_matrix1[i,1]= 1;
        diff_matrix = xpnd(diff_matrix1);
        
        part11 = p4*diff_matrix;
        part12 = diag(part11);
        part13 = sumc(part12);
        part1 = -0.5*part13;
        part1 = part1/sqrt(det(s));
        
        part21 = (((p4*(x-mu))*(x-mu)')*p4);
        part22 = part21*diff_matrix;
        part23 = diag(part22);
        part24 = sumc(part23);
        part2 = 0.5*part24;
        part2 = part2/sqrt(det(s));
        
        gradient = p*(part1 + part2);
        out = out | gradient;
        
    endfor;
    retp(out);
endp;


proc(1)=cdfbvn_grad(a,b,corr);
    local d_a,d_b,d_corr;
    d_a     = pdfn(a) .* cdfn((b- corr .* a) ./ sqrt(1-corr .* corr) );
    d_b     = pdfn(b) .* cdfn((a- corr .* b) ./ sqrt(1-corr .* corr) );
    d_corr  = (exp(-0.5*((a^2 + b^2 - 2*corr .* a .* b   ) ./ (1-corr .* corr) ))) ./ ((2*pi) * sqrt(1-corr .* corr));
    retp(d_a|d_b|d_corr);
endp;

proc(1) = gettime();
    local y,timesec;
    y = time;
    timesec = y[1,1]*3600 + y[2,1]*60 + y[3,1];
    retp(timesec);
endp;


proc (3) = pdfmvnac(a,r,s);
    local m,w,s1,n1,p,j,x,rho,y,z,z1,z3,z2,cond,k,omega21,omega11,omega55,condk,pcomb,cm,int_count;
    local rhovec,c,rho1,rho2,g3,g5,g10,g11,g12,g13,g14,g15,g20,g25,g30,g53,g31,g35,g36,g40,g45,g46,g47,g50,g51;
    local grff,gw,condpass,sk,l,ab,ir,jr,res2,g80,g81,g59,kk,g49,g65,g55,mm,res,res1,aaa1,g56,g57,g58,g60,g61,g62,gr,gr1,gw1;
    local gw2,gr2,gr3,aaa,gwf,grf,gwfinal,grfinal,invomg11,nnnn,gggg,ssss1,aa,t,newper,rnum,ss;
    
    m = cols(a);
    w = {};
    for z ( 1, _randper, 1);
        { rnum, ss } = rndKMu(1,m,s);
        aa = seqa(1,1,m)~(rnum)';
        aa = sortc(aa,2);
        w  = w|((aa[.,1])');
    endfor;
    s1=ss[1];
    
    w=w';
    n1 = cols(w);
    p = 0;
    j = 1;
    
    a = a.*(a .<5.7)+5.7*(a.>=5.7);
    a = a.*(a .>-5.7)-5.7*(a.<=-5.7);
    
    ab = a';
    condpass={};
    do until j > n1;
        x = ab[w[.,j]];
        rho = submat(r,w[.,j],w[.,j]);
        y = reshape(((ones(m,1).*.x)'),m,m);
        z = cdfbvn(x,y,rho);
        z = diagrv(z,cdfn(x));
        z1 = cdfn(x).*cdfn(y);
        z3 = cdfn(x);
        z2 = 1-z3;
        cond = 1;
        k = 3;
        do until k > m;
            omega21 = z[k,1:k-1]-z1[k,1:k-1];
            omega11 = z[1:k-1,1:k-1]-z1[1:k-1,1:k-1];
            trap 1;
            cm = invpd(omega11);
            if scalerr(cm);
                cm=inv(omega11);
            endif;
            trap 0;
            condk = z3[k]+omega21*(cm)*z2[1:k-1];
            cond=cond*condk;
            k = k+1;
        endo;
        pcomb = z[1,2]*cond;
        condpass = condpass~cond;
        p = p+pcomb;
        j=j+1;
    endo;
    
    gwfinal = zeros(1,m);
    grfinal = zeros(1,((m-1)*(m)/2));
    j=1;
    do until j > n1;
        x = ab[w[.,j]];
        rho = submat(r,w[.,j],w[.,j]);
        rhovec = {};
        c=1;
        do until c==cols(rho);
            rhovec = rhovec~rho[c,c+1:cols(rho)];
            c=c+1;
        endo;
        y = reshape(((ones(m,1).*.x)'),m,m);
        z = cdfbvn(x,y,rho);
        z = diagrv(z,cdfn(x));
        z1 = cdfn(x).*cdfn(y);
        z3 = cdfn(x);
        z2 = 1-z3;
        rho1 = diagrv(rho,zeros(m,1));
        rho2 = sqrt(1-rho1^2);
        g3 = pdfn(x);
        g5 = (y-rho1.*x)./rho2;
        g10 = g3.*cdfn(g5);
        g11 = g3.*cdfn(y);
        g12 = g10-g11;
        g13 = g12;
        g14 = g3.*(1-2*cdfn(x));
        g15 = diagrv(g13,g14);
        g20 = -g3;
        
        g25 = (1/rho2).*g3.*pdfn(g5);
        g25 = diagrv(g25,zeros(m,1));
        
        
        g30 = g10[1,2]~g10[2,1]~zeros(1,m-2);
        g53 = g25[1,2]~zeros(1,cols(rhovec)-1);
        
        
        k = 3;
        gw1 = zeros(1,m);
        gr1 = zeros(1,cols(rhovec));
        do until k > m;
            omega21 = z[k,1:k-1]-z1[k,1:k-1];
            omega11 = z[1:k-1,1:k-1]-z1[1:k-1,1:k-1];
            trap 1;
            invomg11 = invpd(omega11);
            if scalerr(invomg11);
                invomg11=inv(omega11);
            endif;
            trap 0;
            condk = z3[k]+omega21*invomg11*z2[1:k-1];
            g31 = zeros(1,m);
            g31[k] = g3[k];
            l = 1;
            g40={};
            g46={};
            g51={};
            g81 = z2[1:k-1];
            do until l == k;
                g35 = zeros(k-1,k-1);
                g35[l,1:k-1] = g15[l,1:k-1];
                g35=g35+g35';
                g35 = diagrv(g35,(diag(g35)/2));
                g36 = -invomg11*g35*invomg11;
                g36 = omega21*g36*g81;
                g40=g40~g36;
                
                g45 = zeros(1,k-1);
                g45[l] = g15[l,k];
                g46 = g46~(g45*invomg11*g81);
                
                g50 = zeros(k-1,1);
                g50[l]=g20[l];
                g51 = g51~(omega21*invomg11*g50);
                l=l+1;
            endo;
            
            g40 = g40~zeros(1,m-(k-1));
            
            g49 = g15[k,1:k-1];
            g46 = g46~(g49*invomg11*g81);
            
            g47 = zeros(1,m);
            g47[1:cols(g46)] = g46;
            
            g51 =g51~zeros(1,m-(k-1));
            
            gw = (g31+g40+g47+g51)*((condpass[j])/condk).*z[1,2];
            
            /* Start here for gradients with respect to rho parameters */
            
            
            l=1;
            kk = cols(rhovec);
            g60={};
            g65={};
            do until l>kk;
                g55 = zeros(1,kk);
                g55[l]=1;
                mm = 1;
                sk=0;
                g56 = zeros(m,m);
                do until mm>m-1;
                    g56[mm,mm+1:m] = (g55[sk+1:sk+m-mm]);
                    sk=sk+m-mm;
                    mm=mm+1;
                endo;
                g57=g56+g56';
                g59 = g57.*g25;
                g59 = g59[1:k-1,1:k-1];
                g58 = -invomg11*g59*invomg11;
                g58 = omega21*g58*z2[1:k-1];
                g60 = g60~g58;
                
                g61 = g57[k,1:k-1].*g25[k,1:k-1];
                g62 = g61*invomg11*z2[1:k-1];
                g65 = g65~g62;
                l=l+1;
            endo;
            
            gr = (g60+g65)*((condpass[j])/condk).*z[1,2];
            gw1 = gw+gw1;
            gr1 = gr+gr1;
            k=k+1;
        endo;
        gw2 = (g30.*condpass[j])+gw1;
        gr2 = (g53.*condpass[j])+gr1;
        
        mm=1;
        sk=0;
        gr3 = zeros(m,m);
        do until mm>m-1;
            gr3[mm,mm+1:m] = (gr2[sk+1:sk+m-mm]);
            sk=sk+m-mm;
            mm=mm+1;
        endo;
        
        /* commands below to resequence gradients based on permutation */
        
        aaa = indnv(seqa(1,1,m),w[.,j]);
        gwf = gw2[aaa];
        grf = submat(gr3,aaa,aaa);
        
        res = {};
        ir = 1;
        do until ir == m;
            jr = ir+1;
            res = res|((ones(m-ir,1).*.w[ir,j])~w[jr:m,j]);
            ir=ir+1;
        endo;
        
        res=res';
        res2={};
        t=1;
        do until t>cols(res);
            res2 = res2~sortc(res[.,t],1);
            t=t+1;
        endo;
        
        res2=res2';
        res1 = combinate(m,2);
        res1 = res1[.,1] .*(10^(trunc (ln(res1[.,2])./ln(10))+1)) + res1[.,2];
        res2 = res2[.,1] .*(10^(trunc (ln(res2[.,2])./ln(10))+1)) + res2[.,2];
        
        aaa1 = indnv(res1,res2);
        grf = gr2[aaa1];
        gwfinal = gwfinal+gwf;
        grfinal = grfinal+grf;
        j=j+1;
    endo;
    if ((p/n1) >0 and (p/n1) <=1);
        retp(p/n1,(gwfinal~grfinal)/n1,s1);
    else;
        { nnnn,gggg,ssss1 } = pdfmvnGHK(a,r,s1);
        retp(nnnn,gggg,ssss1);
    endif;
endp;

proc(3) = pdfmvnGHK(a,r,s);
    local nintegdim,uniRands,probab,chol_r,ghkArr,etaArr,ghkElem,gggg,gg_b_elem,gg_sig_elem,startRow,ghkElem1,d_ghkElem1,rnum,ss;
    
    if(abscissae_trunc eq 1);
        a = a.*(a .<5.7)+5.7*(a.>=5.7);
        a = a.*(a .>-5.7)-5.7*(a.<=-5.7);
    endif;
    
    nintegdim = rows(r);
    { rnum, ss } = rndKMu(1,1,s);
    s = ss[1];
    startRow = ceil(rnum*(_halt_maxdraws-_halt_numdraws-1));
    uniRands = allHaltDraws[startRow:startRow+_halt_numdraws-1,1:nintegdim];
    chol_r = chol(r);
    ghkArr = zeros(nrep,nintegdim);
    etaArr = zeros(nrep,(nintegdim-1));
    ghkArr[.,1] = ones(nrep,1) .*. (cdfn( a[1,1]/chol_r[1,1]));
    
    /*Probability Calculation */
    for iintegdim (1,nintegdim-1,1);
        etaArr[.,iintegdim]= cdfni(uniRands[.,iintegdim] .* ghkArr[.,iintegdim]);
        ghkElem = a[1,iintegdim+1];
        ghkElem1 = 0;
        for jintegdim (1,iintegdim,1);
            ghkElem1 = ghkElem1 - chol_r[jintegdim,iintegdim+1]*etaArr[.,jintegdim];
        endfor;
        ghkElem1 = ghkElem1 + ghkElem;
        ghkArr[.,(iintegdim+1)]=cdfn(ghkElem1/chol_r[(iintegdim+1),(iintegdim+1)]);
    endfor;
    probab = ghkArr[.,1];
    for iintegdim(2,nintegdim,1);
        probab = probab .* ghkArr[.,iintegdim];
    endfor;
    
    /*Gradient w.r.t x elements */
    ThreadBegin;
    gg_b_elem   = GHK_xgrad(a,r,probab,chol_r,etaArr,uniRands,ghkArr);
    ThreadEnd;
    
    /*Gradient w.r.t r elements */
    ThreadBegin;
    gg_sig_elem = GHK_rgrad(a,r,probab,chol_r,etaArr,uniRands,ghkArr);
    ThreadEnd;
    ThreadJoin;
    
    probab = meanc(probab);
    gggg = gg_b_elem~gg_sig_elem;
    retp(probab,gggg,s);
endp;


proc(1) = GHK_xgrad(a,r,probab,chol_r,etaArr,uniRands,ghkArr);
    local d_ghkArr,d_etaArr,d_ghkElem,d_ll1,d_dutilALL,nintegdim,gg_b_elem,ghkElem,ghkElem1,d_ghkElem1;
    
    nintegdim = rows(r);
    d_dutilALL = reshape(eye(nintegdim),1,nintegdim*nintegdim);
    gg_b_elem = {};
    for ivar (1,nintegdim,1);
        d_ghkArr = ones(nrep,1) * pdfn( a[1,1]/chol_r[1,1]) * (d_dutilALL[1,(ivar-1)*(nintegdim)+1]/chol_r[1,1]);
        d_etaArr = {};
        
        for iintegdim (1,nintegdim-1,1);
            ghkElem = a[1,iintegdim+1];
            ghkElem1 = 0;
            for jintegdim (1,iintegdim,1);
                ghkElem1 = ghkElem1 - chol_r[jintegdim,iintegdim+1]*etaArr[.,jintegdim];
            endfor;
            
            ghkElem = ghkElem + ghkElem1;
            d_etaArr = d_etaArr~(   (1/pdfn(etaArr[.,iintegdim]))  .*  ( uniRands[.,iintegdim] .* d_ghkArr[.,iintegdim])   );
            d_ghkElem = d_dutilALL[1,(ivar-1)*nintegdim+iintegdim+1];
            d_ghkElem1 = 0;
            for jintegdim (1,iintegdim,1);
                d_ghkElem1 = d_ghkElem1 - chol_r[jintegdim,iintegdim+1]*d_etaArr[.,jintegdim];
            endfor;
            d_ghkElem = d_ghkElem + d_ghkElem1;
            d_ghkArr = d_ghkArr~(   pdfn(ghkElem/chol_r[iintegdim+1,iintegdim+1]) .* (d_ghkElem/chol_r[iintegdim+1,iintegdim+1])  );
        endfor;
        
        d_ll1 = 0;
        for iintegdim (1,nintegdim,1);
            d_ll1 = d_ll1 + probab .*  d_ghkArr[.,iintegdim]./ ghkArr[.,iintegdim];
        endfor;
        gg_b_elem = gg_b_elem~(d_ll1);
    endfor;
    gg_b_elem = meanc(gg_b_elem)';
    retp(gg_b_elem);
endp;

proc(1) = GHK_rgrad(a,r,probab,chol_r,etaArr,uniRands,ghkArr);
    local d_omega11,d_omega,d_chol_omega,temp_sub,d_temp_sub,gg_sig_elem,tempcntr,icov,chol_omega,nintegdim,d_ghkArr,d_etaArr,ghkElem,ghkElem1,d_ghkElem,d_ll1;
    
    nintegdim = rows(r);
    gg_sig_elem = {};
    
    chol_omega= zeros(nintegdim,nintegdim);
    icov = 0;
    for irow (1,nintegdim-1,1);
        for icol (irow+1,nintegdim,1);
            icov = icov+1;
            
            d_omega = zeros(nintegdim,nintegdim);
            d_omega[irow,icol]=1;
            d_omega[icol,irow]=1;
            
            d_chol_omega = zeros(nintegdim,nintegdim);
            for idim (1,nintegdim,1);
                temp_sub = 0;
                d_temp_sub = 0;
                for kdim (1,idim-1,1);
                    temp_sub = temp_sub + chol_omega[kdim,idim]*chol_omega[kdim,idim];
                    d_temp_sub = d_temp_sub + d_chol_omega[kdim,idim]*chol_omega[kdim,idim] + chol_omega[kdim,idim]*d_chol_omega[kdim,idim];
                endfor;
                chol_omega[idim,idim] = sqrt(r[idim,idim] - temp_sub);
                d_chol_omega[idim,idim] = (1/2/chol_omega[idim,idim])*(d_omega[idim,idim] - d_temp_sub);
                
                for jdim(idim+1,nintegdim,1);
                    temp_sub = 0;
                    d_temp_sub = 0;
                    for kdim (1,idim-1,1);
                        temp_sub = temp_sub + chol_omega[kdim,idim]*chol_omega[kdim,jdim];
                        d_temp_sub = d_temp_sub + d_chol_omega[kdim,idim]*chol_omega[kdim,jdim] + chol_omega[kdim,idim]*d_chol_omega[kdim,jdim];
                    endfor;
                    chol_omega[idim,jdim] = (r[idim,jdim] - temp_sub)/chol_omega[idim,idim];
                    d_chol_omega[idim,jdim] = (d_omega[idim,jdim] - d_temp_sub)/chol_omega[idim,idim] + (r[idim,jdim] - temp_sub)/(-(chol_omega[idim,idim]^2))*d_chol_omega[idim,idim]  ;
                endfor;
            endfor;
            d_ghkArr = ones(nrep,1) * pdfn( a[1,1]/chol_omega[1,1]) * (-a[1,1]/((chol_omega[1,1])^2)) * d_chol_omega[1,1]    ;
            d_etaArr = {};
            
            for iintegdim (1,nintegdim-1,1);
                ghkElem = a[1,iintegdim+1];
                ghkElem1 = 0;
                for jintegdim (1,iintegdim,1);
                    ghkElem1 = ghkElem1 - chol_omega[jintegdim,iintegdim+1]*etaArr[.,jintegdim];
                endfor;
                
                ghkElem = ghkElem + ghkElem1;
                d_etaArr = d_etaArr~(    1/pdfn( cdfni(uniRands[.,iintegdim] .* ghkArr[.,iintegdim]) ) .*  ( uniRands[.,iintegdim] .* d_ghkArr[.,iintegdim])         );
                d_ghkElem = 0;
                for jintegdim (1,iintegdim,1);
                    d_ghkElem = d_ghkElem - d_chol_omega[jintegdim,iintegdim+1]*etaArr[.,jintegdim] - chol_omega[jintegdim,iintegdim+1]*d_etaArr[.,jintegdim];
                endfor;
                d_ghkArr = d_ghkArr~(   pdfn(ghkElem/chol_omega[iintegdim+1,iintegdim+1]) .* (   d_ghkElem/chol_omega[iintegdim+1,iintegdim+1] - ghkElem/(chol_omega[iintegdim+1,iintegdim+1]^2)*d_chol_omega[iintegdim+1,iintegdim+1]    )  );
                
            endfor;
            
            d_ll1 = 0;
            for iintegdim (1,nintegdim,1);
                d_ll1 = d_ll1 + probab .*  d_ghkArr[.,iintegdim]./ ghkArr[.,iintegdim];
            endfor;
            
            gg_sig_elem = gg_sig_elem~(d_ll1);
        endfor;
    endfor;
    gg_sig_elem = meanc(gg_sig_elem)';
    retp(gg_sig_elem);
endp;

proc(1) = HaltonSequence(n,dim);
    local prim,hs,idim,b,idx;
    prim = { 2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97 101 103 107 109 113 127 131 137 139 149 151 157 163 167 173 179 181 191 193 197 199 211 223 227 229 233 239 241 251 257 263 269 271 277 281
        283 293 307 311 313 317 331 337 347 349 353 359 367 373 379 383 389 397 401 409 419 421 431 433 439 443 449 457 461 463 467 479 487 491 499 503 509 521 523 541 };
    hs = zeros(n,dim);
    for idim(1,dim,1);
        b = prim[1,idim];
        hs[.,idim] = halton(n,b);
    endfor;
    retp(hs[11:n,1:dim]);
endp;

proc(1)= halton(n,s);
    local phi,i,j,y,x,k;
    k=floor(ln(n+1) ./ ln(s));
    phi={0};
    i=1;
    do while i .le k;
        x=phi;
        j=1;
        do while j .lt s;
            y=phi+(j/s^i);
            x=x|y;
            j=j+1;
        endo;
        phi=x;
        i=i+1;
    endo;
    
    x=phi;
    j=1;
    do while j .lt s .and rows(x) .lt (n+1);
        y=phi+(j/s^i);
        x=x|y;
        j=j+1;
    endo;
    
    phi=x[2:(n+1),1];
    retp(phi);
endp;

