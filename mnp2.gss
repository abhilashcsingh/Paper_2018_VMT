library maxlik;
maxset;
cls;
format /m1/rzt 1,6;

/*****************************************************************************
                  Global Variable Definitions 
*****************************************************************************/
clearg All_Parameters,All_Errors,allHaltDraws;
GHK    = 0;
if(GHK == 1);
    pre_nobs = 2500;
    allHaltDraws = HaltonSequence(pre_nobs*300+10,70);
endif;

Grdient_Check = 0;                           /* Put 1 to compare numerical and analytic gradients */
if(Grdient_Check == 1);
  _max_GradCheckTol = 1e-8;  
endif;  

load Main_data[3000,72] = C:/gauss17/dataset.csv;


Drive = "C:/";                                               
runpath = Drive $+ "gauss17/mnpout/";                   /* Location for generation of temparory files */
outpath = Drive $+ "gauss17/mnpout/";                 /* Location for estimation result file */
  
nind = 3000;                           /* Number of individuals in the dataset */
nchocc = 1;                           /* Number of choice occasion per individual */ 
nobs = nind*nchocc;                   /* Total number of obseravations in the dataset */
_row = nobs;                          /* Number of rows to be read at a time by log-likelihood function */
_randper = 1;                         /* Random permutations of all digits */
_randd   = 0;                         /* All permutations or random permutations */
nc       = 3;
nran     = 0;

if(nchocc > 1);
	eff_pair = 1;
	if(eff_pair == 1);
	   st_pair  = 1;
	   end_pair = 2;
	endif;
endif;

upper_limit = 1e-5;             /* Any value of CDF below this limit is considered as zero */
output_file_gen = 1;            /* Make this 1, if want to write estimation results to a file */

Ind_Pair = 1;                   /* Make this 1, if you want to break the intergal into two due to block diagonal structure */
MACML    = 1;
if(GHK  == 1);
   abscissae_trunc = 1;
   _halt_maxdraws  = nobs*300+10 ;
   _halt_numdraws  = 200;
   nrep            = _halt_numdraws;
   MACML           = 0;
endif;

if(nchocc > 1);

if(eff_pair == 0);
   if(Ind_Pair == 1);
      Com_nn_r      = 2*numCombinations(nchocc,2);
   else;
	  Com_nn_r      = numCombinations(nchocc,2);
   endif; 
else;
   org_pcount = 0;
   if(end_pair > 0);
   for g4(1,st_pair,1);
	   for g5(g4+1,end_pair,1);
             if(Ind_Pair == 1);
			    org_pcount = org_pcount + 2;
			 else;
				org_pcount = org_pcount + 1;
			 endif;	
	   endfor;
   endfor;
   endif;
   Com_nn_r  = org_pcount + (nchocc - end_pair);
endif;
H_Err_ogcn    = (2*nc+1)*(2*nc)/2;
Com_nn_c      =  2*H_Err_ogcn + 1;

eff_nn_nele   = 2*nc - 2;
eff_nn_ele    = eff_nn_nele*(eff_nn_nele-1)*0.5 + eff_nn_nele;
nn_eler       = eff_nn_ele*(eff_nn_ele+1)*0.5;

else;

Com_nn_r      = 1;
H_Err_ogcn    = (nc+1)*(nc)/2;
Com_nn_c      =  2*H_Err_ogcn + 1;

eff_nn_nele   = nc - 1;
eff_nn_ele    = eff_nn_nele*(eff_nn_nele-1)*0.5 + eff_nn_nele;
nn_eler       = eff_nn_ele*(eff_nn_ele+1)*0.5;

endif;

dataset =  runpath $+ "dataset.dat";
dataset_out =  runpath $+ "dataout.txt";

MACMLS = { 300000 300001 300002 300003 300004 300005 300006 300007 300008 300009 };
MACML_Num = 1;
seed10 = MACMLS[1,MACML_Num];           /* Seed for MACML approach */

//Main_data = Main_data ;

vnames = {  sampn	htaz	vmt	vmtrange	lnvmtone	vmtone	resden	denchoc	lowden	medden	highden	hhsize	hhchild	chpre6	ch6to16	chpre16	sinper	sinpar	couple	nucfam	joinfam	mufamno	mufamyes	workfem	inbel30	in30t75	in75t150	inab150	inab75	fragb16	frag1635	frag3555	frag5565	fraga65	white	africam	hisp	asianoth	nonwhite	detach	atachoth	condo	frworkm	frworkf	hhlic	hhveh	hhstu	uno	sero	tazarea	tazpoptt	tazpophh	tazemptt	tazelf	tazempre	tazempof	tazhhnum	tazhhsiz	tazhhinc	tazearn	tazenrol	tazk12tt	hxcord	hycord	tazgqpop	tazgqins	tazgqstr	tazgqoth fracft fracpt fracunem fracself};


ntot = cols(vnames); 

  
    fin = 0;
	create fin = ^dataset with ^vnames, ntot, 8, 8; 
	obs = 0; nr = 1;
	nobs_new = 3000;
	do while obs < nobs_new;
		dat = {}; 
		dat = dat ~ Main_data[obs+1,.] ; 
		  if writer(fin,dat) /= nr;
			 print "Disk Full"; end;
		  endif;
	   obs= obs+nr;
	endo;
	closeall fin;
	
	invar = getname(dataset);
    outvar = invar;

call initalize(dataset);

proc(0)= initalize(dataset);
     local add_data,fout,y,fpin,nin,outdata;
	 clear fin;
     open fin = ^dataset;
     fpin = typef(fin);
     nin = rowsf(fin);
     do until eof(fin);
       add_data = readr(fin,nobs_new);
     endo;
    if fin > 0; fin = close(fin); endif;
     outdata = add_data ;
     create fout = ^dataset with ^outvar,0,8;
     y = writer(fout,outdata);   
     if fout > 0;fout = close(fout);endif; 
 endp;
 
open f1 = ^dataset;          
assign = readr(f1,nobs_new);
outwidth 200;
output file = ^dataset_out;     
output reset;
screen off;
print assign;
output off;
screen on;
 
 logfile= outpath $+ "Output_RLC_indep_01" $+ ".txt";
 OUTPUT FILE= ^logfile ON;outwidth 250;format /m1 /rzt 1,15; 
 OUTPUT reset;
 
     /* Position of UNO variable (i.e., the column of ones) in data set. 
     The dataset should consist of a column of ones.*/
 { unov,ivuno }   = indices(dataset,"uno");
 
     /* Position of SERO variable (i.e., the column of zeros) in data set. 
       The dataset should consist of a column of zeros.*/
 { serov,ivsero } = indices(dataset,"sero");
 
    /* Column indicating chosen alternative. Should be in the format 1,2,3..nc */
     { ichro, ichosen } = indices(dataset,"denchoc");
 altchm = ichosen; 
 
     /*************** Utility specification for the alternatives *************************/
    let if1 = { sero    sero    sero            sero        sero    sero          sero          sero    sero   sero         sero       sero                               };
    let if2 = { uno     sero    inbel30     in30t75    sero africam    sero         hisp    sero    detach     sero      couple                           };
    let if3 = { sero    uno     inbel30     in30t75    in75t150 sero          africam   sero    hisp    sero     detach      couple                           };
   
   { v1,itf1 } = indices(dataset,if1');
    { v2,itf2 } = indices(dataset,if2');
    { v3,itf3 } = indices(dataset,if3');
    
    ivgenva = itf1' ~ itf2' ~ itf3';
    nvarma = cols(if1);
    nCholErr = (nc-1)*(nc)/2;    
    ivgenva = itf1'~itf2'~itf3'; 
	
/*****************************************************************************
                 True Value of Parameters
*****************************************************************************/
dgp_b = {
0.01
0.01
0.01
0.01
0.01
0.01
0.01
0.01
0.01
0.01
0.01
0.01
};                   /* Exogeneous variables coefficients */ 


dgp_b = dgp_b';

Mixing = 0;
dgp_OmTild = { 1.00  -0.50  0.25   0.75  0.00,
                              -0.50   1.00  0.25  -0.50  0.00,
                                0.25   0.25  1.00   0.33  0.00,
                                0.75  -0.50  0.33   1.00  0.00,
                                0.00   0.00  0.00   0.00  1.00  };        /*    Covariance matrix for random parameters (exogeneous variables) */


dgp_Psi = { 1.00  
                       0.50 1.00   };    		                /* Covariance matrix for the differenced error term vector */

//dgp_Psi = 1;
dgp_Psi = xpnd(dgp_Psi');
nCholOmega = (rows(dgp_OmTild))*(rows(dgp_OmTild)+1)/2;
nCholErr = (nc-1)*(nc)/2;

Non_IID  = 0;                   /* Make this 1, if you are providng non IID errors, otherwise zero */

if(Mixing == 0);
	nCholOmega = 0;
endif;

/****************************************************************************************************************************************************************************************
                 Packing of all parameters in a single vector ( Do not change anything below this line) 
*****************************************************************************************************************************************************************************************/
if (Non_IID eq 1);
	
	dgp_X1 = dgp_b;
	if(Mixing == 1);
	dgp_X1 = dgp_X1|vech(dgp_OmTild);
    endif;
    dgp_X1 = dgp_X1|vech(dgp_Psi);
	
	bb = dgp_X1[1:nvarma];
	if(Mixing == 1);
	  bb = bb|vech(chol(xpnd(dgp_X1[nvarma+1:nvarma+nCholOmega]))');
    endif;
    bb = bb | vech(chol(xpnd(dgp_X1[nvarma+nCholOmega+1:nvarma+nCholOmega+nCholErr]))');
		 
	_max_active = ones(nvarma,1);
	if(Mixing == 1);
	   _max_active = _max_active|ones(nCholOmega,1);
    endif;
    
	if(nc > 2);
        _max_active = _max_active|0|ones((nCholErr-1),1);
	else;
		_max_active = _max_active|0;
	endif;
		
else;
	 
	dgp_X1 = dgp_b;
	if(Mixing == 1);
	dgp_X1 = dgp_X1|vech(dgp_OmTild);
    endif;
	
	bb = dgp_X1[1:nvarma];
	if(Mixing == 1);
	  bb = bb|vech(chol(xpnd(dgp_X1[nvarma+1:nvarma+nCholOmega]))');
    endif;
		 
	_max_active = ones(nvarma,1);
	if(Mixing == 1);
	   _max_active = _max_active|ones(nCholOmega,1);
    endif;
endif;

 
/* Defining variable labels for printing */
beta_nam = 0 $+ "X" $+ ftocv(seqa(1,1,nvarma),2,0);
if(Mixing == 1);
OmTild_nam =  0 $+ "Tild" $+ ftocv(seqa(1,1,nCholOmega),2,0);
endif;
Psi_nam =  0 $+ "Psi" $+ ftocv(seqa(1,1,nCholErr),2,0);


if (Non_IID eq 1);
	_max_ParNames = beta_nam;
	if(Mixing == 1);
	  _max_ParNames = _max_ParNames|OmTild_nam;
    endif;
    _max_ParNames = _max_ParNames|Psi_nam;
else;
	_max_ParNames = beta_nam;
	if(Mixing == 1);
	  _max_ParNames = _max_ParNames|OmTild_nam;
    endif;
endif;


Num_Threads = 5;
Data_Split  = { 0001   0600,
                0601   1200,
			    1201   1800,
                1801    2400,
			    2401    3000 } ;
			   
clearg Gradient_Store,Store_ogc,Hess_nn,Gradient_Store1,Store_Seed;

    Seed_Start = zeros(nind,Com_nn_r);
	seednext   = seed10;
	for i(1,nind,1);
		for j(1,Com_nn_r,1);
			seed20 = seednext;
		    Seed_Start[i,j] = seed20;
            { temp, sss } = rndKMu(1,8,seed20);
	        seednext = sss[1];
		endfor;
	endfor;
    Store_Seed = Seed_Start;
    clear Seed_Start;
    
_max_GradTol = 1e-5;
_max_MaxIters = 200; 
_max_Options = { bfgs stepbt };
_max_CovPar = 2;
_max_GradProc = &lgd;
 Parametrized = 1;
start_time1 = gettime();
"Parametrized Likelihood has started : ";
{ x,f,g,cov,retcode } = maxprt(maxlik(Main_data,0,&lpr,bb));
end_time1 = gettime();
total_time1 = (end_time1-start_time1)/60;

if(Grdient_Check == 1);
	stop;
endif;

if(Non_IID eq 1);
		  bx = x[1:nvarma];
		  if(Mixing == 1);
		  chol_OmTildx = (upmat(xpnd(x[nvarma+1:nvarma+nCholOmega])));
		  OmTildx = zeros(nvarma,nvarma);       OmTild1x = chol_OmTildx'*chol_OmTildx;  
		  if( nran eq nvarma);
		        OmTildx = OmTild1x;
		  else;
                OmTildx[nran:nvarma,nran:nvarma] = OmTild1x;
          endif;
		  endif;
		  chol_Psix    = (upmat(xpnd(x[nvarma+nCholOmega+1:nvarma+nCholOmega+nCholErr])));
		  Psix         = chol_Psix'*chol_Psix;
		  
		  bb_unp = bx;
	      if(Mixing == 1);
	        bb_unp = bb_unp|vech(OmTildx);
          endif;
          bb_unp = bb_unp | vech(Psix);
		  
else;
		  bx = x[1:nvarma];
		  if(Mixing == 1);
		  chol_OmTildx = (upmat(xpnd(x[nvarma+1:nvarma+nCholOmega])));
		  
		  OmTildx = zeros(nvarma,nvarma);       OmTild1x = chol_OmTildx'*chol_OmTildx;  
		  
		  if( nran eq nvarma);
		        OmTildx = OmTild1x;
		  else;
                OmTildx[nran:nvarma,nran:nvarma] = OmTild1x;
          endif;
		  endif;
		  
		  bb_unp = bx;
	      if(Mixing == 1);
	        bb_unp = bb_unp|vech(OmTildx);
          endif;
		  
endif;

needx = selif(bb_unp,_max_active);
start_time2 = gettime();
Parametrized = 0;
"Unparametrized Likelihood is in Progress.............";
LL_Value = lpr1(bb_unp,Main_data);

"Score Matrix Calculation is in Progress..............";
GG_Value = lgd(bb_unp,Main_data);

"Hessian Calculation is in progress...................";
Hessian      = Hessian_Matrix(bb_unp,Main_data);


Hessian_inv  = inv(Hessian);
Hessian_var  = diag(Hessian_inv);

Hessian_St_Error = {};
for i(1,rows(Hessian_var),1);
	if(Hessian_var[i,1] < 0);
		Hessian_St_Error = Hessian_St_Error | 0;
	else;
		Hessian_St_Error = Hessian_St_Error | sqrt(Hessian_var[i,1]);
	endif;
endfor;

Cross_Product1 = selif(Gradient_store1',_max_active);
Cross_Product  = Cross_Product1*Cross_Product1';
st_error_IM    = sqrt(diag(inv(Cross_Product)));


Cov_BHHH       = Hessian_inv* Cross_Product*Hessian_inv';
Var_BHHH       = diag(Cov_BHHH);
st_error_BHHH  = sqrt(Var_BHHH);

end_time2   = gettime();
total_time2 = (end_time2-start_time2)/60;	

LL_org = f*nobs;
LL_cal = sumc(LL_Value);
	
	"---------------------------STANDARD ERROR---------------------------------------------------------------------------------";
	"Log-likelihood value       : " LL_cal;
    "Parameter  Estimate    ST.Hess   ST.Jaco   ST.BHHH";
	omat = (selif(_max_parNames,_max_active) ~ needx ~Hessian_St_Error ~st_error_IM~st_error_BHHH );
	mask = 0~1~1~1~1;
	let fmt[5,3] = 
				"-*.*s "  8 8  @ format info for variable names column @
				"*.*lf" 10 4   @ format info for mean column           @
				"*.*lf" 10 4   @ format info for mean column           @
				"*.*lf" 10 4   @ format info for mean column           @
				"*.*lf" 10 4   @ format info for mean column           @;
				
	y = printfm(omat,mask,fmt);

 "-----------------------------------------------------------------------------------------------";
 "-----------------------------------------------------------------------------------------------";

/*----------------------------------Parametrized Likelihood Main Function-------------------------------------------------------------*/
proc lpr(parm,dta);
	local LL1,LL2,LL3,LL4,LL5,store_ogc1,store_ogc2,store_ogc3,store_ogc4,store_ogc5,LL,seednext,seed20,temp;
    local store_seed1,store_seed2,store_seed3,store_seed4,store_seed5;
	
	ThreadBegin;
	{ LL1, store_ogc1, store_seed1 } = lprT(parm,dta,Data_Split[1,1],Data_Split[1,2]);
	ThreadEnd;
	
	ThreadBegin;
	{ LL2, store_ogc2, store_seed2 } = lprT(parm,dta,Data_Split[2,1],Data_Split[2,2]);
	ThreadEnd;
	
	
	ThreadBegin;
	{ LL3, store_ogc3, store_seed3 } = lprT(parm,dta,Data_Split[3,1],Data_Split[3,2]);
	ThreadEnd;
	
	ThreadBegin;
	{ LL4, store_ogc4, store_seed4 } = lprT(parm,dta,Data_Split[4,1],Data_Split[4,2]);
	ThreadEnd;
	
	ThreadBegin;
	{ LL5, store_ogc5, store_seed5 } = lprT(parm,dta,Data_Split[5,1],Data_Split[5,2]);
	ThreadEnd;
	ThreadJoin;
	
	LL = {}; Store_ogc = {}; Store_Seed = {};
	LL = LL | LL1 | LL2 | LL3 | LL4 | LL5;
	Store_ogc = Store_ogc | store_ogc1 | store_ogc2 | store_ogc3 | store_ogc4 | store_ogc5 ;
    Store_Seed = Store_Seed | store_seed1 | store_seed2 | store_seed3 | store_seed4 | store_seed5 ;
	clear LL1,LL2,LL3,LL4,LL5;
	clear store_ogc1,store_ogc2,store_ogc3,store_ogc4,store_ogc5;
    clear store_seed1,store_seed2,store_seed3,store_seed4,store_seed5;
	retp (LL);
endp;
/*----------------------------------Parametrized Likelihood Thread Function-------------------------------------------------------------*/
proc(3)=lprT(parm,dta,st_iter,end_iter);
    local smalla,chol_Lambda,smallb,chol_OmTild,chol_Psi,theta,delta,lamda,rho,OmTild,OmTild1,Lambda,Psi,v1,j,v,capS,capA,capC,theta_weight,capG,lamda_mat,capD;
	local Alt_sp_coeff,utility,Lambda_big,OmTild_big,Psi_big,pure_error,sigma1,capB,sigma,seednext,individual_prob,Omega_Error,Full_error,M,Alt_Chosen;
	local pair1,pair1_t,pair2,pair2_t,p1v,p1_mean,p2v,p1cv,p2cv,p2_mean,co_var,mean,om,Mean_final,Var_final,p,sss,Sq,seed20,temp,ch,Mean_changed,R,Error_changed;
	local Mean_final1,Var_final1,Index1,individual_prob_temp,Psi1,Lamda_big,iden_matrix,one_negative,Likelihood,pair_count,LL,U_Y,p1,X_req;
    local mean_gu,var_gu,mean_gu_final,var_gu_final,g1,pc,p1_1,Store_ogc_temp,num_obs,h1,curr_pair,Store_Seed_temp,obs_count,Hess_nn_temp,p11,r_st,r_end;
    
	if(Non_IID eq 1);
		  smallb = parm[1:nvarma];
		  if(Mixing == 1);
			  if(Parametrized == 1);
				  chol_OmTild = (upmat(xpnd(parm[nvarma+1:nvarma+nCholOmega])));
				  OmTild = zeros(nvarma,nvarma);       OmTild1 = chol_OmTild'*chol_OmTild;  
			  else;
				  chol_OmTild = xpnd(parm[nvarma+1:nvarma+nCholOmega]);
				  OmTild = zeros(nvarma,nvarma);       OmTild1 = chol_OmTild; 
			  endif;
		  
			  if( nran eq nvarma);
					OmTild = OmTild1;
			  else;
					OmTild[nran:nvarma,nran:nvarma] = OmTild1;
			  endif;
		  endif;
		  
		  if(Parametrized == 1);
			  chol_Psi    = (upmat(xpnd(parm[nvarma+nCholOmega+1:nvarma+nCholOmega+nCholErr])));
			  Psi         = zeros(nc,nc);           Psi[2:nc,2:nc]    = chol_Psi'*chol_Psi;
	      else;
		      chol_Psi    = xpnd(parm[nvarma+nCholOmega+1:nvarma+nCholOmega+nCholErr]);
		      Psi    = zeros(nc,nc);           Psi[2:nc,2:nc]    = chol_Psi;
		  endif;
		  Lamda_big      = eye(nchocc) .*. Psi;
	else;
		  smallb = parm[1:nvarma];
		  if(Mixing == 1);
		      if(Parametrized == 1);
				  chol_OmTild = (upmat(xpnd(parm[nvarma+1:nvarma+nCholOmega])));
				  OmTild = zeros(nvarma,nvarma);       OmTild1 = chol_OmTild'*chol_OmTild;  
			  else;
				  chol_OmTild = xpnd(parm[nvarma+1:nvarma+nCholOmega]);
				  OmTild = zeros(nvarma,nvarma);       OmTild1 = chol_OmTild; 
			  endif;
		  
			  if( nran eq nvarma);
					OmTild = OmTild1;
			  else;
					OmTild[nran:nvarma,nran:nvarma] = OmTild1;
			  endif;
		  endif;
		  
		  Psi1    = 0.5 * (eye(nc-1)) + 0.5 *ones((nc-1),(nc-1));  
		  Psi    = zeros(nc,nc);           Psi[2:nc,2:nc]    = Psi1;
		  Lamda_big      = eye(nchocc) .*. Psi;
	endif;
	  
	v1 = (ones(nc,1) .*. smallb )*~(dta[.,ivgenva])';
	 
	j=1;
	Utility = {};
    do until j == nc+1;
       Utility = Utility~(sumc(v1[(j-1)*nvarma+1:(j*nvarma),.]));
	   j = j+1;
    endo;
	
	iden_matrix = eye(nc-1);
    one_negative = -1*ones(nc-1,1);
    seednext     = Store_Seed[st_iter,1];
	Likelihood = {};
	pair_count = 0;	
	num_obs    = end_iter - st_iter + 1;
	Store_ogc_temp  = zeros(num_obs*Com_nn_r,Com_nn_c);
	Store_Seed_temp = zeros(num_obs,Com_nn_r);
    obs_count = 0;
	
	if(Parametrized == 0);
		Hess_nn_temp = zeros(num_obs*Com_nn_r,nn_eler);
	endif;
	
    for i(st_iter,end_iter,1);
       obs_count = obs_count + 1;
	   curr_pair = 0;
	   LL = 0; pc=1;

	   U_Y = {}; 
	   
	   
	   	   U_Y   = U_Y | reshape(Utility[(i-1)*nchocc+1:(i-1)*nchocc+nchocc,.],nchocc*nc,1); 
		   
		   if(Mixing == 1);
			   X_req = dta[(i-1)*nchocc+1:(i-1)*nchocc+nchocc,ivgenva];
			   X_req = reshape(X_req,nchocc*nc,nvarma);
			   Omega_Error = X_req*OmTild*X_req';
			   Full_error = Omega_Error + Lamda_big;
		   else;
			   Full_error = Lamda_big;
		   endif;
		   
		   M = zeros((nc-1)*nchocc,nc*nchocc);
		   Alt_chosen = dta[(i-1)*nchocc+1:(i-1)*nchocc+nchocc,altchm];
		   

		   for j(1,nchocc,1);
		   if(Alt_chosen[j] eq 1);
			temp = one_negative ~ iden_matrix;
		   elseif(Alt_chosen[j] eq nc);
			temp = iden_matrix ~ one_negative;
		   else;
			ch = Alt_chosen[j];
			temp = iden_matrix[.,1:ch-1] ~ one_negative ~ iden_matrix[.,ch:nc-1];
		   endif;
		   
		   M[(j-1)*(nc-1)+1:(nc-1)*j,(j-1)*(nc)+1:(nc*j)] = temp;
		   clear temp;
	       endfor;

	   
	       Mean_changed = M * U_Y;
		   Error_changed = M * Full_error * M';
		   
		
		
		if(nchocc > 1);
			if(eff_pair ne 1);
				for g4(1,nchocc-1,1);

				   for g5(g4+1,nchocc,1);

					 R = zeros(2*(nc-1),(nc-1)*nchocc);

					 R[1:nc-1,(g4-1)*(nc-1)+1:(nc-1)*g4] = eye(nc-1);

					 R[nc-1+1:2*(nc-1),(g5-1)*(nc-1)+1:(nc-1)*g5] = eye(nc-1);			 
					 
                     mean_gu    = - R*Mean_changed;
					 var_gu     =   R*Error_changed*R';
				   
					 om  = diag(var_gu);
					 mean_gu_final = mean_gu'./(sqrt(om))';
					 var_gu_final = corrvc(var_gu);
					 var_gu_final = diagrv(var_gu_final,ones(2*(nc-1),1));
				     
					 if(Parametrized == 1);
						 if(Ind_Pair == 1);
							 p11 = 1; p1 = 1; 
							 for j(1,2,1);
								 pair_count = pair_count + 1;
								 curr_pair  = curr_pair  + 1;
								 seed20 = seednext;
								 Store_Seed_temp[obs_count,curr_pair] = seed20;
								 r_st  = (j-1)*(nc-1) + 1;
								 r_end = (j-1)*(nc-1) + (nc-1);
								 if(GHK == 1);
								   {p11,g1,sss} = pdfmvnGHK(mean_gu_final[1,r_st:r_end],var_gu_final[r_st:r_end,r_st:r_end],Store_Seed[i,curr_pair]);
								 else;
								   {p11,g1,sss} = pdfmvnac(mean_gu_final[1,r_st:r_end],var_gu_final[r_st:r_end,r_st:r_end],Store_Seed[i,curr_pair]);
								 endif;
								 seednext = sss; 
								 Store_ogc_temp[pair_count,1] = p11;
					             Store_ogc_temp[pair_count,2:cols(g1)+1] = g1;
								 p1 = p1*p11;
							 endfor;
						 else;
								 pair_count = pair_count + 1;
								 curr_pair  = curr_pair  + 1;
								 seed20 = seednext;
								 Store_Seed_temp[obs_count,curr_pair] = seed20;
								 if(GHK == 1);
								   {p1,g1,sss} = pdfmvnGHK(mean_gu_final,var_gu_final,Store_Seed[i,curr_pair]);
								 else;
								   {p1,g1,sss} = pdfmvnac(mean_gu_final,var_gu_final,Store_Seed[i,curr_pair]);
								 endif;
								 seednext = sss; 
								 Store_ogc_temp[pair_count,1] = p1;
					             Store_ogc_temp[pair_count,2:cols(g1)+1] = g1;
						 endif;
					 else;
						 if(Ind_Pair == 1);
							 p11 = 1; p1 = 1; 
							 for j(1,2,1);
								 pair_count = pair_count + 1;
								 curr_pair  = curr_pair  + 1;
								 seed20 = seednext;
								 r_st  = (j-1)*(nc-1) + 1;
								 r_end = (j-1)*(nc-1) + (nc-1);
								 {p11,g1,h1,sss} = MVNcdfHess(mean_gu_final[1,r_st:r_end],var_gu_final[r_st:r_end,r_st:r_end],Store_Seed[i,curr_pair]);
								 
								 seednext = sss; 
								 Store_ogc_temp[pair_count,1] = p11;
								 Store_ogc_temp[pair_count,2:cols(g1)+1] = g1;
								 Hess_nn_temp[pair_count,1:cols(h1)] = h1;
								 p1 = p1*p11;
							 endfor;
						 else;
								 pair_count = pair_count + 1;
								 curr_pair  = curr_pair  + 1;
								 seed20 = seednext;
								 {p1,g1,h1,sss} = MVNcdfHess(mean_gu_final,var_gu_final,Store_Seed[i,curr_pair]);
								 seednext = sss; 
								
								 Store_ogc_temp[pair_count,1] = p1;
								 Store_ogc_temp[pair_count,2:cols(g1)+1] = g1;
								 Hess_nn_temp[pair_count,1:cols(h1)] = h1;
						 endif;
					 endif;
					 
					 if(p1 > upper_limit);
					    pc = pc * p1;
					 else;
					    pc = pc* (p1-((p1<=upper_limit)*(p1-upper_limit)));
				     endif;
					   
					 clear mean_gu,var_gu,om,mean_gu_final,var_gu_final,p1_1;
				 endfor;

			  endfor;
		  else;
			   for g4(1,st_pair,1);

				   for g5(g4+1,end_pair,1);

					 R = zeros(2*(nc-1),(nc-1)*nchocc);

					 R[1:nc-1,(g4-1)*(nc-1)+1:(nc-1)*g4] = eye(nc-1);

					 R[nc-1+1:2*(nc-1),(g5-1)*(nc-1)+1:(nc-1)*g5] = eye(nc-1);			 
					 
                     mean_gu    = - R*Mean_changed;
					 var_gu     =   R*Error_changed*R';
				   
					 om  = diag(var_gu);
					 mean_gu_final = mean_gu'./(sqrt(om))';
					 var_gu_final = corrvc(var_gu);
					 var_gu_final = diagrv(var_gu_final,ones(2*(nc-1),1));
				     
					 if(Parametrized == 1);
						 if(Ind_Pair == 1);
							 p11 = 1; p1 = 1; 
							 for j(1,2,1);
								 pair_count = pair_count + 1;
								 curr_pair  = curr_pair  + 1;
								 seed20 = seednext;
								 Store_Seed_temp[obs_count,curr_pair] = seed20;
								 r_st  = (j-1)*(nc-1) + 1;
								 r_end = (j-1)*(nc-1) + (nc-1);
								 if(GHK == 1);
								   {p11,g1,sss} = pdfmvnGHK(mean_gu_final[1,r_st:r_end],var_gu_final[r_st:r_end,r_st:r_end],Store_Seed[i,curr_pair]);
								 else;
								   {p11,g1,sss} = pdfmvnac(mean_gu_final[1,r_st:r_end],var_gu_final[r_st:r_end,r_st:r_end],Store_Seed[i,curr_pair]);
								 endif;
								 seednext = sss; 
								 Store_ogc_temp[pair_count,1] = p11;
					             Store_ogc_temp[pair_count,2:cols(g1)+1] = g1;
								 p1 = p1*p11;
							 endfor;
						 else;
								 pair_count = pair_count + 1;
								 curr_pair  = curr_pair  + 1;
								 seed20 = seednext;
								 Store_Seed_temp[obs_count,curr_pair] = seed20;
								 if(GHK == 1);
								   {p1,g1,sss} = pdfmvnGHK(mean_gu_final,var_gu_final,Store_Seed[i,curr_pair]);
								 else;
								   {p1,g1,sss} = pdfmvnac(mean_gu_final,var_gu_final,Store_Seed[i,curr_pair]);
								 endif;
								 seednext = sss; 
								 Store_ogc_temp[pair_count,1] = p1;
					             Store_ogc_temp[pair_count,2:cols(g1)+1] = g1;
						 endif;
					 else;
						 if(Ind_Pair == 1);
							 p11 = 1; p1 = 1; 
							 for j(1,2,1);
								 pair_count = pair_count + 1;
								 curr_pair  = curr_pair  + 1;
								 seed20 = seednext;
								 r_st  = (j-1)*(nc-1) + 1;
								 r_end = (j-1)*(nc-1) + (nc-1);
								 {p11,g1,h1,sss} = MVNcdfHess(mean_gu_final[1,r_st:r_end],var_gu_final[r_st:r_end,r_st:r_end],Store_Seed[i,curr_pair]);
								 
								 seednext = sss; 
								 Store_ogc_temp[pair_count,1] = p11;
								 Store_ogc_temp[pair_count,2:cols(g1)+1] = g1;
								 Hess_nn_temp[pair_count,1:cols(h1)] = h1;
								 p1 = p1*p11;
							 endfor;
						 else;
								 pair_count = pair_count + 1;
								 curr_pair  = curr_pair  + 1;
								 seed20 = seednext;
								 {p1,g1,h1,sss} = MVNcdfHess(mean_gu_final,var_gu_final,Store_Seed[i,curr_pair]);
								 seednext = sss; 
								
								 Store_ogc_temp[pair_count,1] = p1;
								 Store_ogc_temp[pair_count,2:cols(g1)+1] = g1;
								 Hess_nn_temp[pair_count,1:cols(h1)] = h1;
						 endif;
					 endif;
				 
				     if(p1 > upper_limit);
					    pc = pc * p1;
					 else;
					    pc = pc* (p1-((p1<=upper_limit)*(p1-upper_limit)));
				     endif;
					   
					 clear mean_gu,var_gu,om,mean_gu_final,var_gu_final,p1_1;
				 endfor;

			  endfor;
	   
	          if(end_pair < nchocc);
			  for g5(end_pair+1,nchocc,1);

					 R = zeros((nc-1),(nc-1)*nchocc);

					 R[1:nc-1,(g5-1)*(nc-1)+1:(nc-1)*g5] = eye(nc-1);

					 pair_count = pair_count + 1;
					 curr_pair  = curr_pair  + 1;
					 mean_gu    = - R*Mean_changed;
					 var_gu     =   R*Error_changed*R';
				   
					 om  = diag(var_gu);
					 mean_gu_final = mean_gu'./(sqrt(om))';
					 var_gu_final = corrvc(var_gu);
					 var_gu_final = diagrv(var_gu_final,ones((nc-1),1));
				   
				     if((nc-1) > 2);
						 if(Parametrized == 1);
						 seed20 = seednext;
						 Store_Seed_temp[obs_count,curr_pair] = seed20;
						 
						 {p1,g1,sss} = pdfmvnac(mean_gu_final,var_gu_final,Store_Seed[i,curr_pair]);
						 Store_ogc_temp[pair_count,1] = p1;
						 Store_ogc_temp[pair_count,2:cols(g1)+1] = g1;
						 seednext = sss; 
					     else;
						 {p1,g1,h1,sss} = MVNcdfHess(mean_gu_final,var_gu_final,Store_Seed[i,curr_pair]);
						 Store_ogc_temp[pair_count,1] = p1;
						 Store_ogc_temp[pair_count,2:cols(g1)+1] = g1;
						 Hess_nn_temp[pair_count,1:cols(h1)] = h1;
						 seednext = sss; 
						 endif;
				     else;
					      if(Parametrized == 1);
						  p1 = cdfbvn(mean_gu_final[1,1],mean_gu_final[1,2],var_gu_final[1,2]);
						  g1 = cdfbvn_grad(mean_gu_final[1,1],mean_gu_final[1,2],var_gu_final[1,2]);
						  g1 = g1';
						  Store_ogc_temp[pair_count,1] = p1;
						  Store_ogc_temp[pair_count,2:cols(g1)+1] = g1;
					      else;
						  p1  = cdfbvn(mean_gu_final[1,1],mean_gu_final[1,2],var_gu_final[1,2]);
						  g1  = cdfbvn_grad(mean_gu_final[1,1],mean_gu_final[1,2],var_gu_final[1,2]);
						  g1  = g1';
						  h1  = cdfbvn_Hess(mean_gu_final[1,1],mean_gu_final[1,2],var_gu_final[1,2]);
						  h1  = h1';
						  Store_ogc_temp[pair_count,1] = p1;
					      Store_ogc_temp[pair_count,2:cols(g1)+1] = g1;
					      Hess_nn_temp[pair_count,1:cols(h1)] = h1;
					      endif;
					 endif;
                      
									   
					 if(p1 > upper_limit);
					    pc = pc * p1;
					 else;
					    pc = pc* (p1-((p1<=upper_limit)*(p1-upper_limit)));
				     endif;
					   
					 clear mean_gu,var_gu,om,mean_gu_final,var_gu_final,p1_1;
			endfor;
	  	    endif;
		endif;   	   
	   else;
		            
                     pair_count = pair_count + 1;
					 curr_pair  = curr_pair  + 1;
 					 mean_gu    = - Mean_changed;
					 var_gu     =   Error_changed;
				   
					 om  = diag(var_gu);
					 mean_gu_final = mean_gu'./(sqrt(om))';
					 var_gu_final = corrvc(var_gu);
					 var_gu_final = diagrv(var_gu_final,ones((nc-1),1));
					 
					 if((nc-1) > 2);
						 if(Parametrized == 1);
						 seed20 = seednext;
						 Store_Seed_temp[obs_count,curr_pair] = seed20;
						 
						 {p1,g1,sss} = pdfmvnac(mean_gu_final,var_gu_final,Store_Seed[i,curr_pair]);
						 Store_ogc_temp[pair_count,1] = p1;
						 Store_ogc_temp[pair_count,2:cols(g1)+1] = g1;
						 seednext = sss; 
					     else;
						 {p1,g1,h1,sss} = MVNcdfHess(mean_gu_final,var_gu_final,Store_Seed[i,curr_pair]);
						 Store_ogc_temp[pair_count,1] = p1;
						 Store_ogc_temp[pair_count,2:cols(g1)+1] = g1;
						 Hess_nn_temp[pair_count,1:cols(h1)] = h1;
						 seednext = sss; 
						 endif;
				     elseif((nc-1) == 2);
					      if(Parametrized == 1);
						  p1 = cdfbvn(mean_gu_final[1,1],mean_gu_final[1,2],var_gu_final[1,2]);
						  g1 = cdfbvn_grad(mean_gu_final[1,1],mean_gu_final[1,2],var_gu_final[1,2]);
						  g1 = g1';
						  Store_ogc_temp[pair_count,1] = p1;
						  Store_ogc_temp[pair_count,2:cols(g1)+1] = g1;
						  seed20 = seednext;
						  Store_Seed_temp[obs_count,curr_pair] = seed20;
						  seednext = seed20; 
					      else;
						  p1  = cdfbvn(mean_gu_final[1,1],mean_gu_final[1,2],var_gu_final[1,2]);
						  g1  = cdfbvn_grad(mean_gu_final[1,1],mean_gu_final[1,2],var_gu_final[1,2]);
						  g1  = g1';
						  h1  = cdfbvn_Hess(mean_gu_final[1,1],mean_gu_final[1,2],var_gu_final[1,2]);
						  h1  = h1';
						  Store_ogc_temp[pair_count,1] = p1;
					      Store_ogc_temp[pair_count,2:cols(g1)+1] = g1;
					      Hess_nn_temp[pair_count,1:cols(h1)] = h1;
					      endif;
					 elseif(nc == 2);
					      if(Parametrized == 1);
						  p1 = cdfn(mean_gu_final);
						  g1 = pdfn(mean_gu_final);
						  g1 = g1';
						  Store_ogc_temp[pair_count,1] = p1;
						  Store_ogc_temp[pair_count,2:cols(g1)+1] = g1;
						  seed20 = seednext;
						  Store_Seed_temp[obs_count,curr_pair] = seed20;
						  seednext = seed20;
					      else;
						  p1 = cdfn(mean_gu_final);
						  g1 = pdfn(mean_gu_final);
						  g1  = g1';
						  h1  = pdfnd(mean_gu_final);
						  h1  = h1';
						  Store_ogc_temp[pair_count,1] = p1;
					      Store_ogc_temp[pair_count,2:cols(g1)+1] = g1;
					      Hess_nn_temp[pair_count,1:cols(h1)] = h1;
					      endif;
					 endif;
					 
					 if(p1 > upper_limit);
					   pc = p1;
					 else;
					   pc = (p1-((p1<=upper_limit)*(p1-upper_limit)));
					 endif;
					 clear mean_gu,var_gu,om,mean_gu_final,var_gu_final;
		endif;
      
	LL = ln(pc);
	Likelihood = Likelihood | LL;
	clear Mean_changed,Error_changed;
    endfor;
    if(Parametrized == 1);
	retp(Likelihood,Store_ogc_temp[1:pair_count,.],Store_Seed_temp[1:obs_count,1:Com_nn_r]);
    else;
	retp(Likelihood,Store_ogc_temp[1:pair_count,.],Hess_nn_temp[1:pair_count,.]);
	endif;
endp;

/*----------------------------------Parametrized Likelihood Main Function-------------------------------------------------------------*/
proc(1)=lpr1(parm,dta);
	local LL_Value1,LL_Value2,LL_Value3,LL_Value4,LL_Value5,Store_ogc1,Store_ogc2,Store_ogc3,Store_ogc4,Store_ogc5;
	local Hess_nn1,Hess_nn2,Hess_nn3,Hess_nn4,Hess_nn5,LL;
	
	ThreadBegin;
    { LL_Value1, Store_ogc1, Hess_nn1 }  = lprT(bb_unp,Main_data,Data_Split[1,1],Data_Split[1,2]);
    ThreadEnd;

    ThreadBegin;
    { LL_Value2, Store_ogc2, Hess_nn2 }  = lprT(bb_unp,Main_data,Data_Split[2,1],Data_Split[2,2]);
    ThreadEnd;

    ThreadBegin;
    { LL_Value3, Store_ogc3, Hess_nn3 }  = lprT(bb_unp,Main_data,Data_Split[3,1],Data_Split[3,2]);
    ThreadEnd;

    ThreadBegin;
    { LL_Value4, Store_ogc4, Hess_nn4 }  = lprT(bb_unp,Main_data,Data_Split[4,1],Data_Split[4,2]);
    ThreadEnd;

    ThreadBegin;
    { LL_Value5, Store_ogc5, Hess_nn5 }  = lprT(bb_unp,Main_data,Data_Split[5,1],Data_Split[5,2]);
    ThreadEnd;
    ThreadJoin;

    LL = {}; Store_ogc = {}; Hess_nn = {};
	LL        = LL | LL_Value1  | LL_Value2  | LL_Value3  | LL_Value4  | LL_Value5;
    Store_ogc = Store_ogc | Store_ogc1 | Store_ogc2 | Store_ogc3 | Store_ogc4 | Store_ogc5 ;
    Hess_nn   = Hess_nn   | Hess_nn1   | Hess_nn2   | Hess_nn3   | Hess_nn4   | Hess_nn5 ;
	
	clear LL_Value1,LL_Value2,LL_Value3,LL_Value4,LL_Value5;
    clear Store_ogc1,Store_ogc2,Store_ogc3,Store_ogc4,Store_ogc5;
    clear Hess_nn1,Hess_nn2,Hess_nn3,Hess_nn4,Hess_nn5;
	
	retp (LL);
endp;
/*----------------------------------Parametrized Gradient Function-------------------------------------------------------------*/
 proc lgd(parm,dta);
	local GG1,GG2,GG3,gradient;
	
	ThreadBegin;
	GG1 = lgdT_beta(parm,dta);
	ThreadEnd;
	
	ThreadBegin;
    if(Mixing == 1);
	GG2 = lgdT_tild(parm,dta);
	endif;
    ThreadEnd;
	
	ThreadBegin;
    if(nc > 2);
	if(Non_IID eq 1);
	GG3 = lgdT_psi(parm,dta);
	endif;
    endif;
	ThreadEnd;
	ThreadJoin;
	
	gradient = {};
	if(Non_IID eq 1);	
	    gradient = gradient ~ GG1;
	    if(Mixing == 1);
		  gradient = gradient ~ GG2;
	    endif;
	    if(nc > 2);
        gradient = gradient ~ GG3;
        endif;
    else;
		gradient = gradient ~ GG1;
	    if(Mixing == 1);
		  gradient = gradient ~ GG2;
	    endif;
	endif;
	
	if(Parametrized == 1);
	  Gradient_Store = gradient;
    else;
	  Gradient_Store1 = gradient;
    endif;
  
    retp (gradient);
endp;
 
 
 /*----------------------------------Parametrized Gradient Function-------------------------------------------------------------*/
 proc(1)=lgdT_beta(parm,dta);
	 local smalla,chol_lambda,smallb,chol_OmTild,chol_Psi,theta,delta,lamda,rho,OmTild,OmTild1,Lambda,Psi,seed20,temp,ch,iden_matrix,one_negative,Error_changed_d,var_gu_d,var_gu_final_d;
     local smalla_gradient,lambda_gradient,smallb_gradient,OmTild_gradient,Psi_gradient,theta_gradient,delta_gradient,lamda_gradient,rho_gradient,Lamda_big;
     local iatr,d_capA,forgcapV,diff_mat1,diff_mat,seednext,Total_g,pair1,pair1_t,pair2,pair2_t,p1v,p1v_d,p1_mean,p1d_mean,p2v,p2v_d,p1cv_d,p2cv_d,p1cv,p2cv,p2_mean,co_var,mean,p2d_mean,meand,co_var_d;
     local om,omncd,Mean_final,Meand_final,Var_final,shi_a,shi_r,g_smalla,ilambda,d_chol_Lambda,d_Lambda,final_error1,shi_r_unq,g_lambda,Var_d_final,g,w,sss,fix_check,forgx,forgv2,j,forgv,g_smallb;
     local d_chol_OmTild,d_OmTild,OmTild_big,g_OmTild,d_chol_Psi,d_Psi,Psi_big,g_Psi,theta_weight,G_diff,Lambda_big,g_theta,v2,Sq,d_Sq,v,Delta_Mean,Delta_Error,g_delta,lamda_mat,lamda_dig,d_capD,ilamda,g_lamda;
     local d_sq1,d_sq2,d_capC,g_rho,gradient,dd_theta,dd_delta,dd_lamda,dd_rho,Final_error,d_capS,d_OmTild1,ir,capA,Alt_sp_coeff,Full_error,M,Alt_chosen,Full_error_d;
	 local Meand_final1,Var_d_final1,Mean_final1,Var_final1,Index1,Total_g_temp,Psi1,Utility1,Utilityd,gg_temp,U_Y,U_Yd,p1_dd,X_req,Omega_Error,g1,d_chol_omega,d_omega,gg;
	 local Mean_changed,Mean_changed_d,Error_changed,R,mean_gu,var_gu,mean_gu_final,var_gu_final,mean_gu_d,mean_gu_final_d,pair_count,w1,Omega_gradient,Lamdad;
	 local beta_count,tild_count,psi_count,p11,r_st,r_end,p1_dd_temp;
	 
	 if(Non_IID eq 1);
		  smallb = parm[1:nvarma];
		  if(Mixing == 1);
			  if(Parametrized == 1);
				  chol_OmTild = (upmat(xpnd(parm[nvarma+1:nvarma+nCholOmega])));
				  OmTild = zeros(nvarma,nvarma);       OmTild1 = chol_OmTild'*chol_OmTild;  
			  else;
				  chol_OmTild = xpnd(parm[nvarma+1:nvarma+nCholOmega]);
				  OmTild = zeros(nvarma,nvarma);       OmTild1 = chol_OmTild; 
			  endif;
		  
			  if( nran eq nvarma);
					OmTild = OmTild1;
			  else;
					OmTild[nran:nvarma,nran:nvarma] = OmTild1;
			  endif;
		  endif;
		  
		  if(Parametrized == 1);
			  chol_Psi    = (upmat(xpnd(parm[nvarma+nCholOmega+1:nvarma+nCholOmega+nCholErr])));
			  Psi         = zeros(nc,nc);           Psi[2:nc,2:nc]    = chol_Psi'*chol_Psi;
	      else;
		      chol_Psi    = xpnd(parm[nvarma+nCholOmega+1:nvarma+nCholOmega+nCholErr]);
		      Psi    = zeros(nc,nc);           Psi[2:nc,2:nc]    = chol_Psi;
		  endif;
		  Lamda_big      = eye(nchocc) .*. Psi;
	else;
		  smallb = parm[1:nvarma];
		  if(Mixing == 1);
		      if(Parametrized == 1);
				  chol_OmTild = (upmat(xpnd(parm[nvarma+1:nvarma+nCholOmega])));
				  OmTild = zeros(nvarma,nvarma);       OmTild1 = chol_OmTild'*chol_OmTild;  
			  else;
				  chol_OmTild = xpnd(parm[nvarma+1:nvarma+nCholOmega]);
				  OmTild = zeros(nvarma,nvarma);       OmTild1 = chol_OmTild; 
			  endif;
		  
			  if( nran eq nvarma);
					OmTild = OmTild1;
			  else;
					OmTild[nran:nvarma,nran:nvarma] = OmTild1;
			  endif;
		  endif;
		  
		  Psi1    = 0.5 * (eye(nc-1)) + 0.5 *ones((nc-1),(nc-1));  
		  Psi    = zeros(nc,nc);           Psi[2:nc,2:nc]    = Psi1;
		  Lamda_big      = eye(nchocc) .*. Psi;
	endif;
	 
    v1 = (ones(nc,1) .*. smallb )*~(dta[.,ivgenva])';
	 
	j=1;
	Utility1 = {};
    do until j == nc+1;
       Utility1 = Utility1~(sumc(v1[(j-1)*nvarma+1:(j*nvarma),.]));
	   j = j+1;
    endo;
	 
	 iden_matrix = eye(nc-1);
     one_negative = -1*ones(nc-1,1);
	
	 smallb_gradient = {};
	 
 
for iatr(1,nvarma,1);
	fix_check = _max_active[iatr];
		
	if(fix_check eq 0);
		smallb_gradient = smallb_gradient ~ zeros(nind,1);
	else;
		forgx = smallb*0;forgx[iatr]=1;
        forgv2 = (ones(nc,1) .*. forgx)*~(dta[.,ivgenva])';
        j=1;
        forgv = {};
        do until j == nc+1;
            forgv = forgv~(sumc(forgv2[(j-1)*nvarma+1:(j*nvarma),.]));
            j = j+1;
        endo;
        clear forgv2;

        Utilityd = forgv; 
        	    
		clear forgv2,forgv,forgcapV,diff_mat1;
		beta_count = 0;
		gg_temp = {};
		
		for i(1,nind,1);
				   U_Y = {}; U_Yd = {}; 
				   p1_dd = 0; 
				   
				   U_Y   = U_Y | reshape(Utility1[(i-1)*nchocc+1:(i-1)*nchocc+nchocc,.],nchocc*nc,1);   
				   U_Yd   = U_Yd | reshape(Utilityd[(i-1)*nchocc+1:(i-1)*nchocc+nchocc,.],nchocc*nc,1); 
				   
                   if(Mixing == 1);
					   X_req = dta[(i-1)*nchocc+1:(i-1)*nchocc+nchocc,ivgenva];
					   X_req = reshape(X_req,nchocc*nc,nvarma);
					   Omega_Error = X_req*OmTild*X_req';
					   Full_error = Omega_Error + Lamda_big;
				  else;
					   Full_error = Lamda_big;
				  endif;
		   		   
				   M = zeros((nc-1)*nchocc,nc*nchocc);
				   Alt_chosen = dta[(i-1)*nchocc+1:(i-1)*nchocc+nchocc,altchm];
				   

				   for j(1,nchocc,1);
				   if(Alt_chosen[j] eq 1);
					temp = one_negative ~ iden_matrix;
				   elseif(Alt_chosen[j] eq nc);
					temp = iden_matrix ~ one_negative;
				   else;
					ch = Alt_chosen[j];
					temp = iden_matrix[.,1:ch-1] ~ one_negative ~ iden_matrix[.,ch:nc-1];
				   endif;
				   
				   M[(j-1)*(nc-1)+1:(nc-1)*j,(j-1)*(nc)+1:(nc*j)] = temp;
				   clear temp;
				   endfor;

			   
				   Mean_changed = M * U_Y;
				   Mean_changed_d = M * U_Yd;
				   Error_changed = M * Full_error * M';
				
                if(nchocc > 1);				
				   if(eff_pair ne 1);
						for g4(1,nchocc-1,1);

						   for g5(g4+1,nchocc,1);

							 R = zeros(2*(nc-1),(nc-1)*nchocc);

							 R[1:nc-1,(g4-1)*(nc-1)+1:(nc-1)*g4] = eye(nc-1);

							 R[nc-1+1:2*(nc-1),(g5-1)*(nc-1)+1:(nc-1)*g5] = eye(nc-1);			 
							 

							 mean_gu    = - R*Mean_changed;
							 var_gu     =   R*Error_changed*R';   

						   	 om  = sqrt(diag(var_gu));
							 mean_gu_final = mean_gu./om;
							 var_gu_final = corrvc(var_gu);
							 var_gu_final = diagrv(var_gu_final,ones(2*(nc-1),1));
						   
							 mean_gu_d   =      -R*Mean_changed_d;
							 mean_gu_final_d  = (mean_gu_d)./om;
							 
							 if(Ind_Pair == 1);
								 p1_dd_temp = 0; p11 = 1;
								 for j(1,2,1);
									 beta_count = beta_count + 1;
									 r_st  = (j-1)*(nc-1) + 1;
									 r_end = (j-1)*(nc-1) + (nc-1);
									 p1_dd_temp = p1_dd_temp + ((1/Store_ogc[beta_count,1])*(Store_ogc[beta_count,2:rows(mean_gu_final_d[r_st:r_end,1])+1] * mean_gu_final_d[r_st:r_end,1]));
									 p11 = p11*Store_ogc[beta_count,1];
								 endfor;
							     if(p11 > upper_limit);
						     	        p1_dd = p1_dd + p1_dd_temp;
							     endif;
							 else;
								     beta_count = beta_count + 1;
									 if(Store_ogc[beta_count,1] > upper_limit);
						     	        p1_dd = p1_dd + ((1/Store_ogc[beta_count,1])*(Store_ogc[beta_count,2:rows(mean_gu_final_d)+1] * mean_gu_final_d));
							         endif;	 
							 endif;							   
							 clear mean_gu,var_gu,om,mean_gu_final,var_gu_final,mean_gu_d,mean_gu_final_d,w1,g1;
						  endfor;

						endfor;
				  else;
						for g4(1,st_pair,1);

						   for g5(g4+1,end_pair,1);

							 R = zeros(2*(nc-1),(nc-1)*nchocc);

							 R[1:nc-1,(g4-1)*(nc-1)+1:(nc-1)*g4] = eye(nc-1);

							 R[nc-1+1:2*(nc-1),(g5-1)*(nc-1)+1:(nc-1)*g5] = eye(nc-1);			 
							 
							 mean_gu    = - R*Mean_changed;
							 var_gu     =   R*Error_changed*R';   

						   

							 om  = sqrt(diag(var_gu));
							 mean_gu_final = mean_gu./om;
							 var_gu_final = corrvc(var_gu);
							 var_gu_final = diagrv(var_gu_final,ones(2*(nc-1),1));
						   
							 mean_gu_d   =      -R*Mean_changed_d;
							 mean_gu_final_d  = (mean_gu_d)./om;
							 
							 if(Ind_Pair == 1);
								 p1_dd_temp = 0; p11 = 1;
								 for j(1,2,1);
									 beta_count = beta_count + 1;
									 r_st  = (j-1)*(nc-1) + 1;
									 r_end = (j-1)*(nc-1) + (nc-1);
									 p1_dd_temp = p1_dd_temp + ((1/Store_ogc[beta_count,1])*(Store_ogc[beta_count,2:rows(mean_gu_final_d[r_st:r_end,1])+1] * mean_gu_final_d[r_st:r_end,1]));
									 p11 = p11*Store_ogc[beta_count,1];
								 endfor;
							     if(p11 > upper_limit);
						     	        p1_dd = p1_dd + p1_dd_temp;
							     endif;
							 else;
								     beta_count = beta_count + 1;
									 if(Store_ogc[beta_count,1] > upper_limit);
						     	        p1_dd = p1_dd + ((1/Store_ogc[beta_count,1])*(Store_ogc[beta_count,2:rows(mean_gu_final_d)+1] * mean_gu_final_d));
							         endif;	 
							 endif;						   
							clear mean_gu,var_gu,om,mean_gu_final,var_gu_final,mean_gu_d,mean_gu_final_d,w1,g1;
						 endfor;

					  endfor;
	   
	                  if(end_pair < nchocc);
					  for g5(end_pair+1,nchocc,1);

							 R = zeros((nc-1),(nc-1)*nchocc);

							 R[1:nc-1,(g5-1)*(nc-1)+1:(nc-1)*g5] = eye(nc-1);

							 mean_gu    = - R*Mean_changed;
							 var_gu     =   R*Error_changed*R';   

						   	 om  = sqrt(diag(var_gu));
							 mean_gu_final = mean_gu./om;
							 var_gu_final = corrvc(var_gu);
							 var_gu_final = diagrv(var_gu_final,ones((nc-1),1));
						   
							 mean_gu_d   =      -R*Mean_changed_d;
							 mean_gu_final_d  = (mean_gu_d)./om;
							 
							beta_count = beta_count + 1;
							if(Store_ogc[beta_count,1] > upper_limit);
						     	p1_dd = p1_dd + ((1/Store_ogc[beta_count,1])*(Store_ogc[beta_count,2:rows(mean_gu_final_d)+1] * mean_gu_final_d));
							endif;
					        clear mean_gu,var_gu,om,mean_gu_final,var_gu_final,mean_gu_d,mean_gu_final_d,w1,g1;
					endfor;
					endif;	
			    endif;
			  else;
				             mean_gu    = - Mean_changed;
							 var_gu     =   Error_changed;   

						   	 om  = sqrt(diag(var_gu));
							 mean_gu_final = mean_gu./om;
							 var_gu_final = corrvc(var_gu);
							 var_gu_final = diagrv(var_gu_final,ones((nc-1),1));
						   
							 mean_gu_d   =      -Mean_changed_d;
							 mean_gu_final_d  = (mean_gu_d)./om;

                             beta_count = beta_count + 1;
							 if(Store_ogc[beta_count,1] > upper_limit);
						     	p1_dd = ((1/Store_ogc[beta_count,1])*(Store_ogc[beta_count,2:rows(mean_gu_final_d)+1] * mean_gu_final_d));
							 endif;
                             clear mean_gu,var_gu,om,mean_gu_final,var_gu_final,mean_gu_d,mean_gu_final_d,w1,g1;
				endif;



					
			 gg_temp = gg_temp | p1_dd;	 
			 clear Mean_changed,Mean_changed_d,Error_changed;
        endfor;			 
		smallb_gradient = smallb_gradient ~ gg_temp;
		clear Utilityd;
	endif;
endfor;
retp(smallb_gradient);
endp;

proc(1)= lgdT_tild(parm,dta);
	 local smalla,chol_lambda,smallb,chol_OmTild,chol_Psi,theta,delta,lamda,rho,OmTild,OmTild1,Lambda,Psi,seed20,temp,ch,iden_matrix,one_negative,Error_changed_d,var_gu_d,var_gu_final_d;
     local smalla_gradient,lambda_gradient,smallb_gradient,OmTild_gradient,Psi_gradient,theta_gradient,delta_gradient,lamda_gradient,rho_gradient,Lamda_big;
     local iatr,d_capA,forgcapV,diff_mat1,diff_mat,seednext,Total_g,pair1,pair1_t,pair2,pair2_t,p1v,p1v_d,p1_mean,p1d_mean,p2v,p2v_d,p1cv_d,p2cv_d,p1cv,p2cv,p2_mean,co_var,mean,p2d_mean,meand,co_var_d;
     local om,omncd,Mean_final,Meand_final,Var_final,shi_a,shi_r,g_smalla,ilambda,d_chol_Lambda,d_Lambda,final_error1,shi_r_unq,g_lambda,Var_d_final,g,w,sss,fix_check,forgx,forgv2,j,forgv,g_smallb;
     local d_chol_OmTild,d_OmTild,OmTild_big,g_OmTild,d_chol_Psi,d_Psi,Psi_big,g_Psi,theta_weight,G_diff,Lambda_big,g_theta,v2,Sq,d_Sq,v,Delta_Mean,Delta_Error,g_delta,lamda_mat,lamda_dig,d_capD,ilamda,g_lamda;
     local d_sq1,d_sq2,d_capC,g_rho,gradient,dd_theta,dd_delta,dd_lamda,dd_rho,Final_error,d_capS,d_OmTild1,ir,capA,Alt_sp_coeff,Full_error,M,Alt_chosen,Full_error_d;
	 local Meand_final1,Var_d_final1,Mean_final1,Var_final1,Index1,Total_g_temp,Psi1,Utility1,Utilityd,gg_temp,U_Y,U_Yd,p1_dd,X_req,Omega_Error,g1,d_chol_omega,d_omega,gg;
	 local Mean_changed,Mean_changed_d,Error_changed,R,mean_gu,var_gu,mean_gu_final,var_gu_final,mean_gu_d,mean_gu_final_d,pair_count,w1,Omega_gradient,Lamdad;
	 local beta_count,tild_count,psi_count,p11,r_st,r_end,p1_dd_temp;
	 
	 if(Non_IID eq 1);
		  smallb = parm[1:nvarma];
		  if(Mixing == 1);
			  if(Parametrized == 1);
				  chol_OmTild = (upmat(xpnd(parm[nvarma+1:nvarma+nCholOmega])));
				  OmTild = zeros(nvarma,nvarma);       OmTild1 = chol_OmTild'*chol_OmTild;  
			  else;
				  chol_OmTild = xpnd(parm[nvarma+1:nvarma+nCholOmega]);
				  OmTild = zeros(nvarma,nvarma);       OmTild1 = chol_OmTild; 
			  endif;
		  
			  if( nran eq nvarma);
					OmTild = OmTild1;
			  else;
					OmTild[nran:nvarma,nran:nvarma] = OmTild1;
			  endif;
		  endif;
		  
		  if(Parametrized == 1);
			  chol_Psi    = (upmat(xpnd(parm[nvarma+nCholOmega+1:nvarma+nCholOmega+nCholErr])));
			  Psi         = zeros(nc,nc);           Psi[2:nc,2:nc]    = chol_Psi'*chol_Psi;
	      else;
		      chol_Psi    = xpnd(parm[nvarma+nCholOmega+1:nvarma+nCholOmega+nCholErr]);
		      Psi    = zeros(nc,nc);           Psi[2:nc,2:nc]    = chol_Psi;
		  endif;
		  Lamda_big      = eye(nchocc) .*. Psi;
	else;
		  smallb = parm[1:nvarma];
		  if(Mixing == 1);
		      if(Parametrized == 1);
				  chol_OmTild = (upmat(xpnd(parm[nvarma+1:nvarma+nCholOmega])));
				  OmTild = zeros(nvarma,nvarma);       OmTild1 = chol_OmTild'*chol_OmTild;  
			  else;
				  chol_OmTild = xpnd(parm[nvarma+1:nvarma+nCholOmega]);
				  OmTild = zeros(nvarma,nvarma);       OmTild1 = chol_OmTild; 
			  endif;
		  
			  if( nran eq nvarma);
					OmTild = OmTild1;
			  else;
					OmTild[nran:nvarma,nran:nvarma] = OmTild1;
			  endif;
		  endif;
		  
		  Psi1    = 0.5 * (eye(nc-1)) + 0.5 *ones((nc-1),(nc-1));  
		  Psi    = zeros(nc,nc);           Psi[2:nc,2:nc]    = Psi1;
		  Lamda_big      = eye(nchocc) .*. Psi;
	endif;
	 
    v1 = (ones(nc,1) .*. smallb )*~(dta[.,ivgenva])';
	 
	j=1;
	Utility1 = {};
    do until j == nc+1;
       Utility1 = Utility1~(sumc(v1[(j-1)*nvarma+1:(j*nvarma),.]));
	   j = j+1;
    endo;
	 
	 iden_matrix = eye(nc-1);
     one_negative = -1*ones(nc-1,1);
	
	Omega_gradient = {};
    for iomega(1,nCholOmega,1);
		fix_check = _max_active[nvarma+iomega];
	    	
	    if(fix_check eq 0);
		  Omega_gradient = Omega_gradient ~ zeros(nind,1);
	    else;
		  
			  if(Parametrized == 1);
				  d_chol_omega = zeros(ncholOmega,1);
				  d_chol_omega[iomega]=1;                        
				  d_chol_omega = upmat(xpnd(d_chol_omega));
				  d_omega = d_chol_omega'*chol_OmTild + chol_OmTild'*d_chol_omega;
			  else;
                  d_chol_omega = zeros(ncholOmega,1);
				  d_chol_omega[iomega]=1;                        
				  d_chol_omega = xpnd(d_chol_omega);
				  d_omega = d_chol_omega;
              endif;				  
			  clear d_chol_omega;
			  
			  Utilityd = zeros(nobs,nc); 
			  
			  tild_count = 0;
			  gg_temp = {};
			  
			for i(1,nind,1);
				   U_Y = {}; U_Yd = {}; gg = 0;
				   p1_dd = 0; 
				   
				   U_Y   = U_Y | reshape(Utility1[(i-1)*nchocc+1:(i-1)*nchocc+nchocc,.],nchocc*nc,1);   
				   U_Yd   = U_Yd | reshape(Utilityd[(i-1)*nchocc+1:(i-1)*nchocc+nchocc,.],nchocc*nc,1); 
				   
				   
				   X_req = dta[(i-1)*nchocc+1:(i-1)*nchocc+nchocc,ivgenva];
				   X_req = reshape(X_req,nchocc*nc,nvarma);
				   Omega_Error = X_req*OmTild*X_req';
				   Full_error = Omega_Error + Lamda_big;
				   				   
				   Full_error_d = X_req*d_omega*X_req';
				   
				   M = zeros((nc-1)*nchocc,nc*nchocc);
				   Alt_chosen = dta[(i-1)*nchocc+1:(i-1)*nchocc+nchocc,altchm];
				   

				   for j(1,nchocc,1);
				   if(Alt_chosen[j] eq 1);
					temp = one_negative ~ iden_matrix;
				   elseif(Alt_chosen[j] eq nc);
					temp = iden_matrix ~ one_negative;
				   else;
					ch = Alt_chosen[j];
					temp = iden_matrix[.,1:ch-1] ~ one_negative ~ iden_matrix[.,ch:nc-1];
				   endif;
				   
				   M[(j-1)*(nc-1)+1:(nc-1)*j,(j-1)*(nc)+1:(nc*j)] = temp;
				   clear temp;
				   endfor;

			   
				   Mean_changed = M * U_Y;
				   Mean_changed_d = M * U_Yd;
				   Error_changed = M * Full_error * M';
				   Error_changed_d = M * Full_error_d * M';
				
                if(nchocc > 1);						
					if(eff_pair ne 1);
						for g4(1,nchocc-1,1);

						   for g5(g4+1,nchocc,1);

							 R = zeros(2*(nc-1),(nc-1)*nchocc);

							 R[1:nc-1,(g4-1)*(nc-1)+1:(nc-1)*g4] = eye(nc-1);

							 R[nc-1+1:2*(nc-1),(g5-1)*(nc-1)+1:(nc-1)*g5] = eye(nc-1);			 
							 

							 mean_gu    = - R*Mean_changed;
							 var_gu     =   R*Error_changed*R';   
							   
							   
							 mean_gu_d   = - R*Mean_changed_d;
							 var_gu_d     = R*Error_changed_d*R';
							   
							 om     = (diag(var_gu));
							 omncd  = (diag(var_gu_d));
							 mean_gu_final  =   mean_gu./sqrt(om);
							   
							 var_gu_final      = corrvc(var_gu);
							 var_gu_final      = diagrv(var_gu_final,ones(2*(nc-1),1));
							   
							 mean_gu_final_d = (  sqrt(om') .* mean_gu_d' - ( mean_gu)' .* omncd' ./ sqrt(om') ./2   ) ./ (om');
							   
							   
							 var_gu_final_d      = ( (var_gu_d./sqrt(om))' ./ sqrt(om) ) - 0.5 * ( (var_gu ./(om^(3/2)) .* omncd )' ./(om^(1/2))   + ((var_gu ./(om^(1/2)) )' ./(om^(3/2))) .* omncd ) ;
							 var_gu_final_d      = diagrv(var_gu_final_d ,ones(2*(nc-1),1));
							 							   
									
							 if(Ind_Pair == 1);
								 p1_dd_temp = 0; p11 = 1;
								 for j(1,2,1);
									 tild_count = tild_count + 1;
									 r_st  = (j-1)*(nc-1) + 1;
									 r_end = (j-1)*(nc-1) + (nc-1);	
								     shi_r_unq = {};
									 for ishi(r_st,r_end-1,1);
										shi_r_unq = shi_r_unq ~ var_gu_final_d[ishi,ishi+1:r_end];
									 endfor;	 
							         p1_dd_temp = p1_dd_temp + ((1/Store_ogc[tild_count,1])*(Store_ogc[tild_count,2:cols(mean_gu_final_d[1,r_st:r_end])+1] * mean_gu_final_d[1,r_st:r_end]' + Store_ogc[tild_count,1+cols(mean_gu_final_d[1,r_st:r_end])+1:1+cols(mean_gu_final_d[1,r_st:r_end])+cols(shi_r_unq)] * shi_r_unq'));
									 p11 = p11*Store_ogc[tild_count,1];
								 endfor;
							     if(p11 > upper_limit);
						     	       p1_dd = p1_dd + p1_dd_temp;
							     endif;
							 else;
							         shi_r_unq = {};
									 for ishi(1,rows(var_gu_final_d)-1,1);
										shi_r_unq = shi_r_unq ~ var_gu_final_d[ishi,ishi+1:cols(var_gu_final_d )];
									 endfor;
									 tild_count = tild_count + 1;
									 if(Store_ogc[tild_count,1] > upper_limit);
						     	        p1_dd = p1_dd + ((1/Store_ogc[tild_count,1])*(Store_ogc[tild_count,2:cols(mean_gu_final_d)+1] * mean_gu_final_d' + Store_ogc[tild_count,1+cols(mean_gu_final_d)+1:1+cols(mean_gu_final_d)+cols(shi_r_unq)] * shi_r_unq'));
							         endif;	
							 endif;				   
							clear mean_gu,var_gu,mean_gu_d,var_gu_d,om,omncd,mean_gu_final,var_gu_final,mean_gu_final_d,var_gu_final_d,shi_r_unq,w1,g1;

						    endfor;
                        endfor;
				  else;
				        for g4(1,st_pair,1);

						   for g5(g4+1,end_pair,1);

							 R = zeros(2*(nc-1),(nc-1)*nchocc);

							 R[1:nc-1,(g4-1)*(nc-1)+1:(nc-1)*g4] = eye(nc-1);

							 R[nc-1+1:2*(nc-1),(g5-1)*(nc-1)+1:(nc-1)*g5] = eye(nc-1);			 
							 
							 mean_gu    = - R*Mean_changed;
							 var_gu     =   R*Error_changed*R';   
							   
							   
							 mean_gu_d   = - R*Mean_changed_d;
							 var_gu_d     = R*Error_changed_d*R';
							   
							 om     = (diag(var_gu));
							 omncd  = (diag(var_gu_d));
							 mean_gu_final  =   mean_gu./sqrt(om);
							   
							 var_gu_final      = corrvc(var_gu);
							 var_gu_final      = diagrv(var_gu_final,ones(2*(nc-1),1));
							   
							 mean_gu_final_d = (  sqrt(om') .* mean_gu_d' - ( mean_gu)' .* omncd' ./ sqrt(om') ./2   ) ./ (om');
							   
							   
							 var_gu_final_d      = ( (var_gu_d./sqrt(om))' ./ sqrt(om) ) - 0.5 * ( (var_gu ./(om^(3/2)) .* omncd )' ./(om^(1/2))   + ((var_gu ./(om^(1/2)) )' ./(om^(3/2))) .* omncd ) ;
							 var_gu_final_d      = diagrv(var_gu_final_d ,ones(2*(nc-1),1));
							 							   
									
							 if(Ind_Pair == 1);
								 p1_dd_temp = 0; p11 = 1;
								 for j(1,2,1);
									 tild_count = tild_count + 1;
									 r_st  = (j-1)*(nc-1) + 1;
									 r_end = (j-1)*(nc-1) + (nc-1);	
								     shi_r_unq = {};
									 for ishi(r_st,r_end-1,1);
										shi_r_unq = shi_r_unq ~ var_gu_final_d[ishi,ishi+1:r_end];
									 endfor;	 
							         p1_dd_temp = p1_dd_temp + ((1/Store_ogc[tild_count,1])*(Store_ogc[tild_count,2:cols(mean_gu_final_d[1,r_st:r_end])+1] * mean_gu_final_d[1,r_st:r_end]' + Store_ogc[tild_count,1+cols(mean_gu_final_d[1,r_st:r_end])+1:1+cols(mean_gu_final_d[1,r_st:r_end])+cols(shi_r_unq)] * shi_r_unq'));
									 p11 = p11*Store_ogc[tild_count,1];
								 endfor;
							     if(p11 > upper_limit);
						     	       p1_dd = p1_dd + p1_dd_temp;
							     endif;
							else;
							         shi_r_unq = {};
									 for ishi(1,rows(var_gu_final_d)-1,1);
										shi_r_unq = shi_r_unq ~ var_gu_final_d[ishi,ishi+1:cols(var_gu_final_d )];
									 endfor;
									 tild_count = tild_count + 1;
									 if(Store_ogc[tild_count,1] > upper_limit);
						     	        p1_dd = p1_dd + ((1/Store_ogc[tild_count,1])*(Store_ogc[tild_count,2:cols(mean_gu_final_d)+1] * mean_gu_final_d' + Store_ogc[tild_count,1+cols(mean_gu_final_d)+1:1+cols(mean_gu_final_d)+cols(shi_r_unq)] * shi_r_unq'));
							         endif;	
							endif;				   
							clear mean_gu,var_gu,mean_gu_d,var_gu_d,om,omncd,mean_gu_final,var_gu_final,mean_gu_final_d,var_gu_final_d,shi_r_unq,w1,g1;
						 endfor;

					  endfor;
	   
	                  if(end_pair < nchocc);
					  for g5(end_pair+1,nchocc,1);

							 R = zeros((nc-1),(nc-1)*nchocc);

							 R[1:nc-1,(g5-1)*(nc-1)+1:(nc-1)*g5] = eye(nc-1);

							 mean_gu    = - R*Mean_changed;
							 var_gu     =   R*Error_changed*R';   
							   
							   
							 mean_gu_d   = - R*Mean_changed_d;
							 var_gu_d    = R*Error_changed_d*R';
							   
							 om     = (diag(var_gu));
							 omncd  = (diag(var_gu_d));
							 mean_gu_final  =   mean_gu./sqrt(om);
							   
							 var_gu_final      = corrvc(var_gu);
							 var_gu_final      = diagrv(var_gu_final,ones((nc-1),1));
							   
							 mean_gu_final_d = (  sqrt(om') .* mean_gu_d' - ( mean_gu)' .* omncd' ./ sqrt(om') ./2   ) ./ (om');
							   
							   
							 var_gu_final_d      = ( (var_gu_d./sqrt(om))' ./ sqrt(om) ) - 0.5 * ( (var_gu ./(om^(3/2)) .* omncd )' ./(om^(1/2))   + ((var_gu ./(om^(1/2)) )' ./(om^(3/2))) .* omncd ) ;
							 var_gu_final_d      = diagrv(var_gu_final_d ,ones((nc-1),1));
							 							   
									
							 shi_r_unq = {};
							 for ishi(1,rows(var_gu_final_d)-1,1);
								shi_r_unq = shi_r_unq ~ var_gu_final_d[ishi,ishi+1:cols(var_gu_final_d )];
							 endfor;
							   
							 tild_count = tild_count + 1;
							 if(Store_ogc[tild_count,1] > upper_limit);
						     	p1_dd = p1_dd + ((1/Store_ogc[tild_count,1])*(Store_ogc[tild_count,2:cols(mean_gu_final_d)+1] * mean_gu_final_d' + Store_ogc[tild_count,1+cols(mean_gu_final_d)+1:1+cols(mean_gu_final_d)+cols(shi_r_unq)] * shi_r_unq'));
							 endif;					   
							clear mean_gu,var_gu,mean_gu_d,var_gu_d,om,omncd,mean_gu_final,var_gu_final,mean_gu_final_d,var_gu_final_d,shi_r_unq,w1,g1;

					endfor;
					endif;	
			    endif;
				
				else;
				             mean_gu    = - Mean_changed;
							 var_gu     =   Error_changed;   
							   
							   
							 mean_gu_d   = - Mean_changed_d;
							 var_gu_d     = Error_changed_d;
							   
							 om     = (diag(var_gu));
							 omncd  = (diag(var_gu_d));
							 mean_gu_final  =   mean_gu./sqrt(om);
							   
							 var_gu_final      = corrvc(var_gu);
							 var_gu_final      = diagrv(var_gu_final,ones((nc-1),1));
							   
							 mean_gu_final_d = (  sqrt(om') .* mean_gu_d' - ( mean_gu)' .* omncd' ./ sqrt(om') ./2   ) ./ (om');
							   
							   
							 var_gu_final_d      = ( (var_gu_d./sqrt(om))' ./ sqrt(om) ) - 0.5 * ( (var_gu ./(om^(3/2)) .* omncd )' ./(om^(1/2))   + ((var_gu ./(om^(1/2)) )' ./(om^(3/2))) .* omncd ) ;
							 var_gu_final_d      = diagrv(var_gu_final_d ,ones((nc-1),1));
							 
							shi_r_unq = {};
							for ishi(1,rows(var_gu_final_d)-1,1);
								shi_r_unq = shi_r_unq ~ var_gu_final_d[ishi,ishi+1:cols(var_gu_final_d )];
							endfor;
							
							tild_count = tild_count + 1;
							if(Store_ogc[tild_count,1] > upper_limit);
						     	p1_dd = ((1/Store_ogc[tild_count,1])*(Store_ogc[tild_count,2:cols(mean_gu_final_d)+1] * mean_gu_final_d' + Store_ogc[tild_count,1+cols(mean_gu_final_d)+1:1+cols(mean_gu_final_d)+cols(shi_r_unq)] * shi_r_unq'));
							endif;	
							clear mean_gu,var_gu,mean_gu_d,var_gu_d,om,omncd,mean_gu_final,var_gu_final,mean_gu_final_d,var_gu_final_d,shi_r_unq,w1,g1;
 
				endif;
				   
		    gg_temp = gg_temp | p1_dd;
			clear Mean_changed,Mean_changed_d,Error_changed,Error_changed_d;
		    
		endfor;
		Omega_gradient = Omega_gradient ~ gg_temp;
	endif;
endfor;
retp(Omega_gradient);
endp;

proc(1)=lgdT_psi(parm,dta);
	 local smalla,chol_lambda,smallb,chol_OmTild,chol_Psi,theta,delta,lamda,rho,OmTild,OmTild1,Lambda,Psi,seed20,temp,ch,iden_matrix,one_negative,Error_changed_d,var_gu_d,var_gu_final_d;
     local smalla_gradient,lambda_gradient,smallb_gradient,OmTild_gradient,Psi_gradient,theta_gradient,delta_gradient,lamda_gradient,rho_gradient,Lamda_big;
     local iatr,d_capA,forgcapV,diff_mat1,diff_mat,seednext,Total_g,pair1,pair1_t,pair2,pair2_t,p1v,p1v_d,p1_mean,p1d_mean,p2v,p2v_d,p1cv_d,p2cv_d,p1cv,p2cv,p2_mean,co_var,mean,p2d_mean,meand,co_var_d;
     local om,omncd,Mean_final,Meand_final,Var_final,shi_a,shi_r,g_smalla,ilambda,d_chol_Lambda,d_Lambda,final_error1,shi_r_unq,g_lambda,Var_d_final,g,w,sss,fix_check,forgx,forgv2,j,forgv,g_smallb;
     local d_chol_OmTild,d_OmTild,OmTild_big,g_OmTild,d_chol_Psi,d_Psi,Psi_big,g_Psi,theta_weight,G_diff,Lambda_big,g_theta,v2,Sq,d_Sq,v,Delta_Mean,Delta_Error,g_delta,lamda_mat,lamda_dig,d_capD,ilamda,g_lamda;
     local d_sq1,d_sq2,d_capC,g_rho,gradient,dd_theta,dd_delta,dd_lamda,dd_rho,Final_error,d_capS,d_OmTild1,ir,capA,Alt_sp_coeff,Full_error,M,Alt_chosen,Full_error_d;
	 local Meand_final1,Var_d_final1,Mean_final1,Var_final1,Index1,Total_g_temp,Psi1,Utility1,Utilityd,gg_temp,U_Y,U_Yd,p1_dd,X_req,Omega_Error,g1,d_chol_omega,d_omega,gg;
	 local Mean_changed,Mean_changed_d,Error_changed,R,mean_gu,var_gu,mean_gu_final,var_gu_final,mean_gu_d,mean_gu_final_d,pair_count,w1,Omega_gradient,Lamdad;
	 local beta_count,tild_count,psi_count,p11,r_st,r_end,p1_dd_temp;
	 
	 if(Non_IID eq 1);
		  smallb = parm[1:nvarma];
		  if(Mixing == 1);
			  if(Parametrized == 1);
				  chol_OmTild = (upmat(xpnd(parm[nvarma+1:nvarma+nCholOmega])));
				  OmTild = zeros(nvarma,nvarma);       OmTild1 = chol_OmTild'*chol_OmTild;  
			  else;
				  chol_OmTild = xpnd(parm[nvarma+1:nvarma+nCholOmega]);
				  OmTild = zeros(nvarma,nvarma);       OmTild1 = chol_OmTild; 
			  endif;
		  
			  if( nran eq nvarma);
					OmTild = OmTild1;
			  else;
					OmTild[nran:nvarma,nran:nvarma] = OmTild1;
			  endif;
		  endif;
		  
		  if(Parametrized == 1);
			  chol_Psi    = (upmat(xpnd(parm[nvarma+nCholOmega+1:nvarma+nCholOmega+nCholErr])));
			  Psi         = zeros(nc,nc);           Psi[2:nc,2:nc]    = chol_Psi'*chol_Psi;
	      else;
		      chol_Psi    = xpnd(parm[nvarma+nCholOmega+1:nvarma+nCholOmega+nCholErr]);
		      Psi    = zeros(nc,nc);           Psi[2:nc,2:nc]    = chol_Psi;
		  endif;
		  Lamda_big      = eye(nchocc) .*. Psi;
	else;
		  smallb = parm[1:nvarma];
		  if(Mixing == 1);
		      if(Parametrized == 1);
				  chol_OmTild = (upmat(xpnd(parm[nvarma+1:nvarma+nCholOmega])));
				  OmTild = zeros(nvarma,nvarma);       OmTild1 = chol_OmTild'*chol_OmTild;  
			  else;
				  chol_OmTild = xpnd(parm[nvarma+1:nvarma+nCholOmega]);
				  OmTild = zeros(nvarma,nvarma);       OmTild1 = chol_OmTild; 
			  endif;
		  
			  if( nran eq nvarma);
					OmTild = OmTild1;
			  else;
					OmTild[nran:nvarma,nran:nvarma] = OmTild1;
			  endif;
		  endif;
		  
		  Psi1    = 0.5 * (eye(nc-1)) + 0.5 *ones((nc-1),(nc-1));  
		  Psi    = zeros(nc,nc);           Psi[2:nc,2:nc]    = Psi1;
		  Lamda_big      = eye(nchocc) .*. Psi;
	endif;
	 
    v1 = (ones(nc,1) .*. smallb )*~(dta[.,ivgenva])';
	 
	j=1;
	Utility1 = {};
    do until j == nc+1;
       Utility1 = Utility1~(sumc(v1[(j-1)*nvarma+1:(j*nvarma),.]));
	   j = j+1;
    endo;
	 
	iden_matrix = eye(nc-1);
    one_negative = -1*ones(nc-1,1);
	
	Psi_gradient = {};
	for ipsi(1,nCholErr,1);
		fix_check = _max_active[nvarma+nCholOmega+ipsi];
	    	
	    if(fix_check eq 0);
		  Psi_gradient = Psi_gradient ~ zeros(nind,1);
	    else;
		      if(Parametrized == 1);
				  d_chol_Psi = zeros(ncholErr,1);d_chol_Psi[ipsi]=1;                         d_chol_Psi = upmat(xpnd(d_chol_Psi));
				  d_Psi = zeros(nc,nc);  d_Psi[2:nc,2:nc]   = d_chol_Psi'*chol_Psi + chol_Psi'*d_chol_Psi;
			  else;
				  d_chol_Psi = zeros(ncholErr,1);
				  d_chol_Psi[ipsi]=1;                         
				  d_chol_Psi = xpnd(d_chol_Psi);
				  d_Psi = zeros(nc,nc);  d_Psi[2:nc,2:nc]   = d_chol_Psi;
			  endif;
			  
			  Lamdad      = eye(nchocc) .*. d_Psi; 
							 
			  clear d_chol_Psi,d_Psi,Psi_big,final_error1;
			  
			  
			  Utilityd = zeros(nobs,nc); 
			  
			  psi_count = 0;
			  gg_temp = {};
			  
			for i(1,nind,1);
				   U_Y = {}; U_Yd = {}; gg = 0;
				   p1_dd = 0; 
				   
				   U_Y   = U_Y | reshape(Utility1[(i-1)*nchocc+1:(i-1)*nchocc+nchocc,.],nchocc*nc,1);   
				   U_Yd   = U_Yd | reshape(Utilityd[(i-1)*nchocc+1:(i-1)*nchocc+nchocc,.],nchocc*nc,1); 
				   
				   if(Mixing == 1);
					   X_req = dta[(i-1)*nchocc+1:(i-1)*nchocc+nchocc,ivgenva];
					   X_req = reshape(X_req,nchocc*nc,nvarma);
					   Omega_Error = X_req*OmTild*X_req';
					   Full_error = Omega_Error + Lamda_big;
				   else;
					   Full_error = Lamda_big;
				   endif;
				   
				   Full_error_d = Lamdad;
				   
				   M = zeros((nc-1)*nchocc,nc*nchocc);
				   Alt_chosen = dta[(i-1)*nchocc+1:(i-1)*nchocc+nchocc,altchm];
				   

				   for j(1,nchocc,1);
				   if(Alt_chosen[j] eq 1);
					temp = one_negative ~ iden_matrix;
				   elseif(Alt_chosen[j] eq nc);
					temp = iden_matrix ~ one_negative;
				   else;
					ch = Alt_chosen[j];
					temp = iden_matrix[.,1:ch-1] ~ one_negative ~ iden_matrix[.,ch:nc-1];
				   endif;
				   
				   M[(j-1)*(nc-1)+1:(nc-1)*j,(j-1)*(nc)+1:(nc*j)] = temp;
				   clear temp;
				   endfor;

			   
				   Mean_changed = M * U_Y;
				   Mean_changed_d = M * U_Yd;
				   Error_changed = M * Full_error * M';
				   Error_changed_d = M * Full_error_d * M';
				
                if(nchocc > 1);						
					if(eff_pair ne 1);
						for g4(1,nchocc-1,1);

						   for g5(g4+1,nchocc,1);

							 R = zeros(2*(nc-1),(nc-1)*nchocc);

							 R[1:nc-1,(g4-1)*(nc-1)+1:(nc-1)*g4] = eye(nc-1);

							 R[nc-1+1:2*(nc-1),(g5-1)*(nc-1)+1:(nc-1)*g5] = eye(nc-1);			 
							 

							 mean_gu    = - R*Mean_changed;
							 var_gu     =   R*Error_changed*R';   
							   
							   
							 mean_gu_d   = - R*Mean_changed_d;
							 var_gu_d     = R*Error_changed_d*R';
							   
							 om     = (diag(var_gu));
							 omncd  = (diag(var_gu_d));
							 mean_gu_final  =   mean_gu./sqrt(om);
							   
							 var_gu_final      = corrvc(var_gu);
							 var_gu_final      = diagrv(var_gu_final,ones(2*(nc-1),1));
							   
							 mean_gu_final_d = (  sqrt(om') .* mean_gu_d' - ( mean_gu)' .* omncd' ./ sqrt(om') ./2   ) ./ (om');
							   
							   
							 var_gu_final_d      = ( (var_gu_d./sqrt(om))' ./ sqrt(om) ) - 0.5 * ( (var_gu ./(om^(3/2)) .* omncd )' ./(om^(1/2))   + ((var_gu ./(om^(1/2)) )' ./(om^(3/2))) .* omncd ) ;
							 var_gu_final_d      = diagrv(var_gu_final_d ,ones(2*(nc-1),1));
							 							   
									
							 if(Ind_Pair == 1);
								 p1_dd_temp = 0; p11 = 1;
								 for j(1,2,1);
									 psi_count = psi_count + 1;
									 r_st  = (j-1)*(nc-1) + 1;
									 r_end = (j-1)*(nc-1) + (nc-1);	
								     shi_r_unq = {};
									 for ishi(r_st,r_end-1,1);
										shi_r_unq = shi_r_unq ~ var_gu_final_d[ishi,ishi+1:r_end];
									 endfor;	 
							         p1_dd_temp = p1_dd_temp + ((1/Store_ogc[psi_count,1])*(Store_ogc[psi_count,2:cols(mean_gu_final_d[1,r_st:r_end])+1] * mean_gu_final_d[1,r_st:r_end]' + Store_ogc[psi_count,1+cols(mean_gu_final_d[1,r_st:r_end])+1:1+cols(mean_gu_final_d[1,r_st:r_end])+cols(shi_r_unq)] * shi_r_unq'));
									 p11 = p11*Store_ogc[psi_count,1];
								 endfor;
							     if(p11 > upper_limit);
						     	        p1_dd = p1_dd + p1_dd_temp;
							     endif;	
							 else;
							         shi_r_unq = {};
									 for ishi(1,rows(var_gu_final_d)-1,1);
										shi_r_unq = shi_r_unq ~ var_gu_final_d[ishi,ishi+1:cols(var_gu_final_d )];
									 endfor;
									 psi_count = psi_count + 1;
									 if(Store_ogc[psi_count,1] > upper_limit);
						     	        p1_dd = p1_dd + ((1/Store_ogc[psi_count,1])*(Store_ogc[psi_count,2:cols(mean_gu_final_d)+1] * mean_gu_final_d' + Store_ogc[psi_count,1+cols(mean_gu_final_d)+1:1+cols(mean_gu_final_d)+cols(shi_r_unq)] * shi_r_unq'));
						             endif;	
							 endif;						
																			   
							clear mean_gu,var_gu,mean_gu_d,var_gu_d,om,omncd,mean_gu_final,var_gu_final,mean_gu_final_d,var_gu_final_d,shi_r_unq,w1,g1;

						    endfor;
                        endfor;
				  else;
						for g4(1,st_pair,1);

						   for g5(g4+1,end_pair,1);

							 R = zeros(2*(nc-1),(nc-1)*nchocc);

							 R[1:nc-1,(g4-1)*(nc-1)+1:(nc-1)*g4] = eye(nc-1);

							 R[nc-1+1:2*(nc-1),(g5-1)*(nc-1)+1:(nc-1)*g5] = eye(nc-1);			 
							 
							 mean_gu    = - R*Mean_changed;
							 var_gu     =   R*Error_changed*R';   
							   
							   
							 mean_gu_d   = - R*Mean_changed_d;
							 var_gu_d     = R*Error_changed_d*R';
							   
							 om     = (diag(var_gu));
							 omncd  = (diag(var_gu_d));
							 mean_gu_final  =   mean_gu./sqrt(om);
							   
							 var_gu_final      = corrvc(var_gu);
							 var_gu_final      = diagrv(var_gu_final,ones(2*(nc-1),1));
							   
							 mean_gu_final_d = (  sqrt(om') .* mean_gu_d' - ( mean_gu)' .* omncd' ./ sqrt(om') ./2   ) ./ (om');
							   
							   
							 var_gu_final_d      = ( (var_gu_d./sqrt(om))' ./ sqrt(om) ) - 0.5 * ( (var_gu ./(om^(3/2)) .* omncd )' ./(om^(1/2))   + ((var_gu ./(om^(1/2)) )' ./(om^(3/2))) .* omncd ) ;
							 var_gu_final_d      = diagrv(var_gu_final_d ,ones(2*(nc-1),1));
							 							   
									
							 if(Ind_Pair == 1);
								 p1_dd_temp = 0; p11 = 1;
								 for j(1,2,1);
									 psi_count = psi_count + 1;
									 r_st  = (j-1)*(nc-1) + 1;
									 r_end = (j-1)*(nc-1) + (nc-1);	
								     shi_r_unq = {};
									 for ishi(r_st,r_end-1,1);
										shi_r_unq = shi_r_unq ~ var_gu_final_d[ishi,ishi+1:r_end];
									 endfor;	 
							         p1_dd_temp = p1_dd_temp + ((1/Store_ogc[psi_count,1])*(Store_ogc[psi_count,2:cols(mean_gu_final_d[1,r_st:r_end])+1] * mean_gu_final_d[1,r_st:r_end]' + Store_ogc[psi_count,1+cols(mean_gu_final_d[1,r_st:r_end])+1:1+cols(mean_gu_final_d[1,r_st:r_end])+cols(shi_r_unq)] * shi_r_unq'));
									 p11 = p11*Store_ogc[psi_count,1];
								 endfor;
							     if(p11 > upper_limit);
						     	        p1_dd = p1_dd + p1_dd_temp;
							     endif;	
							 else;
							         shi_r_unq = {};
									 for ishi(1,rows(var_gu_final_d)-1,1);
										shi_r_unq = shi_r_unq ~ var_gu_final_d[ishi,ishi+1:cols(var_gu_final_d )];
									 endfor;
									 psi_count = psi_count + 1;
									 if(Store_ogc[psi_count,1] > upper_limit);
						     	        p1_dd = p1_dd + ((1/Store_ogc[psi_count,1])*(Store_ogc[psi_count,2:cols(mean_gu_final_d)+1] * mean_gu_final_d' + Store_ogc[psi_count,1+cols(mean_gu_final_d)+1:1+cols(mean_gu_final_d)+cols(shi_r_unq)] * shi_r_unq'));
						             endif;	
							 endif;						   
							clear mean_gu,var_gu,mean_gu_d,var_gu_d,om,omncd,mean_gu_final,var_gu_final,mean_gu_final_d,var_gu_final_d,shi_r_unq,w1,g1;
						 endfor;

					  endfor;
	   
	                  if(end_pair < nchocc);
					  for g5(end_pair+1,nchocc,1);

							 R = zeros((nc-1),(nc-1)*nchocc);

							 R[1:nc-1,(g5-1)*(nc-1)+1:(nc-1)*g5] = eye(nc-1);

							 mean_gu    = - R*Mean_changed;
							 var_gu     =   R*Error_changed*R';   
							   
							   
							 mean_gu_d   = - R*Mean_changed_d;
							 var_gu_d    = R*Error_changed_d*R';
							   
							 om     = (diag(var_gu));
							 omncd  = (diag(var_gu_d));
							 mean_gu_final  =   mean_gu./sqrt(om);
							   
							 var_gu_final      = corrvc(var_gu);
							 var_gu_final      = diagrv(var_gu_final,ones((nc-1),1));
							   
							 mean_gu_final_d = (  sqrt(om') .* mean_gu_d' - ( mean_gu)' .* omncd' ./ sqrt(om') ./2   ) ./ (om');
							   
							   
							 var_gu_final_d      = ( (var_gu_d./sqrt(om))' ./ sqrt(om) ) - 0.5 * ( (var_gu ./(om^(3/2)) .* omncd )' ./(om^(1/2))   + ((var_gu ./(om^(1/2)) )' ./(om^(3/2))) .* omncd ) ;
							 var_gu_final_d      = diagrv(var_gu_final_d ,ones((nc-1),1));
							 							   
									
							 shi_r_unq = {};
							 for ishi(1,rows(var_gu_final_d)-1,1);
								shi_r_unq = shi_r_unq ~ var_gu_final_d[ishi,ishi+1:cols(var_gu_final_d )];
							 endfor;
							   
							 psi_count = psi_count + 1;
							 if(Store_ogc[psi_count,1] > upper_limit);
						     	p1_dd = p1_dd + ((1/Store_ogc[psi_count,1])*(Store_ogc[psi_count,2:cols(mean_gu_final_d)+1] * mean_gu_final_d' + Store_ogc[psi_count,1+cols(mean_gu_final_d)+1:1+cols(mean_gu_final_d)+cols(shi_r_unq)] * shi_r_unq'));
							 endif;					   
							clear mean_gu,var_gu,mean_gu_d,var_gu_d,om,omncd,mean_gu_final,var_gu_final,mean_gu_final_d,var_gu_final_d,shi_r_unq,w1,g1;

					endfor;
					endif;	
			    endif;
				
				else;
				             mean_gu    = - Mean_changed;
							 var_gu     =   Error_changed;   
							   
							   
							 mean_gu_d   = - Mean_changed_d;
							 var_gu_d     = Error_changed_d;
							   
							 om     = (diag(var_gu));
							 omncd  = (diag(var_gu_d));
							 mean_gu_final  =   mean_gu./sqrt(om);
							   
							 var_gu_final      = corrvc(var_gu);
							 var_gu_final      = diagrv(var_gu_final,ones((nc-1),1));
							   
							 mean_gu_final_d = (  sqrt(om') .* mean_gu_d' - ( mean_gu)' .* omncd' ./ sqrt(om') ./2   ) ./ (om');
							   
							   
							 var_gu_final_d      = ( (var_gu_d./sqrt(om))' ./ sqrt(om) ) - 0.5 * ( (var_gu ./(om^(3/2)) .* omncd )' ./(om^(1/2))   + ((var_gu ./(om^(1/2)) )' ./(om^(3/2))) .* omncd ) ;
							 var_gu_final_d      = diagrv(var_gu_final_d ,ones((nc-1),1));
							 
							 shi_r_unq = {};
							 for ishi(1,rows(var_gu_final_d)-1,1);
								shi_r_unq = shi_r_unq ~ var_gu_final_d[ishi,ishi+1:cols(var_gu_final_d )];
							 endfor;
							
							 psi_count = psi_count + 1;
							 if(Store_ogc[psi_count,1] > upper_limit);
						     	p1_dd = ((1/Store_ogc[psi_count,1])*(Store_ogc[psi_count,2:cols(mean_gu_final_d)+1] * mean_gu_final_d' + Store_ogc[psi_count,1+cols(mean_gu_final_d)+1:1+cols(mean_gu_final_d)+cols(shi_r_unq)] * shi_r_unq'));
							 endif;
							clear mean_gu,var_gu,mean_gu_d,var_gu_d,om,omncd,mean_gu_final,var_gu_final,mean_gu_final_d,var_gu_final_d,shi_r_unq,w1,g1;
 
				endif;
				   
		    gg_temp = gg_temp | p1_dd;
			clear Mean_changed,Mean_changed_d,Error_changed,Error_changed_d;
		    
		endfor;
		Psi_gradient = Psi_gradient ~ gg_temp;
	endif;
endfor;
retp(Psi_gradient);
endp;


proc(1)= Hessian_Matrix(parm,dta);
	 local smalla,chol_lambda,smallb,chol_OmTild,chol_Psi,theta,delta,lamda,rho,OmTild,OmTild1,Lambda,Psi,seed20,temp,ch,iden_matrix,one_negative,Error_changed_d1,Error_changed_d2,var_gu_d1,var_gu_d2,var_gu_final_d1,var_gu_final_d2;
     local smalla_gradient,lambda_gradient,smallb_gradient,OmTild_gradient,Psi_gradient,theta_gradient,delta_gradient,lamda_gradient,rho_gradient,Lamda_big,p1;
     local iatr,d_capA,forgcapV,diff_mat1,diff_mat,seednext,Total_g,pair1,pair1_t,pair2,pair2_t,p1v,p1v_d,p1_mean,p1d_mean,p2v,p2v_d,p1cv_d,p2cv_d,p1cv,p2cv,p2_mean,co_var,mean,p2d_mean,meand,co_var_d;
     local om,omncd1,omncd2,Mean_final,Meand_final,Var_final,shi_a,shi_r,g_smalla,ilambda,d_chol_Lambda,d_Lambda,final_error1,shi_r_unq,g_lambda,Var_d_final,g,w,sss,fix_check,forgx,forgv2,j,forgv,g_smallb;
     local d_chol_OmTild,d_OmTild,OmTild_big,g_OmTild,d_chol_Psi,d_Psi,Psi_big,g_Psi,theta_weight,G_diff,Lambda_big,g_theta,v2,Sq,d_Sq,v,Delta_Mean,Delta_Error,g_delta,lamda_mat,lamda_dig,d_capD,ilamda,g_lamda;
     local d_sq1,d_sq2,d_capC,g_rho,gradient1,dd_theta,dd_delta,dd_lamda,dd_rho,Final_error,d_capS,d_OmTild1,ir,capA,Alt_sp_coeff,Full_error,M,Alt_chosen,Full_error_d1,Full_error_d2;
	 local Meand_final1,Var_d_final1,Mean_final1,Var_final1,Index1,Total_g_temp,Psi1,Utility1,Utilityd1,Utilityd2,gg_temp,U_Y,U_Yd1,U_Yd2,p1_dd,X_req,Omega_Error,g1,d_chol_omega,d_omega,gg;
	 local Mean_changed,Mean_changed_d1,Mean_changed_d2,Error_changed,R,mean_gu,var_gu,mean_gu_final,var_gu_final,mean_gu_d1,mean_gu_d2,mean_gu_final_d1,mean_gu_final_d2,pair_count,w1,Omega_gradient,Lamdad,HCap;
	 
	 local shi_r_unq1,shi_r_unq2,d_omega1,d_Psi1,Lamdad1,d_omega2,d_Psi2,Lamdad2,iomega,ipsi,part1,part2;
	 local tol1,tol2,mean_gu_final_dPP1,mean_gu_final_dPN1,mean_gu_final_dNP1,mean_gu_final_dNN1;
	 local tol12,tol21,mean_gu_final_dPP2,mean_gu_final_dPN2,mean_gu_final_dNP2,mean_gu_final_dNN2;
	 local var_gu_final_dPP1,var_gu_final_dPN1,var_gu_final_dNP1,var_gu_final_dNN1,p_temp,p_temp1,p_temp2,p_temp3,p_temp4,p_temp5,p_temp6,L,P11,P01,P10,P00;
	 local var_gu_final_dPP2,var_gu_final_dPN2,var_gu_final_dNP2,var_gu_final_dNN2,Q11,Q01,Q10,Q00;
	 local mean_gu_final_d0P1,mean_gu_final_d0N1,mean_gu_final_d0P2,mean_gu_final_d0N2,p1_dd_temp,r_st,r_end;
	 local mean_gu_final_dP01,mean_gu_final_dN01,mean_gu_final_dP02,mean_gu_final_dN02,LD,pow_req,temp1,temp2,LDY,LDX;
	 local var_gu_final_d0P1,var_gu_final_d0N1,var_gu_final_d0P2,var_gu_final_d0N2,R11,R10,S11,S10,p_temp12,p_temp34,cont_ele,hd,f1x2x1,nn_grad;
	 local var_gu_final_dP01,var_gu_final_dN01,var_gu_final_dP02,var_gu_final_dN02,T11,T10,U11,U10,p_temp56,p4_dd,num_element,f1x1,f1x2,ME1,ME2;
	
	
	if(Non_IID eq 1);
		  smallb = parm[1:nvarma];
		  if(Mixing == 1);
		  chol_OmTild = xpnd(parm[nvarma+1:nvarma+nCholOmega]);
		  	  
		  OmTild = zeros(nvarma,nvarma);       OmTild1 = chol_OmTild;  
		  
		  if( nran eq nvarma);
		        OmTild = OmTild1;
		  else;
                OmTild[nran:nvarma,nran:nvarma] = OmTild1;
          endif;
		  endif;
		  
		  chol_Psi    = xpnd(parm[nvarma+nCholOmega+1:nvarma+nCholOmega+nCholErr]);
		  Psi    = zeros(nc,nc);           Psi[2:nc,2:nc]    = chol_Psi;
		  Lamda_big      = eye(nchocc) .*. Psi;
	else;
		  smallb = parm[1:nvarma];
		  if(Mixing == 1);
		  chol_OmTild = xpnd(parm[nvarma+1:nvarma+nCholOmega]);
		  
		  OmTild = zeros(nvarma,nvarma);       OmTild1 = chol_OmTild;  
		  
		  if( nran eq nvarma);
		        OmTild = OmTild1;
		  else;
                OmTild[nran:nvarma,nran:nvarma] = OmTild1;
          endif;
		  endif;
		  
		  Psi1    = 0.5 * (eye(nc-1)) + 0.5 *ones((nc-1),(nc-1));  
		  Psi    = zeros(nc,nc);           Psi[2:nc,2:nc]    = Psi1;
		  Lamda_big      = eye(nchocc) .*. Psi;
	endif;
	 
    v1 = (ones(nc,1) .*. smallb )*~(dta[.,ivgenva])';
	 
	j=1;
	Utility1 = {};
    do until j == nc+1;
       Utility1 = Utility1~(sumc(v1[(j-1)*nvarma+1:(j*nvarma),.]));
	   j = j+1;
    endo;
	 
	 iden_matrix = eye(nc-1);
     one_negative = -1*ones(nc-1,1);
	
	 	 
	 HCap = zeros(rows(_max_active),rows(_max_active));	 
     
	 for iparm(1,rows(_max_active),1);
		 
		 if(_max_active[iparm] == 0);
		    HCap[iparm,1:rows(_max_active)] = zeros(1,rows(_max_active));
			HCap[1:rows(_max_active),iparm] = zeros(rows(_max_active),1);
		 else;
			 
			 if(iparm <= nvarma);
				 forgx = smallb*0;forgx[iparm]=1;
				 forgv2 = (ones(nc,1) .*. forgx)*~(dta[.,ivgenva])';
				 j=1;
				 Utilityd1 = {};
				 do until j == nc+1;
					Utilityd1 = Utilityd1~(sumc(forgv2[(j-1)*nvarma+1:(j*nvarma),.]));
					j = j+1;
				endo;
			    if(Mixing == 1);
				d_omega1  = xpnd(zeros(ncholOmega,1));
				endif;
				d_Psi1    = zeros(nc,nc);  
				Lamdad1   = eye(nchocc) .*. d_Psi1;
			 elseif(iparm > nvarma and iparm <= (nvarma+nCholOmega));
				 iomega = iparm - nvarma;
				 d_chol_omega = zeros(ncholOmega,1);
			     d_chol_omega[iomega]=1;                        
			     d_chol_omega = xpnd(d_chol_omega);
			     d_omega1 = d_chol_omega;
				 Utilityd1 = zeros(nobs,nc);
				 d_Psi1    = zeros(nc,nc);  
				 Lamdad1   = eye(nchocc) .*. d_Psi1;
			 elseif(iparm > (nvarma+nCholOmega));
				 ipsi = iparm - nvarma - nCholOmega;
				 d_chol_Psi = zeros(ncholErr,1);
				 d_chol_Psi[ipsi]=1;                         
				 d_chol_Psi = xpnd(d_chol_Psi);
			     d_Psi = zeros(nc,nc);  
				 d_Psi[2:nc,2:nc]   = d_chol_Psi;
			     Lamdad1      = eye(nchocc) .*. d_Psi; 
				 Utilityd1    = zeros(nobs,nc);
				 if(Mixing == 1);
				 d_omega1 = xpnd(zeros(ncholOmega,1));
			     endif;
			endif;
			 
			 for jparm(iparm,rows(_max_active),1);
				  if(_max_active[jparm] == 0);
						HCap[iparm,jparm] = 0;
						HCap[jparm,iparm] = 0;
				  else;
						 if(jparm <= nvarma);
							 forgx = smallb*0;forgx[jparm]=1;
							 forgv2 = (ones(nc,1) .*. forgx)*~(dta[.,ivgenva])';
							 j=1;
							 Utilityd2 = {};
							 do until j == nc+1;
								Utilityd2 = Utilityd2~(sumc(forgv2[(j-1)*nvarma+1:(j*nvarma),.]));
								j = j+1;
							endo;
							if(Mixing == 1);
							d_omega2 = xpnd(zeros(ncholOmega,1));
							endif;
							d_Psi2    = zeros(nc,nc);  
							Lamdad2  = eye(nchocc) .*. d_Psi2;
						 elseif(jparm > nvarma and jparm <= (nvarma+nCholOmega));
							 iomega = jparm - nvarma;
							 d_chol_omega = zeros(ncholOmega,1);
							 d_chol_omega[iomega]=1;                        
							 d_chol_omega = xpnd(d_chol_omega);
							 d_omega2  = d_chol_omega;
							 Utilityd2 = zeros(nobs,nc);
							 d_Psi2    = zeros(nc,nc);  
							 Lamdad2  = eye(nchocc) .*. d_Psi2;
						 elseif(jparm > (nvarma+nCholOmega));
							 ipsi = jparm - nvarma - nCholOmega;
							 d_chol_Psi = zeros(ncholErr,1);
							 d_chol_Psi[ipsi]=1;                         
							 d_chol_Psi = xpnd(d_chol_Psi);
							 d_Psi2 = zeros(nc,nc);  
							 d_Psi2[2:nc,2:nc]   = d_chol_Psi;
							 Lamdad2      = eye(nchocc) .*. d_Psi2; 
							 Utilityd2    = zeros(nobs,nc);
							 if(Mixing == 1);
							 d_omega2     = xpnd(zeros(ncholOmega,1));
							 endif;
						 endif;
				 
				 p4_dd = 0; pair_count = 0; 
				 for i(1,nind,1);
				   U_Y = {}; U_Yd1 = {}; U_Yd2 = {} ;
				  
				   
				   U_Y     = U_Y | reshape(Utility1[(i-1)*nchocc+1:(i-1)*nchocc+nchocc,.],nchocc*nc,1);   
				   U_Yd1   = U_Yd1 | reshape(Utilityd1[(i-1)*nchocc+1:(i-1)*nchocc+nchocc,.],nchocc*nc,1); 
				   U_Yd2   = U_Yd2 | reshape(Utilityd2[(i-1)*nchocc+1:(i-1)*nchocc+nchocc,.],nchocc*nc,1); 
				   
				   if(Mixing == 1);
				   X_req = dta[(i-1)*nchocc+1:(i-1)*nchocc+nchocc,ivgenva];
				   X_req = reshape(X_req,nchocc*nc,nvarma);
				   Omega_Error = X_req*OmTild*X_req';
				   Full_error = Omega_Error + Lamda_big;
				   else;			   
				   Full_error = Lamda_big;
				   endif;
				   
				   if(Mixing == 1);
				   Full_error_d1 = X_req*d_omega1*X_req' + Lamdad1;
				   Full_error_d2 = X_req*d_omega2*X_req' + Lamdad2;
				   else;
				   Full_error_d1 = Lamdad1;
				   Full_error_d2 = Lamdad2;
				   endif;
				  
				   M = zeros((nc-1)*nchocc,nc*nchocc);
				   Alt_chosen = dta[(i-1)*nchocc+1:(i-1)*nchocc+nchocc,altchm];
				   

				   for j(1,nchocc,1);
				   if(Alt_chosen[j] eq 1);
					temp = one_negative ~ iden_matrix;
				   elseif(Alt_chosen[j] eq nc);
					temp = iden_matrix ~ one_negative;
				   else;
					ch = Alt_chosen[j];
					temp = iden_matrix[.,1:ch-1] ~ one_negative ~ iden_matrix[.,ch:nc-1];
				   endif;
				   
				   M[(j-1)*(nc-1)+1:(nc-1)*j,(j-1)*(nc)+1:(nc*j)] = temp;
				   clear temp;
				   endfor;

			   
				   Mean_changed = M * U_Y;
				   Mean_changed_d1 = M * U_Yd1;
				   Mean_changed_d2 = M * U_Yd2;
				   
				   Error_changed = M * Full_error * M';
				   Error_changed_d1 = M * Full_error_d1 * M';
				   Error_changed_d2 = M * Full_error_d2 * M';
				
                  if(nchocc > 1);						
					if(eff_pair ne 1);
						
						for g4(1,nchocc-1,1);
						   for g5(g4+1,nchocc,1);

							 R = zeros(2*(nc-1),(nc-1)*nchocc);

							 R[1:nc-1,(g4-1)*(nc-1)+1:(nc-1)*g4] = eye(nc-1);

							 R[nc-1+1:2*(nc-1),(g5-1)*(nc-1)+1:(nc-1)*g5] = eye(nc-1);			 
							 
							 mean_gu    = - R*Mean_changed;
							 var_gu     =   R*Error_changed*R';   
							   
							   
							 mean_gu_d1   = - R*Mean_changed_d1;
							 var_gu_d1     = R*Error_changed_d1*R';
							 
							 mean_gu_d2   = - R*Mean_changed_d2;
							 var_gu_d2     = R*Error_changed_d2*R';
							   
							 om     = (diag(var_gu));
							 omncd1  = (diag(var_gu_d1));
							 mean_gu_final  =   mean_gu./sqrt(om);
							 
							 omncd2  = (diag(var_gu_d2));
							 
							   
							 var_gu_final      = corrvc(var_gu);
							 var_gu_final      = diagrv(var_gu_final,ones(2*(nc-1),1));
							   
							 mean_gu_final_d1 = (  sqrt(om') .* mean_gu_d1' - ( mean_gu)' .* omncd1' ./ sqrt(om') ./2   ) ./ (om');
							 mean_gu_final_d2 = (  sqrt(om') .* mean_gu_d2' - ( mean_gu)' .* omncd2' ./ sqrt(om') ./2   ) ./ (om');
							 
							 var_gu_final_d1  = ( (var_gu_d1./sqrt(om))' ./ sqrt(om) ) - 0.5 * ( (var_gu ./(om^(3/2)) .* omncd1 )' ./(om^(1/2))   + ((var_gu ./(om^(1/2)) )' ./(om^(3/2))) .* omncd1 ) ;
							 var_gu_final_d2  = ( (var_gu_d2./sqrt(om))' ./ sqrt(om) ) - 0.5 * ( (var_gu ./(om^(3/2)) .* omncd2 )' ./(om^(1/2))   + ((var_gu ./(om^(1/2)) )' ./(om^(3/2))) .* omncd2 ) ;
							 
							 var_gu_final_d1  = diagrv(var_gu_final_d1 ,ones(2*(nc-1),1));
							 var_gu_final_d2  = diagrv(var_gu_final_d2 ,ones(2*(nc-1),1));
							 
							 if(Ind_Pair == 1);
								 p1_dd_temp = 0; p11 = 1;								 
								 for j(1,2,1);
							         
									 pair_count = pair_count + 1;
									 num_element = (nc-1);
									 r_st  = (j-1)*(nc-1) + 1;
									 r_end = (j-1)*(nc-1) + (nc-1);	
									 shi_r_unq1 = {}; shi_r_unq2 = {};
									 for ishi(r_st,r_end-1,1);
										shi_r_unq1 = shi_r_unq1 ~ var_gu_final_d1[ishi,ishi+1:r_end];
										shi_r_unq2 = shi_r_unq2 ~ var_gu_final_d2[ishi,ishi+1:r_end];
									 endfor;
									
									 
									 f1   = Store_ogc[pair_count,1];
									 f1x1 = (Store_ogc[pair_count,2:1+num_element] * mean_gu_final_d1[1,r_st:r_end]') + (Store_ogc[pair_count,1+num_element+1:1+num_element+cols(shi_r_unq1)] * shi_r_unq1' );
									 f1x2 = (Store_ogc[pair_count,2:1+num_element] * mean_gu_final_d2[1,r_st:r_end]') + (Store_ogc[pair_count,1+num_element+1:1+num_element+cols(shi_r_unq2)] * shi_r_unq2' );
									 
									 ME1 = mean_gu_final_d1[1,r_st:r_end] ;
									 ME2 = mean_gu_final_d2[1,r_st:r_end] ;
														   
																								   
									for icont(r_st+1,r_end,1);
										ME1 = ME1 ~ var_gu_final_d1[icont,1:icont-1];
										ME2 = ME2 ~ var_gu_final_d2[icont,1:icont-1];
									endfor;
														   
									cont_ele = cols(ME1);
									hd = {};
														   
									for i1(1,cont_ele,1);
										for i2(i1,cont_ele,1);
											   hd = hd | (ME1[1,i1]*ME2[1,i2]);
										endfor;
									endfor;
														   
									f1x2x1  = (Hess_nn[pair_count,1:rows(hd)]*hd) ;
									nn_grad = -((f1x1*f1x2)/f1^2) + (f1x2x1/f1);
									p1_dd_temp = p1_dd_temp + nn_grad;
									p11 = p11*f1;
								endfor;
								if(p11 > upper_limit);
										p4_dd     = p4_dd + p1_dd_temp ;
								endif;
							 
							 else;
									 pair_count = pair_count + 1;
									 num_element = 2*(nc-1);
									 shi_r_unq1 = {}; shi_r_unq2 = {};
									 for ishi(1,rows(var_gu_final_d1)-1,1);
										shi_r_unq1 = shi_r_unq1 ~ var_gu_final_d1[ishi,ishi+1:cols(var_gu_final_d1 )];
										shi_r_unq2 = shi_r_unq2 ~ var_gu_final_d2[ishi,ishi+1:cols(var_gu_final_d2 )];
									 endfor;
									
									 
									 f1   = Store_ogc[pair_count,1];
									 f1x1 = (Store_ogc[pair_count,2:1+num_element] * mean_gu_final_d1') + (Store_ogc[pair_count,1+num_element+1:1+num_element+cols(shi_r_unq1)] * shi_r_unq1' );
									 f1x2 = (Store_ogc[pair_count,2:1+num_element] * mean_gu_final_d2') + (Store_ogc[pair_count,1+num_element+1:1+num_element+cols(shi_r_unq2)] * shi_r_unq2' );
									 
									 ME1 = mean_gu_final_d1 ;
									 ME2 = mean_gu_final_d2 ;
														   
																								   
									for icont(2,num_element,1);
										ME1 = ME1 ~ var_gu_final_d1[icont,1:icont-1];
										ME2 = ME2 ~ var_gu_final_d2[icont,1:icont-1];
									endfor;
														   
									cont_ele = cols(ME1);
									hd = {};
														   
									for i1(1,cont_ele,1);
										for i2(i1,cont_ele,1);
											   hd = hd | (ME1[1,i1]*ME2[1,i2]);
										endfor;
									endfor;
														   
									f1x2x1  = (Hess_nn[pair_count,1:rows(hd)]*hd) ;
																											
									if(f1 > upper_limit);
										nn_grad = -((f1x1*f1x2)/f1^2) + (f1x2x1/f1);
										p4_dd     = p4_dd + nn_grad ;
									endif;
							endif; 
							 
							clear mean_gu,var_gu,mean_gu_d1,mean_gu_d2,var_gu_d1,var_gu_d2,om,omncd1,omncd2,mean_gu_final,var_gu_final,mean_gu_final_d1,mean_gu_final_d2,var_gu_final_d1,var_gu_final_d2,shi_r_unq1,shi_r_unq2,w1,g1;

						   endfor;
                       endfor;
				    else;
				        for g4(1,st_pair,1);
						   for g5(g4+1,end_pair,1);

							 R = zeros(2*(nc-1),(nc-1)*nchocc);

							 R[1:nc-1,(g4-1)*(nc-1)+1:(nc-1)*g4] = eye(nc-1);

							 R[nc-1+1:2*(nc-1),(g5-1)*(nc-1)+1:(nc-1)*g5] = eye(nc-1);			 
							 
							 mean_gu    = - R*Mean_changed;
							 var_gu     =   R*Error_changed*R';   
							   
							   
							 mean_gu_d1   = - R*Mean_changed_d1;
							 var_gu_d1     = R*Error_changed_d1*R';
							 
							 mean_gu_d2   = - R*Mean_changed_d2;
							 var_gu_d2     = R*Error_changed_d2*R';
							   
							 om     = (diag(var_gu));
							 omncd1  = (diag(var_gu_d1));
							 mean_gu_final  =   mean_gu./sqrt(om);
							 
							 omncd2  = (diag(var_gu_d2));
							 							   
							 var_gu_final      = corrvc(var_gu);
							 var_gu_final      = diagrv(var_gu_final,ones(2*(nc-1),1));
							   
							 mean_gu_final_d1 = (  sqrt(om') .* mean_gu_d1' - ( mean_gu)' .* omncd1' ./ sqrt(om') ./2   ) ./ (om');
							 mean_gu_final_d2 = (  sqrt(om') .* mean_gu_d2' - ( mean_gu)' .* omncd2' ./ sqrt(om') ./2   ) ./ (om');
							 
							 var_gu_final_d1  = ( (var_gu_d1./sqrt(om))' ./ sqrt(om) ) - 0.5 * ( (var_gu ./(om^(3/2)) .* omncd1 )' ./(om^(1/2))   + ((var_gu ./(om^(1/2)) )' ./(om^(3/2))) .* omncd1 ) ;
							 var_gu_final_d2  = ( (var_gu_d2./sqrt(om))' ./ sqrt(om) ) - 0.5 * ( (var_gu ./(om^(3/2)) .* omncd2 )' ./(om^(1/2))   + ((var_gu ./(om^(1/2)) )' ./(om^(3/2))) .* omncd2 ) ;
							 
							 var_gu_final_d1  = diagrv(var_gu_final_d1 ,ones(2*(nc-1),1));
							 var_gu_final_d2  = diagrv(var_gu_final_d2 ,ones(2*(nc-1),1));
							   
							 
							 if(Ind_Pair == 1);
								 p1_dd_temp = 0; p11 = 1;								 
								 for j(1,2,1);
							         
									 pair_count = pair_count + 1;
									 num_element = (nc-1);
									 r_st  = (j-1)*(nc-1) + 1;
									 r_end = (j-1)*(nc-1) + (nc-1);	
									 shi_r_unq1 = {}; shi_r_unq2 = {};
									 for ishi(r_st,r_end-1,1);
										shi_r_unq1 = shi_r_unq1 ~ var_gu_final_d1[ishi,ishi+1:r_end];
										shi_r_unq2 = shi_r_unq2 ~ var_gu_final_d2[ishi,ishi+1:r_end];
									 endfor;
									
									 
									 f1   = Store_ogc[pair_count,1];
									 f1x1 = (Store_ogc[pair_count,2:1+num_element] * mean_gu_final_d1[1,r_st:r_end]') + (Store_ogc[pair_count,1+num_element+1:1+num_element+cols(shi_r_unq1)] * shi_r_unq1' );
									 f1x2 = (Store_ogc[pair_count,2:1+num_element] * mean_gu_final_d2[1,r_st:r_end]') + (Store_ogc[pair_count,1+num_element+1:1+num_element+cols(shi_r_unq2)] * shi_r_unq2' );
									 
									 ME1 = mean_gu_final_d1[1,r_st:r_end] ;
									 ME2 = mean_gu_final_d2[1,r_st:r_end] ;
														   
																								   
									for icont(r_st+1,r_end,1);
										ME1 = ME1 ~ var_gu_final_d1[icont,1:icont-1];
										ME2 = ME2 ~ var_gu_final_d2[icont,1:icont-1];
									endfor;
														   
									cont_ele = cols(ME1);
									hd = {};
														   
									for i1(1,cont_ele,1);
										for i2(i1,cont_ele,1);
											   hd = hd | (ME1[1,i1]*ME2[1,i2]);
										endfor;
									endfor;
														   
									f1x2x1  = (Hess_nn[pair_count,1:rows(hd)]*hd) ;
									nn_grad = -((f1x1*f1x2)/f1^2) + (f1x2x1/f1);
									p1_dd_temp = p1_dd_temp + nn_grad;
									p11 = p11*f1;
								endfor;
								if(p11 > upper_limit);
										p4_dd     = p4_dd + p1_dd_temp ;
								endif;
							 
							 else;
									 pair_count = pair_count + 1;
									 num_element = 2*(nc-1);
									 shi_r_unq1 = {}; shi_r_unq2 = {};
									 for ishi(1,rows(var_gu_final_d1)-1,1);
										shi_r_unq1 = shi_r_unq1 ~ var_gu_final_d1[ishi,ishi+1:cols(var_gu_final_d1 )];
										shi_r_unq2 = shi_r_unq2 ~ var_gu_final_d2[ishi,ishi+1:cols(var_gu_final_d2 )];
									 endfor;
									
									 
									 f1   = Store_ogc[pair_count,1];
									 f1x1 = (Store_ogc[pair_count,2:1+num_element] * mean_gu_final_d1') + (Store_ogc[pair_count,1+num_element+1:1+num_element+cols(shi_r_unq1)] * shi_r_unq1' );
									 f1x2 = (Store_ogc[pair_count,2:1+num_element] * mean_gu_final_d2') + (Store_ogc[pair_count,1+num_element+1:1+num_element+cols(shi_r_unq2)] * shi_r_unq2' );
									 
									 ME1 = mean_gu_final_d1 ;
									 ME2 = mean_gu_final_d2 ;
														   
																								   
									for icont(2,num_element,1);
										ME1 = ME1 ~ var_gu_final_d1[icont,1:icont-1];
										ME2 = ME2 ~ var_gu_final_d2[icont,1:icont-1];
									endfor;
														   
									cont_ele = cols(ME1);
									hd = {};
														   
									for i1(1,cont_ele,1);
										for i2(i1,cont_ele,1);
											   hd = hd | (ME1[1,i1]*ME2[1,i2]);
										endfor;
									endfor;
														   
									f1x2x1  = (Hess_nn[pair_count,1:rows(hd)]*hd) ;
																											
									if(f1 > upper_limit);
										nn_grad = -((f1x1*f1x2)/f1^2) + (f1x2x1/f1);
										p4_dd     = p4_dd + nn_grad ;
									endif;
							endif; 					   
							clear mean_gu,var_gu,mean_gu_d1,mean_gu_d2,var_gu_d1,var_gu_d2,om,omncd1,omncd2,mean_gu_final,var_gu_final,mean_gu_final_d1,mean_gu_final_d2,var_gu_final_d1,var_gu_final_d2,shi_r_unq1,shi_r_unq2,w1,g1;
						   endfor;
					    endfor;
	   
	                    if(end_pair < nchocc);
					    for g5(end_pair+1,nchocc,1);

							 R = zeros((nc-1),(nc-1)*nchocc);

							 R[1:nc-1,(g5-1)*(nc-1)+1:(nc-1)*g5] = eye(nc-1);

							 pair_count = pair_count + 1;
							 
							 mean_gu    = - R*Mean_changed;
							 var_gu     =   R*Error_changed*R';   
							   
							   
							 mean_gu_d1   = - R*Mean_changed_d1;
							 var_gu_d1     = R*Error_changed_d1*R';
							 
							 mean_gu_d2   = - R*Mean_changed_d2;
							 var_gu_d2     = R*Error_changed_d2*R';
							   
							 om     = (diag(var_gu));
							 omncd1  = (diag(var_gu_d1));
							 mean_gu_final  =   mean_gu./sqrt(om);
							 
							 omncd2  = (diag(var_gu_d2));
							 
							   
							 var_gu_final      = corrvc(var_gu);
							 var_gu_final      = diagrv(var_gu_final,ones((nc-1),1));
							   
							 mean_gu_final_d1 = (  sqrt(om') .* mean_gu_d1' - ( mean_gu)' .* omncd1' ./ sqrt(om') ./2   ) ./ (om');
							 mean_gu_final_d2 = (  sqrt(om') .* mean_gu_d2' - ( mean_gu)' .* omncd2' ./ sqrt(om') ./2   ) ./ (om');
							 
							 var_gu_final_d1  = ( (var_gu_d1./sqrt(om))' ./ sqrt(om) ) - 0.5 * ( (var_gu ./(om^(3/2)) .* omncd1 )' ./(om^(1/2))   + ((var_gu ./(om^(1/2)) )' ./(om^(3/2))) .* omncd1 ) ;
							 var_gu_final_d2  = ( (var_gu_d2./sqrt(om))' ./ sqrt(om) ) - 0.5 * ( (var_gu ./(om^(3/2)) .* omncd2 )' ./(om^(1/2))   + ((var_gu ./(om^(1/2)) )' ./(om^(3/2))) .* omncd2 ) ;
							 
							 var_gu_final_d1  = diagrv(var_gu_final_d1 ,ones((nc-1),1));
							 var_gu_final_d2  = diagrv(var_gu_final_d2 ,ones((nc-1),1));
							   
							 
							 num_element = (nc-1);
							 shi_r_unq1 = {}; shi_r_unq2 = {};
							 for ishi(1,rows(var_gu_final_d1)-1,1);
								shi_r_unq1 = shi_r_unq1 ~ var_gu_final_d1[ishi,ishi+1:cols(var_gu_final_d1 )];
								shi_r_unq2 = shi_r_unq2 ~ var_gu_final_d2[ishi,ishi+1:cols(var_gu_final_d2 )];
							 endfor;
							
							 
							 f1   = Store_ogc[pair_count,1];
							 f1x1 = (Store_ogc[pair_count,2:1+num_element] * mean_gu_final_d1') + (Store_ogc[pair_count,1+num_element+1:1+num_element+cols(shi_r_unq1)] * shi_r_unq1' );
							 f1x2 = (Store_ogc[pair_count,2:1+num_element] * mean_gu_final_d2') + (Store_ogc[pair_count,1+num_element+1:1+num_element+cols(shi_r_unq2)] * shi_r_unq2' );
							 
							 ME1 = mean_gu_final_d1 ;
							 ME2 = mean_gu_final_d2 ;
												   
																						   
							for icont(2,num_element,1);
							    ME1 = ME1 ~ var_gu_final_d1[icont,1:icont-1];
								ME2 = ME2 ~ var_gu_final_d2[icont,1:icont-1];
							endfor;
												   
							cont_ele = cols(ME1);
							hd = {};
												   
							for i1(1,cont_ele,1);
							    for i2(i1,cont_ele,1);
									   hd = hd | (ME1[1,i1]*ME2[1,i2]);
								endfor;
							endfor;
												   
							f1x2x1  = (Hess_nn[pair_count,1:rows(hd)]*hd) ;
																									
							if(f1 > upper_limit);
								nn_grad = -((f1x1*f1x2)/f1^2) + (f1x2x1/f1);
								p4_dd     = p4_dd + nn_grad ;
							endif;					   
							clear mean_gu,var_gu,mean_gu_d1,mean_gu_d2,var_gu_d1,var_gu_d2,om,omncd1,omncd2,mean_gu_final,var_gu_final,mean_gu_final_d1,mean_gu_final_d2,var_gu_final_d1,var_gu_final_d2,shi_r_unq1,shi_r_unq2,w1,g1;
						endfor;
				        endif;
					endif;
				  else;
				             pair_count = pair_count + 1;
							 
							 mean_gu    = - Mean_changed;
							 var_gu     =   Error_changed;   
							   
							   
							 mean_gu_d1   = -Mean_changed_d1;
							 var_gu_d1     = Error_changed_d1;
							 
							 mean_gu_d2   = -Mean_changed_d2;
							 var_gu_d2     = Error_changed_d2;
							   
							 om     = (diag(var_gu));
							 omncd1  = (diag(var_gu_d1));
							 mean_gu_final  =   mean_gu./sqrt(om);
							 
							 omncd2  = (diag(var_gu_d2));
							 
							   
							 var_gu_final      = corrvc(var_gu);
							 var_gu_final      = diagrv(var_gu_final,ones((nc-1),1));
							   
							 mean_gu_final_d1 = (  sqrt(om') .* mean_gu_d1' - ( mean_gu)' .* omncd1' ./ sqrt(om') ./2   ) ./ (om');
							 mean_gu_final_d2 = (  sqrt(om') .* mean_gu_d2' - ( mean_gu)' .* omncd2' ./ sqrt(om') ./2   ) ./ (om');
							 
							 var_gu_final_d1  = ( (var_gu_d1./sqrt(om))' ./ sqrt(om) ) - 0.5 * ( (var_gu ./(om^(3/2)) .* omncd1 )' ./(om^(1/2))   + ((var_gu ./(om^(1/2)) )' ./(om^(3/2))) .* omncd1 ) ;
							 var_gu_final_d2  = ( (var_gu_d2./sqrt(om))' ./ sqrt(om) ) - 0.5 * ( (var_gu ./(om^(3/2)) .* omncd2 )' ./(om^(1/2))   + ((var_gu ./(om^(1/2)) )' ./(om^(3/2))) .* omncd2 ) ;
							 
							 var_gu_final_d1  = diagrv(var_gu_final_d1 ,ones((nc-1),1));
							 var_gu_final_d2  = diagrv(var_gu_final_d2 ,ones((nc-1),1));
							   
							 if(nc > 2);
                                 num_element = (nc-1);
                                 shi_r_unq1 = {}; shi_r_unq2 = {};
                                 for ishi(1,rows(var_gu_final_d1)-1,1);
                                    shi_r_unq1 = shi_r_unq1 ~ var_gu_final_d1[ishi,ishi+1:cols(var_gu_final_d1 )];
                                    shi_r_unq2 = shi_r_unq2 ~ var_gu_final_d2[ishi,ishi+1:cols(var_gu_final_d2 )];
                                 endfor;
                                
                                 
                                 f1   = Store_ogc[pair_count,1];
                                 f1x1 = (Store_ogc[pair_count,2:1+num_element] * mean_gu_final_d1') + (Store_ogc[pair_count,1+num_element+1:1+num_element+cols(shi_r_unq1)] * shi_r_unq1' );
                                 f1x2 = (Store_ogc[pair_count,2:1+num_element] * mean_gu_final_d2') + (Store_ogc[pair_count,1+num_element+1:1+num_element+cols(shi_r_unq2)] * shi_r_unq2' );
                                 
                                 ME1 = mean_gu_final_d1 ;
                                 ME2 = mean_gu_final_d2 ;
                                                       
                                                                                               
                                for icont(2,num_element,1);
                                    ME1 = ME1 ~ var_gu_final_d1[icont,1:icont-1];
                                    ME2 = ME2 ~ var_gu_final_d2[icont,1:icont-1];
                                endfor;
                                                       
                                cont_ele = cols(ME1);
                                hd = {};
                                                       
                                for i1(1,cont_ele,1);
                                    for i2(i1,cont_ele,1);
                                           hd = hd | (ME1[1,i1]*ME2[1,i2]);
                                    endfor;
                                endfor;
                             else;
                                 num_element = (nc-1);
                                 f1   = Store_ogc[pair_count,1];
                                 f1x1 = (Store_ogc[pair_count,2:1+num_element] * mean_gu_final_d1') ;
                                 f1x2 = (Store_ogc[pair_count,2:1+num_element] * mean_gu_final_d2') ;
                                 
                                 ME1 = mean_gu_final_d1 ;
                                 ME2 = mean_gu_final_d2 ;
                                                                                       
                                 hd = {};
                                 hd = hd | (ME1*ME2);
                             endif;
                             
                             f1x2x1  = (Hess_nn[pair_count,1:rows(hd)]*hd) ;
																									
							if(f1 > upper_limit);
								nn_grad = -((f1x1*f1x2)/f1^2) + (f1x2x1/f1);
								p4_dd     = p4_dd + nn_grad ;
							endif;
							
							clear mean_gu,var_gu,mean_gu_d1,mean_gu_d2,var_gu_d1,var_gu_d2,om,omncd1,omncd2,mean_gu_final,var_gu_final,mean_gu_final_d1,mean_gu_final_d2,var_gu_final_d1,var_gu_final_d2,shi_r_unq1,shi_r_unq2,w1,g1;
				  endif;
				  clear Mean_changed,Mean_changed_d1,Mean_changed_d2,Error_changed,Error_changed_d1,Error_changed_d2;
		         endfor;
					HCap[iparm,jparm] = p4_dd;
					if(iparm ne jparm);
					   HCap[jparm,iparm] = p4_dd;
					endif;
	              endif;
	          endfor;
         endif;
     endfor;

    HCap = -HCap;
    HCap = selif(HCap,_max_active);
    HCap = selif(HCap',_max_active);
    retp(HCap);
endp;

proc(1)= pdfnd(x);
    local d,p,p1,p2,p3,grad1,grad,store,ie;
	 p1 = exp(-0.5*x*x);
	 p2 = sqrt(2*pi);
	 p  = p1/p2;
	 store = -p*x;
	 retp(store);
 endp;

proc(1)=cdfbvn_grad(a,b,corr);
    local d_a,d_b,d_corr;
    d_a     = pdfn(a) .* cdfn((b- corr .* a) ./ sqrt(1-corr .* corr) );
    d_b     = pdfn(b) .* cdfn((a- corr .* b) ./ sqrt(1-corr .* corr) );
    d_corr  = (exp(-0.5*((a^2 + b^2 - 2*corr .* a .* b   ) ./ (1-corr .* corr) ))) ./ ((2*pi) * sqrt(1-corr .* corr));
    retp(d_a|d_b|d_corr);
endp;


proc(1)=cdfbvn_Hess(a,b,corr);
    local d_a,d_b,d_corr,d_aa,d_ab,d_acorr,d_bb,d_bcorr,d_c1,d_c2,d_corrcorr;
	
    d_a     = pdfn(a) .* cdfn((b- corr .* a) ./ sqrt(1-corr .* corr) );
    d_b     = pdfn(b) .* cdfn((a- corr .* b) ./ sqrt(1-corr .* corr) );
    d_corr  = (exp(-0.5*((a^2 + b^2 - 2*corr .* a .* b   ) ./ (1-corr .* corr) ))) ./ ((2*pi) * sqrt(1-corr .* corr));
    
	d_aa     = -(a*d_a) - (corr*d_corr) ; 
	d_ab     = d_corr ;
    d_acorr  = ( (corr*b - a)/(1-corr .* corr) ) * d_corr ;

    d_bb     = -(b*d_b) - (corr*d_corr) ;
    d_bcorr  = ( (corr*a - b)/(1-corr .* corr) ) * d_corr ;	
	
	d_c1       = corr * ( (a^2 + b^2 - 2*corr .* a .* b   ) ./ (1-corr .* corr) ) ;
	d_c2       = ( (a*b) + corr - d_c1 ) / (1-corr .* corr) ;
	d_corrcorr = d_corr*d_c2;
	
	retp(d_aa|d_ab|d_acorr|d_bb|d_bcorr|d_corrcorr);
endp;

proc(1) = gettime();
	local y,timesec;
	y = time;
	timesec = y[1,1]*3600 + y[2,1]*60 + y[3,1];
	retp(timesec);
endp;

proc(4) = MVNcdfHess(a,corr,s);
    local prob,p_temp,i,VC_mat,cdf_diff,w,aa,ab,seedr,cm,r,xgrad,p1_dd,x_d,st_col,VC_mat_d,cdf_diffd,bvnd,ad,temp1,cmd,p_tempd,grad,row_req;
    local ncholerr,cgrad,corrd,col_req,cgrad_arr,cgrad_up,total_parm,Hess_out,x_dj,x_di,f1_d,f2,f1_dd,f2_d,f2_dd,VC_mat_di,VC_mat_dj,VC_mat_dij;
	local cdf_diffdi,cdf_diffdj,cdf_diffdij,bvnd1,bvnd2,adi,adj,adij,tempi,tempj,tempij,cmdi,cmdj,cmdij,f1d,f2d,f3d,f1dd,f2dd,f3dd,p_tempdi,p_tempdij;
	local probkd,i1,j1,corrdj,corrdi,row_reqi,col_reqi,row_reqj,col_reqj,Hess_arr,Hess_outf,req_numparm,Hess_veh,Hess_out1,Hess_out2,Hess_out3,rnum,ss;
	
	
	if(_randper == 1);
			w  = {};
			{ rnum, ss } = rndKMu(1,cols(a),s);
			aa = seqa(1,1,cols(a))~(rnum)';
			aa = sortc(aa,2);
			w  = w|((aa[.,1])');
			w  = w';	
		    s  = ss[1];	
	else;
	    w  = seqa(1,1,cols(a));
	endif;
	
	ab = a';
	a  = ab[w];
	a  = a';
	r  = submat(corr,w,w);
	
	ncholerr = (cols(a)*(cols(a)+1))/2;
	seedr = s ;
    prob  = {};
	p_temp = cdfn(a[1,1]);
	prob = prob | p_temp;
	total_parm = ncholerr + cols(a) ;
	
	/* Calculating Probability */
	for i(2,cols(a),1);
			
		VC_mat = zeros(i,i);
		cdf_diff = {};
		
		for k1(1,i,1);
			cdf_diff = cdf_diff | (1-cdfn(a[1,k1])) ;
			for k2(k1,i,1);
				VC_mat[k1,k2] = cdfbvn(a[1,k1],a[1,k2],r[k1,k2]) - ( cdfn(a[1,k1])*cdfn(a[1,k2]) ) ;
				VC_mat[k2,k1] = VC_mat[k1,k2] ;
			endfor;
		endfor;
		
		trap 1;
		cm = invpd(VC_mat[1:i-1,1:i-1]);
		if scalerr(cm);
		  cm=inv(VC_mat[1:i-1,1:i-1]);
		endif;
		trap 0;
		
		p_temp = cdfn(a[1,i]) + ( VC_mat[i,1:i-1]*cm*cdf_diff[1:i-1,1] ) ;
		prob   = prob | p_temp;
	endfor;
	
	/* Gradient w.r.t absicca elements */
	ThreadBegin;
	xgrad = Mean_cdfgrad(a,r,prob);
	ThreadEnd;
	
	/* Gradient w.r.t Correlation elements */
	ThreadBegin;
	cgrad = Rho_cdfgrad(a,r,prob);
    ThreadEnd;
	ThreadJoin;
	
	/* Hessian Calculation */
	ThreadBegin;
	Hess_out1 = MVNcdfhess_1(a,r,prob,xgrad,cgrad);	
	ThreadEnd;
	
	ThreadBegin;
	Hess_out2 = MVNcdfhess_2(a,r,prob,xgrad,cgrad);	
	ThreadEnd;
	
	ThreadBegin;
	Hess_out3 = MVNcdfhess_3(a,r,prob,xgrad,cgrad);	
	ThreadEnd;
	ThreadJoin;
	
	Hess_out = Hess_out1 + Hess_out2 + Hess_out3 ;
	clear Hess_out1,Hess_out2,Hess_out3;
	
	if(_randper == 1);
		grad = {};
		cgrad_arr = zeros(cols(a),cols(a));
		Hess_arr  = zeros(total_parm,total_parm);
		for i(1,cols(a),1);
			row_req = indexcat(w,i);
			grad    = grad ~ xgrad[1,row_req];
			cgrad_arr[i,row_req] = 1;
			Hess_arr[i,row_req]  = 1;
			Hess_arr[i+cols(a),cols(a)+row_req] = 1;
		endfor;
	    cgrad     = cgrad_arr*cgrad*cgrad_arr';
		cgrad_up  = upmat(cgrad);
		Hess_outf = Hess_arr*Hess_out*Hess_arr';
		
		req_numparm = ones(cols(a),1);
		for i(1,cols(a),1);
			for j(1,i,1);
				if(i == j);
					req_numparm = req_numparm | 0;
				else;
					req_numparm = req_numparm | 1;
				endif;
			endfor;
		endfor;
		
		Hess_outf = selif(Hess_outf,req_numparm);
		Hess_outf = Hess_outf';
		Hess_outf = selif(Hess_outf,req_numparm);
		Hess_outf = Hess_outf';
		
		for i(1,cols(a)-1,1);
		     grad    = grad ~ cgrad_up[i,i+1:cols(a)] ;
		endfor;
		
	    Hess_veh = {};	
		for i(1,rows(Hess_outf),1);
		    	Hess_veh = Hess_veh ~ Hess_outf[i,i:cols(Hess_outf)];
		endfor;
			
	else;
		grad = xgrad;
		cgrad_up = upmat(cgrad);
		for i(1,cols(a)-1,1);
		     grad    = grad ~ cgrad_up[i,i+1:cols(a)] ;
		endfor;
	    Hess_outf = Hess_out;
		
		req_numparm = ones(cols(a),1);
		for i(1,cols(a),1);
			for j(1,i,1);
				if(i == j);
					req_numparm = req_numparm | 0;
				else;
					req_numparm = req_numparm | 1;
				endif;
			endfor;
		endfor;
		
		Hess_outf = selif(Hess_outf,req_numparm);
		Hess_outf = Hess_outf';
		Hess_outf = selif(Hess_outf,req_numparm);
		Hess_outf = Hess_outf';
		
		Hess_veh = {};	
		for i(1,rows(Hess_outf),1);
		    	Hess_veh = Hess_veh ~ Hess_outf[i,i:cols(Hess_outf)];
		endfor;
		
	endif;
	
	retp(prodc(prob),grad,Hess_veh,seedr);
endp;

proc(1)=Mean_cdfgrad(a,r,prob);
	local p1_dd,x_d,st_col,j,VC_mat,cdf_diff,VC_mat_d,cdf_diffd,k1,k2,bvnd,ad,temp1,cmd,cm,p_tempd,xgradient;
	
	xgradient = {};
	for i(1,cols(a),1);
		p1_dd = 0;
		x_d   = zeros(1,cols(a));
		x_d[1,i] = 1;
		
		if(i==1);
			p1_dd    = p1_dd + (pdfn(a[1,1])*x_d[1,1])*(prodc(prob)/prob[i,1]) ;
			st_col   = i + 1;
		else;
			st_col   = i;
		endif;
		
		
		for j(st_col,cols(a),1);
		
			VC_mat = zeros(j,j);
		    cdf_diff = {};
			VC_mat_d = zeros(j,j);
			cdf_diffd = {};
			
			for k1(1,j,1);
				cdf_diff  = cdf_diff  | (1-cdfn(a[1,k1])) ;
				cdf_diffd = cdf_diffd | (-pdfn(a[1,k1])*x_d[1,k1]) ;
				for k2(k1,j,1);
					
					VC_mat[k1,k2] = cdfbvn(a[1,k1],a[1,k2],r[k1,k2]) - ( cdfn(a[1,k1])*cdfn(a[1,k2]) ) ;
				    VC_mat[k2,k1] = VC_mat[k1,k2] ;
					
					if(k1 ne k2);
					  bvnd  = cdfbvn_grad(a[1,k1],a[1,k2],r[k1,k2]) ;
					  ad    = x_d[1,k1]|x_d[1,k2]|0;
				    else;
					  bvnd  = (pdfn(a[1,k1])|0|0);
					  ad    = x_d[1,k1]|0|0;
					endif;
					
					temp1 = sumc(bvnd .* ad) ;
					
					VC_mat_d[k1,k2] = temp1 - (pdfn(a[1,k1])*x_d[1,k1]*cdfn(a[1,k2])) - (cdfn(a[1,k1])*pdfn(a[1,k2])*x_d[1,k2]);
					VC_mat_d[k2,k1] = VC_mat_d[k1,k2] ;
				endfor;
			endfor;
			
			cmd = VC_mat_d[1:j-1,1:j-1];
			
			trap 1;
			cm = invpd(VC_mat[1:j-1,1:j-1]);
			if scalerr(cm);
			  cm  = inv(VC_mat[1:j-1,1:j-1]);
			endif;
			trap 0;
			
			p_tempd = (pdfn(a[1,j])*x_d[1,j]) + (VC_mat_d[j,1:j-1]*cm*cdf_diff[1:j-1,1]) -  (VC_mat[j,1:j-1]*cm*cmd*cm*cdf_diff[1:j-1,1]) + (VC_mat[j,1:j-1]*cm*cdf_diffd[1:j-1,1]);
			p1_dd   = p1_dd + ((p_tempd*prodc(prob))/prob[j,1]);
		endfor;
		xgradient = xgradient ~ p1_dd ;
	endfor;
	retp(xgradient);
endp;

proc(1)=Rho_cdfgrad(a,r,prob);
	local cgradient,i,p1_dd,corrd,m1,m2,row_req,col_req,j,VC_mat,cdf_diff,VC_mat_d,cdf_diffd,k1,k2,bvnd,ad,temp1,cmd,cm,p_tempd,ncholerr; 
	
	cgradient = zeros(cols(a),cols(a));
    ncholerr  = (cols(a)*(cols(a)+1))/2;
	for i(1,ncholerr,1);
		p1_dd = 0;
		corrd      = zeros(ncholerr,1);
		corrd[i,1] = 1;
		corrd      = xpnd(corrd);
		
		for m1(1,rows(corrd),1);
			for m2(1,m1,1);
				if(corrd[m1,m2] == 1);
					row_req = m1;
					col_req = m2;
					break;
			    endif;
			endfor;
		endfor;
		
		if(row_req ne col_req);
		for j(2,cols(a),1);
		
			VC_mat = zeros(j,j);
		    cdf_diff = {};
			VC_mat_d = zeros(j,j);
			
			
			for k1(1,j,1);
				cdf_diff  = cdf_diff  | (1-cdfn(a[1,k1])) ;
				for k2(k1,j,1);
					
					VC_mat[k1,k2] = cdfbvn(a[1,k1],a[1,k2],r[k1,k2]) - ( cdfn(a[1,k1])*cdfn(a[1,k2]) ) ;
				    VC_mat[k2,k1] = VC_mat[k1,k2] ;
					
					if(k1 ne k2);
					  bvnd  = cdfbvn_grad(a[1,k1],a[1,k2],r[k1,k2]) ;
					  ad    = 0|0|corrd[k1,k2];
				    else;
					  bvnd  = (pdfn(a[1,k1])|0|0);
					  ad    = 0|0|0;
					endif;
					
					temp1 = sumc(bvnd .* ad) ;
					
					VC_mat_d[k1,k2] = temp1 ;
					VC_mat_d[k2,k1] = VC_mat_d[k1,k2] ;
				endfor;
			endfor;
			
			cmd = VC_mat_d[1:j-1,1:j-1];
			
			trap 1;
			cm = invpd(VC_mat[1:j-1,1:j-1]);
			if scalerr(cm);
			  cm  = inv(VC_mat[1:j-1,1:j-1]);
			endif;
			trap 0;
			
			p_tempd = (VC_mat_d[j,1:j-1]*cm*cdf_diff[1:j-1,1]) -  (VC_mat[j,1:j-1]*cm*cmd*cm*cdf_diff[1:j-1,1]) ;
			p1_dd   = p1_dd + ((p_tempd*prodc(prob))/prob[j,1]);
		endfor;
		cgradient[row_req,col_req] = p1_dd ;
		cgradient[col_req,row_req] = p1_dd ;
		endif;
	endfor;
	retp(cgradient);
endp;

proc(1)=MVNcdfhess_1(a,r,prob,xgrad,cgrad);	
	local ncholerr,total_parm,Hess_out,i,j,p1_dd,x_dj,x_di,f1_d,f2,f1_dd,f2_d,f2_dd,st_col,k,VC_mat,cdf_diff,VC_mat_di,VC_mat_dj,VC_mat_dij;
	local cdf_diffdi,cdf_diffdj,cdf_diffdij,k1,bvnd1,bvnd2,adi,adj,adij,tempi,tempj,tempij,cmdi,cmdj,cmdij,f1d,f2d,f3d,f1dd,f2dd,f3dd,p_tempdi;
	local p_tempdij,probkd,cm;
	
	ncholerr = (cols(a)*(cols(a)+1))/2;
	total_parm = ncholerr + cols(a) ;
	Hess_out = zeros(total_parm,total_parm);
	for i(1,total_parm,1);
		for j(i,total_parm,1);
			
			if(i <= cols(a) and j <= cols(a));
			      
				    p1_dd     = 0;
					x_dj      = zeros(1,cols(a));
					x_dj[1,j] = 1;
					
					x_di      = zeros(1,cols(a));
					x_di[1,i] = 1;
					
					if(i==1 );
						f1_d     =  pdfn(a[1,1])*x_di[1,1];
						f2       =  prodc(prob)/prob[i,1];
						f1_dd    =  pdfnd(a[1,1])*x_dj[1,1]*x_di[1,1]*f2;
						f2_dd    = ( (prob[i,1]*xgrad[1,j]) - (prodc(prob)*pdfn(a[1,1])*x_dj[1,1]) ) / (prob[i,1]^2);
						f2_dd    =  f2_dd*f1_d;   
						p1_dd    = p1_dd + f1_dd + f2_dd ;
						st_col   = i+1;
					else;
						st_col   = i;
					endif;
					
					
					for k(st_col,cols(a),1);
					    
						VC_mat = zeros(k,k);
						cdf_diff = {};
						
						VC_mat_di  = zeros(k,k);
						VC_mat_dj  = zeros(k,k);
						VC_mat_dij = zeros(k,k);
						
						cdf_diffdi  = {};
						cdf_diffdj  = {};
						cdf_diffdij = {};
						
						for k1(1,k,1);
							cdf_diff    = cdf_diff     | (1-cdfn(a[1,k1])) ;
							cdf_diffdi  = cdf_diffdi   | (-pdfn(a[1,k1])*x_di[1,k1]) ;
							cdf_diffdj  = cdf_diffdj   | (-pdfn(a[1,k1])*x_dj[1,k1]) ;
							cdf_diffdij = cdf_diffdij  | (-pdfnd(a[1,k1])*x_dj[1,k1]*x_di[1,k1]) ;
							
							for k2(k1,k,1);
								
								VC_mat[k1,k2] = cdfbvn(a[1,k1],a[1,k2],r[k1,k2]) - ( cdfn(a[1,k1])*cdfn(a[1,k2]) ) ;
								VC_mat[k2,k1] = VC_mat[k1,k2] ;
								
								if(k1 ne k2);
								  bvnd1  = cdfbvn_grad(a[1,k1],a[1,k2],r[k1,k2]) ;
								  bvnd2  = cdfbvn_Hess(a[1,k1],a[1,k2],r[k1,k2]) ;
								  adi    = x_di[1,k1]|x_di[1,k2]|0;
								  adij   = (x_di[1,k1]*x_dj[1,k1])| (x_di[1,k1]*x_dj[1,k2]) | 0 | (x_di[1,k2]*x_dj[1,k2]) | 0 | 0 ;
								  adj    = x_dj[1,k1]|x_dj[1,k2]|0;
								else;
								  bvnd1  = (pdfn(a[1,k1])|0|0);
								  bvnd2  = (pdfnd(a[1,k1])|0|0);
								  adi    = x_di[1,k1]|0|0;
								  adij   = (x_di[1,k1]*x_dj[1,k1])|0|0;
								  adj    = x_dj[1,k1]|0|0;
								endif;
								
								tempi  = sumc(bvnd1 .* adi) ;
								tempj  = sumc(bvnd1 .* adj) ;
								tempij = sumc(bvnd2 .* adij) ;
															
								VC_mat_di[k1,k2] = tempi - (pdfn(a[1,k1])*x_di[1,k1]*cdfn(a[1,k2])) - (cdfn(a[1,k1])*pdfn(a[1,k2])*x_di[1,k2]);
								if(k1 ne k2);
								VC_mat_di[k2,k1] = VC_mat_di[k1,k2] ;
								endif;
								
								VC_mat_dj[k1,k2] = tempj - (pdfn(a[1,k1])*x_dj[1,k1]*cdfn(a[1,k2])) - (cdfn(a[1,k1])*pdfn(a[1,k2])*x_dj[1,k2]);
								if(k1 ne k2);
								VC_mat_dj[k2,k1] = VC_mat_dj[k1,k2] ;
								endif;
								
								VC_mat_dij[k1,k2] = tempij - (pdfnd(a[1,k1])*x_dj[1,k1]*x_di[1,k1]*cdfn(a[1,k2])) - (pdfn(a[1,k1])*x_di[1,k1]*pdfn(a[1,k2])*x_dj[1,k2]) - (pdfn(a[1,k1])*x_dj[1,k1]*pdfn(a[1,k2])*x_di[1,k2]) - (cdfn(a[1,k1])*pdfnd(a[1,k2])*x_dj[1,k2]*x_di[1,k2]);
								if(k1 ne k2);
								VC_mat_dij[k2,k1] = VC_mat_dij[k1,k2] ;
							    endif;
							endfor;
						endfor;
						
						cmdi  = VC_mat_di[1:k-1,1:k-1];
						cmdj  = VC_mat_dj[1:k-1,1:k-1];
						cmdij = VC_mat_dij[1:k-1,1:k-1];
						
												
						trap 1;
						cm = invpd(VC_mat[1:k-1,1:k-1]);
						if scalerr(cm);
						  cm  = inv(VC_mat[1:k-1,1:k-1]);
						endif;
						trap 0;
						
						f1d       = (VC_mat_di[k,1:k-1]*cm*cdf_diff[1:k-1,1]) ;
						f2d       = (VC_mat[k,1:k-1]*cm*cmdi*cm*cdf_diff[1:k-1,1]);
						f3d       = (VC_mat[k,1:k-1]*cm*cdf_diffdi[1:k-1,1]) ;
						
						f1dd       = (VC_mat_dij[k,1:k-1]*cm*cdf_diff[1:k-1,1]) -  (VC_mat_di[k,1:k-1]*cm*cmdj*cm*cdf_diff[1:k-1,1]) + (VC_mat_di[k,1:k-1]*cm*cdf_diffdj[1:k-1,1]) ;
						f2dd       = (VC_mat_dj[k,1:k-1]*cm*cmdi*cm*cdf_diff[1:k-1,1]) - (VC_mat[k,1:k-1]*cm*cmdj*cm*cmdi*cm*cdf_diff[1:k-1,1]) - (VC_mat[k,1:k-1]*cm*cmdi*cm*cmdj*cm*cdf_diff[1:k-1,1]) + (VC_mat[k,1:k-1]*cm*cmdij*cm*cdf_diff[1:k-1,1]) + (VC_mat[k,1:k-1]*cm*cmdi*cm*cdf_diffdj[1:k-1,1]) ;
						f3dd       = (VC_mat_dj[k,1:k-1]*cm*cdf_diffdi[1:k-1,1]) - (VC_mat[k,1:k-1]*cm*cmdj*cm*cdf_diffdi[1:k-1,1]) + (VC_mat[k,1:k-1]*cm*cdf_diffdij[1:k-1,1]) ;
						
						p_tempdi  = (pdfn(a[1,k])*x_di[1,k]) +  f1d - f2d + f3d ;
						p_tempdij = (pdfnd(a[1,k])*x_dj[1,k]*x_di[1,k]) + f1dd - f2dd + f3dd ;
						 
						probkd    = (pdfn(a[1,k])*x_dj[1,k]) + (VC_mat_dj[k,1:k-1]*cm*cdf_diff[1:k-1,1]) -  (VC_mat[k,1:k-1]*cm*cmdj*cm*cdf_diff[1:k-1,1]) + (VC_mat[k,1:k-1]*cm*cdf_diffdj[1:k-1,1]);
						
						f1_d     =  p_tempdi;
						f2       =  prodc(prob)/prob[k,1];
						
						f1_dd    =  p_tempdij*f2;
						f2_d     = ( prob[k,1]*xgrad[1,j] - prodc(prob)*probkd ) / (prob[k,1]^2);
						f2_dd    = f2_d*f1_d;
						
						p1_dd    = p1_dd + f1_dd + f2_dd ;
					    
						
					endfor;
			
			        Hess_out[i,j] = p1_dd;
					if( i ne j);
						Hess_out[j,i] = p1_dd;
				    endif;
			endif;
		 endfor;
	endfor;
	retp(Hess_out);
endp;

			
proc(1)=MVNcdfhess_2(a,r,prob,xgrad,cgrad);	
	local ncholerr,total_parm,Hess_out,i,j,p1_dd,x_dj,x_di,f1_d,f2,f1_dd,f2_d,f2_dd,st_col,k,VC_mat,cdf_diff,VC_mat_di,VC_mat_dj,VC_mat_dij;
	local cdf_diffdi,cdf_diffdj,cdf_diffdij,k1,bvnd1,bvnd2,adi,adj,adij,tempi,tempj,tempij,cmdi,cmdj,cmdij,f1d,f2d,f3d,f1dd,f2dd,f3dd,p_tempdi;
	local p_tempdij,probkd,i1,j1,corrdj,corrdi,row_reqi,col_reqi,row_reqj,col_reqj,cm;
	
	ncholerr = (cols(a)*(cols(a)+1))/2;
	total_parm = ncholerr + cols(a) ;
	Hess_out = zeros(total_parm,total_parm);
	for i(1,total_parm,1);
		for j(i,total_parm,1);			
		    if(i > cols(a) and j > cols(a));
			       
				   i1 = i - cols(a);
				   j1 = j - cols(a);
				   
				   p1_dd        = 0;
				   corrdj       = zeros(ncholerr,1);
				   corrdj[j1,1] = 1;
				   corrdj       = xpnd(corrdj);
				
				   corrdi       = zeros(ncholerr,1);
				   corrdi[i1,1] = 1;
				   corrdi       = xpnd(corrdi);
				   
				   for m1(1,rows(corrdi),1);
					   for m2(1,m1,1);
						   if(corrdi[m1,m2] == 1);
							  row_reqi = m1;
							  col_reqi = m2;
							  break;
						   endif;
					   endfor;
				   endfor;
				   
				   for m1(1,rows(corrdj),1);
					   for m2(1,m1,1);
						   if(corrdj[m1,m2] == 1);
							  row_reqj = m1;
							  col_reqj = m2;
							  break;
						   endif;
					   endfor;
				   endfor;
				                      
				    if( ((sumc(sumc(corrdj))) ne 1) and  ((sumc(sumc(corrdi))) ne 1) );
					for k(2,cols(a),1);
					
						VC_mat = zeros(k,k);
						cdf_diff = {};
						
						VC_mat_di  = zeros(k,k);
						VC_mat_dj  = zeros(k,k);
						VC_mat_dij = zeros(k,k);
						
						for k1(1,k,1);
						    cdf_diff  = cdf_diff  | (1-cdfn(a[1,k1])) ;
							for k2(k1,k,1);
								
								VC_mat[k1,k2] = cdfbvn(a[1,k1],a[1,k2],r[k1,k2]) - ( cdfn(a[1,k1])*cdfn(a[1,k2]) ) ;
								VC_mat[k2,k1] = VC_mat[k1,k2] ;
								
								if(k1 ne k2);
								  bvnd1  = cdfbvn_grad(a[1,k1],a[1,k2],r[k1,k2]) ;
								  bvnd2  = cdfbvn_Hess(a[1,k1],a[1,k2],r[k1,k2]) ;
								  adi    = 0|0|corrdi[k1,k2];
								  adij   = 0|0|0|0|0|(corrdi[k1,k2]*corrdj[k1,k2]) ;
								  adj    = 0|0|corrdj[k1,k2];
								  tempi  = sumc(bvnd1 .* adi) ;
								  tempj  = sumc(bvnd1 .* adj) ;
								  tempij = sumc(bvnd2 .* adij) ;
								else;
								  tempi  = 0 ;
								  tempj  = 0 ;
								  tempij = 0 ;
								endif;
								
															
								VC_mat_di[k1,k2] = tempi ;
								if(k1 ne k2);
								VC_mat_di[k2,k1] = VC_mat_di[k1,k2] ;
								endif;
								
								VC_mat_dj[k1,k2] = tempj ;
								if(k1 ne k2);
								VC_mat_dj[k2,k1] = VC_mat_dj[k1,k2] ;
								endif;
								
								VC_mat_dij[k1,k2] = tempij ;
								if(k1 ne k2);
								VC_mat_dij[k2,k1] = VC_mat_dij[k1,k2] ;
							    endif;
						   endfor;
					   endfor;
						
						cmdi  = VC_mat_di[1:k-1,1:k-1];
						cmdj  = VC_mat_dj[1:k-1,1:k-1];
						cmdij = VC_mat_dij[1:k-1,1:k-1];
						
						trap 1;
						cm = invpd(VC_mat[1:k-1,1:k-1]);
						if scalerr(cm);
						  cm  = inv(VC_mat[1:k-1,1:k-1]);
						endif;
						trap 0;
						
						f1d = (VC_mat_di[k,1:k-1]*cm*cdf_diff[1:k-1,1]) ;
						f2d = (VC_mat[k,1:k-1]*cm*cmdi*cm*cdf_diff[1:k-1,1]) ;
						
						f1dd = (VC_mat_dij[k,1:k-1]*cm*cdf_diff[1:k-1,1]) -  (VC_mat_di[k,1:k-1]*cm*cmdj*cm*cdf_diff[1:k-1,1]) ;
						f2dd = (VC_mat_dj[k,1:k-1]*cm*cmdi*cm*cdf_diff[1:k-1,1]) - (VC_mat[k,1:k-1]*cm*cmdj*cm*cmdi*cm*cdf_diff[1:k-1,1]) - (VC_mat[k,1:k-1]*cm*cmdi*cm*cmdj*cm*cdf_diff[1:k-1,1]) + (VC_mat[k,1:k-1]*cm*cmdij*cm*cdf_diff[1:k-1,1]) ;
						
						p_tempdi  = f1d - f2d ;
						p_tempdij = f1dd - f2dd ;
						
						probkd    = (VC_mat_dj[k,1:k-1]*cm*cdf_diff[1:k-1,1]) -  (VC_mat[k,1:k-1]*cm*cmdj*cm*cdf_diff[1:k-1,1]) ;
						
						f1_d     =  p_tempdi;
						f2       =  prodc(prob)/prob[k,1];
						
						f1_dd    =  p_tempdij*f2;
						f2_d     = ( prob[k,1]*cgrad[row_reqj,col_reqj] - prodc(prob)*probkd ) / (prob[k,1]^2);
						f2_dd    = f2_d*f1_d;
						
						p1_dd    = p1_dd + f1_dd + f2_dd ;
										
					endfor;
				    endif;
                    Hess_out[i,j] = p1_dd;
					if( i ne j);
						Hess_out[j,i] = p1_dd;
				    endif;
			endif;
		 endfor;
	endfor;
	retp(Hess_out);
endp;
			
			
proc(1)=MVNcdfhess_3(a,r,prob,xgrad,cgrad);	
	local ncholerr,total_parm,Hess_out,i,j,p1_dd,x_dj,x_di,f1_d,f2,f1_dd,f2_d,f2_dd,st_col,k,VC_mat,cdf_diff,VC_mat_di,VC_mat_dj,VC_mat_dij;
	local cdf_diffdi,cdf_diffdj,cdf_diffdij,k1,bvnd1,bvnd2,adi,adj,adij,tempi,tempj,tempij,cmdi,cmdj,cmdij,f1d,f2d,f3d,f1dd,f2dd,f3dd,p_tempdi;
	local p_tempdij,probkd,i1,j1,corrdj,corrdi,row_reqi,col_reqi,row_reqj,col_reqj,cm;
	
	ncholerr = (cols(a)*(cols(a)+1))/2;
	total_parm = ncholerr + cols(a) ;
	Hess_out = zeros(total_parm,total_parm);
	for i(1,total_parm,1);
		for j(i,total_parm,1);				
			if(i <= cols(a) and j > cols(a));
				
				p1_dd     = 0;
				x_di      = zeros(1,cols(a));
				x_di[1,i] = 1;
				
				j1 = j - cols(a);
				   
				corrdj       = zeros(ncholerr,1);
				corrdj[j1,1] = 1;
				corrdj       = xpnd(corrdj);
				
				for m1(1,rows(corrdj),1);
					for m2(1,m1,1);
					   if(corrdj[m1,m2] == 1);
						  row_reqj = m1;
						  col_reqj = m2;
						  break;
					   endif;
					endfor;
				endfor;
				
				if( ((sumc(sumc(corrdj))) ne 1) );
				if(i==1);
					f1_d     =  pdfn(a[1,1])*x_di[1,1];
					f2       =  prodc(prob)/prob[i,1];
					f1_dd    =  0;
					f2_dd    =  cgrad[row_reqj,col_reqj]/prob[i,1];  
					f2_dd    =  f2_dd*f1_d; 
					p1_dd    =  p1_dd + f1_dd + f2_dd ;
					st_col   =  i + 1;
				else;
					st_col   = i;
				endif;
				
				
				for k(st_col,cols(a),1);
				
					VC_mat = zeros(k,k);
					cdf_diff = {};
						
					VC_mat_di  = zeros(k,k);
					VC_mat_dj  = zeros(k,k);
					VC_mat_dij = zeros(k,k);
						
					cdf_diffdi  = {};
					
					for k1(1,k,1);
							cdf_diff    = cdf_diff     | (1-cdfn(a[1,k1])) ;
							cdf_diffdi  = cdf_diffdi   | (-pdfn(a[1,k1])*x_di[1,k1]) ;
														
							for k2(k1,k,1);
								
								VC_mat[k1,k2] = cdfbvn(a[1,k1],a[1,k2],r[k1,k2]) - ( cdfn(a[1,k1])*cdfn(a[1,k2]) ) ;
								VC_mat[k2,k1] = VC_mat[k1,k2] ;
								
								if(k1 ne k2);
								  bvnd1  = cdfbvn_grad(a[1,k1],a[1,k2],r[k1,k2]) ;
								  bvnd2  = cdfbvn_Hess(a[1,k1],a[1,k2],r[k1,k2]) ;
								  adi    = x_di[1,k1]|x_di[1,k2]|0;
								  adij   = 0|0|(x_di[1,k1]*corrdj[k1,k2])|0|(x_di[1,k2]*corrdj[k1,k2])|0 ;
								  adj    = 0|0|corrdj[k1,k2];
								  tempi  = sumc(bvnd1 .* adi) ;
								  tempj  = sumc(bvnd1 .* adj) ;
								  tempij = sumc(bvnd2 .* adij) ;
								else;
								  bvnd1  = (pdfn(a[1,k1])|0|0);
								  bvnd2  = (pdfnd(a[1,k1])|0|0);
								  adi    = x_di[1,k1]|0|0;
								  adij   = (x_di[1,k1]*x_di[1,k1])|0|0;
								  adj    = 0|0|0;
								  tempi  = sumc(bvnd1 .* adi) ;
								  tempj  = 0;
								  tempij = 0;
								endif;
								
								VC_mat_di[k1,k2] = tempi - (pdfn(a[1,k1])*x_di[1,k1]*cdfn(a[1,k2])) - (cdfn(a[1,k1])*pdfn(a[1,k2])*x_di[1,k2]);
								if(k1 ne k2);
								VC_mat_di[k2,k1] = VC_mat_di[k1,k2] ;
								endif;
								
								VC_mat_dj[k1,k2] = tempj ;
								if(k1 ne k2);
								VC_mat_dj[k2,k1] = VC_mat_dj[k1,k2] ;
								endif;
								
								VC_mat_dij[k1,k2] = tempij ;
								if(k1 ne k2);
								VC_mat_dij[k2,k1] = VC_mat_dij[k1,k2] ;
							    endif;
							endfor;
					endfor;
					
					cmdi  = VC_mat_di[1:k-1,1:k-1];
					cmdj  = VC_mat_dj[1:k-1,1:k-1];
					cmdij = VC_mat_dij[1:k-1,1:k-1];
					
					trap 1;
					cm = invpd(VC_mat[1:k-1,1:k-1]);
					if scalerr(cm);
					  cm  = inv(VC_mat[1:k-1,1:k-1]);
					endif;
					trap 0;
					
					f1d       = (VC_mat_di[k,1:k-1]*cm*cdf_diff[1:k-1,1]) ;
					f2d       = (VC_mat[k,1:k-1]*cm*cmdi*cm*cdf_diff[1:k-1,1]);
					f3d       = (VC_mat[k,1:k-1]*cm*cdf_diffdi[1:k-1,1]) ;
					
					f1dd      = (VC_mat_dij[k,1:k-1]*cm*cdf_diff[1:k-1,1]) - (VC_mat_di[k,1:k-1]*cm*cmdj*cm*cdf_diff[1:k-1,1]) ;
					f2dd      = (VC_mat_dj[k,1:k-1]*cm*cmdi*cm*cdf_diff[1:k-1,1]) - (VC_mat[k,1:k-1]*cm*cmdj*cm*cmdi*cm*cdf_diff[1:k-1,1]) - (VC_mat[k,1:k-1]*cm*cmdi*cm*cmdj*cm*cdf_diff[1:k-1,1]) + (VC_mat[k,1:k-1]*cm*cmdij*cm*cdf_diff[1:k-1,1]);
					f3dd      = (VC_mat_dj[k,1:k-1]*cm*cdf_diffdi[1:k-1,1]) - (VC_mat[k,1:k-1]*cm*cmdj*cm*cdf_diffdi[1:k-1,1]) ;
						
					p_tempdi  = (pdfn(a[1,k])*x_di[1,k]) +  f1d - f2d + f3d ;
					p_tempdij = f1dd - f2dd + f3dd ;
					
					probkd    = (VC_mat_dj[k,1:k-1]*cm*cdf_diff[1:k-1,1]) -  (VC_mat[k,1:k-1]*cm*cmdj*cm*cdf_diff[1:k-1,1]);
						
					f1_d     =  p_tempdi;
					f2       =  prodc(prob)/prob[k,1];
						
					f1_dd    =  p_tempdij*f2;
					f2_d     = ( prob[k,1]*cgrad[row_reqj,col_reqj] - prodc(prob)*probkd ) / (prob[k,1]^2);
					f2_dd    = f2_d*f1_d;
						
					p1_dd    = p1_dd + f1_dd + f2_dd ;
			    endfor;
				endif;
						
			Hess_out[i,j] = p1_dd;
			if( i ne j);
			  Hess_out[j,i] = p1_dd;
		    endif;
			endif;	
		 endfor;
	endfor;
	retp(Hess_out);
endp;

 proc(1)= pdfnd(x);
    local d,p,p1,p2,p3,grad1,grad,store,ie;
	 p1 = exp(-0.5*x*x);
	 p2 = sqrt(2*pi);
	 p  = p1/p2;
	 store = -p*x;
	 retp(store);
 endp;

proc(1) = HaltonSequence(n,dim);
	local prim,hs,idim,b,idx;
	prim = { 2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97 101 103 107 109 113 127 131 137 139 149 151 157 163 167 173 179 181 191 193 197 199 211 223 227 229 233 239 241 251 257 263 269 271 277 281 
		     283 293 307 311 313 317 331 337 347 349 353 359 367 373 379 383 389 397 401 409 419 421 431 433 439 443 449 457 461 463 467 479 487 491 499 503 509 521 523 541 };
	hs = zeros(n,dim);
    for idim(1,dim,1);
	  b = prim[1,idim];
	  hs[.,idim] = halton(n,b);
	endfor;
    retp(hs[11:n,1:dim]);
endp;

proc(1)= halton(n,s);
local phi,i,j,y,x,k;
k=floor(ln(n+1) ./ ln(s));    
phi={0};
i=1;
do while i .le k;  
  x=phi;
   j=1;
  do while j .lt s;
     y=phi+(j/s^i);
     x=x|y;
     j=j+1;
  endo;
  phi=x;
  i=i+1;
endo;
 
x=phi;
 j=1;
do while j .lt s .and rows(x) .lt (n+1);  
   y=phi+(j/s^i);
   x=x|y;
   j=j+1;
 endo;

phi=x[2:(n+1),1];  
retp(phi);
endp;

proc (3) = pdfmvnac(a,r,s);
local m,w,s1,n1,p,j,x,rho,y,z,z1,z3,z2,cond,k,omega21,omega11,omega55,condk,pcomb,cm,int_count;
local rhovec,c,rho1,rho2,g3,g5,g10,g11,g12,g13,g14,g15,g20,g25,g30,g53,g31,g35,g36,g40,g45,g46,g47,g50,g51;
local grff,gw,condpass,sk,l,ab,ir,jr,res2,g80,g81,g59,kk,g49,g65,g55,mm,res,res1,aaa1,g56,g57,g58,g60,g61,g62,gr,gr1,gw1;
local gw2,gr2,gr3,aaa,gwf,grf,gwfinal,grfinal,invomg11,nnnn,gggg,ssss1,aa,t,newper,rnum,ss;

  m = cols(a);
  w = {};
  for z ( 1, _randper, 1);
    { rnum, ss } = rndKMu(1,m,s);
	aa = seqa(1,1,m)~(rnum)';
	aa = sortc(aa,2);
	w  = w|((aa[.,1])');			
  endfor;
  s1=ss[1];

w=w';
n1 = cols(w);
p = 0;
j = 1;

a = a.*(a .<5.7)+5.7*(a.>=5.7);     
a = a.*(a .>-5.7)-5.7*(a.<=-5.7);  

ab = a';
condpass={};
do until j > n1;
  x = ab[w[.,j]];
  rho = submat(r,w[.,j],w[.,j]);
  y = reshape(((ones(m,1).*.x)'),m,m);
  z = cdfbvn(x,y,rho);
  z = diagrv(z,cdfn(x));
  z1 = cdfn(x).*cdfn(y);
  z3 = cdfn(x);
  z2 = 1-z3;
  cond = 1;
  k = 3;
  do until k > m;
    omega21 = z[k,1:k-1]-z1[k,1:k-1];
    omega11 = z[1:k-1,1:k-1]-z1[1:k-1,1:k-1];
    trap 1;
    cm = invpd(omega11);
    if scalerr(cm);
      cm=inv(omega11);
    endif;
    trap 0;
    condk = z3[k]+omega21*(cm)*z2[1:k-1];  
    cond=cond*condk;
    k = k+1;
  endo;
  pcomb = z[1,2]*cond;
  condpass = condpass~cond;
  p = p+pcomb;    
  j=j+1;
endo;

gwfinal = zeros(1,m);
grfinal = zeros(1,((m-1)*(m)/2));
j=1;
do until j > n1;
  x = ab[w[.,j]];
  rho = submat(r,w[.,j],w[.,j]);
  rhovec = {};
  c=1;
  do until c==cols(rho);
     rhovec = rhovec~rho[c,c+1:cols(rho)];
     c=c+1;
  endo;
  y = reshape(((ones(m,1).*.x)'),m,m);
  z = cdfbvn(x,y,rho);
  z = diagrv(z,cdfn(x));
  z1 = cdfn(x).*cdfn(y);
  z3 = cdfn(x);
  z2 = 1-z3;
  rho1 = diagrv(rho,zeros(m,1));
  rho2 = sqrt(1-rho1^2);
  g3 = pdfn(x);
  g5 = (y-rho1.*x)./rho2;
  g10 = g3.*cdfn(g5);
  g11 = g3.*cdfn(y);
  g12 = g10-g11;
  g13 = g12;
  g14 = g3.*(1-2*cdfn(x));
  g15 = diagrv(g13,g14);
  g20 = -g3;

  g25 = (1/rho2).*g3.*pdfn(g5);
  g25 = diagrv(g25,zeros(m,1));
  

  g30 = g10[1,2]~g10[2,1]~zeros(1,m-2);
  g53 = g25[1,2]~zeros(1,cols(rhovec)-1);


  k = 3;
  gw1 = zeros(1,m);
  gr1 = zeros(1,cols(rhovec));
  do until k > m;
    omega21 = z[k,1:k-1]-z1[k,1:k-1];
    omega11 = z[1:k-1,1:k-1]-z1[1:k-1,1:k-1];
    trap 1;
    invomg11 = invpd(omega11); 
    if scalerr(invomg11);
      invomg11=inv(omega11);
    endif;
    trap 0;  
    condk = z3[k]+omega21*invomg11*z2[1:k-1];
    g31 = zeros(1,m);
    g31[k] = g3[k];
    l = 1;
    g40={};
    g46={};
    g51={};
    g81 = z2[1:k-1];    
    do until l == k;
      g35 = zeros(k-1,k-1);
      g35[l,1:k-1] = g15[l,1:k-1];
      g35=g35+g35';
      g35 = diagrv(g35,(diag(g35)/2));
      g36 = -invomg11*g35*invomg11;
      g36 = omega21*g36*g81;
      g40=g40~g36;

      g45 = zeros(1,k-1);
      g45[l] = g15[l,k];
      g46 = g46~(g45*invomg11*g81);

      g50 = zeros(k-1,1);
      g50[l]=g20[l];
      g51 = g51~(omega21*invomg11*g50);
      l=l+1;
    endo;

    g40 = g40~zeros(1,m-(k-1));
    
    g49 = g15[k,1:k-1];
    g46 = g46~(g49*invomg11*g81);

    g47 = zeros(1,m);
    g47[1:cols(g46)] = g46;

    g51 =g51~zeros(1,m-(k-1));

    gw = (g31+g40+g47+g51)*((condpass[j])/condk).*z[1,2];
 
    /* Start here for gradients with respect to rho parameters */


    l=1;
    kk = cols(rhovec);
    g60={};
    g65={};
    do until l>kk;
      g55 = zeros(1,kk);
      g55[l]=1; 
      mm = 1;
      sk=0;
      g56 = zeros(m,m);
      do until mm>m-1;
        g56[mm,mm+1:m] = (g55[sk+1:sk+m-mm]);
        sk=sk+m-mm;
        mm=mm+1;
      endo; 
      g57=g56+g56';
      g59 = g57.*g25;
      g59 = g59[1:k-1,1:k-1];
      g58 = -invomg11*g59*invomg11;
      g58 = omega21*g58*z2[1:k-1];
      g60 = g60~g58;

      g61 = g57[k,1:k-1].*g25[k,1:k-1];
      g62 = g61*invomg11*z2[1:k-1];
      g65 = g65~g62;      
      l=l+1;
    endo;
  
    gr = (g60+g65)*((condpass[j])/condk).*z[1,2];
    gw1 = gw+gw1;
    gr1 = gr+gr1;
    k=k+1;
  endo;
  gw2 = (g30.*condpass[j])+gw1;
  gr2 = (g53.*condpass[j])+gr1;

  mm=1;
  sk=0;
  gr3 = zeros(m,m);
  do until mm>m-1;
    gr3[mm,mm+1:m] = (gr2[sk+1:sk+m-mm]);
    sk=sk+m-mm;
    mm=mm+1;
  endo; 

  /* commands below to resequence gradients based on permutation */
  
  aaa = indnv(seqa(1,1,m),w[.,j]);
  gwf = gw2[aaa];
  grf = submat(gr3,aaa,aaa); 

  res = {};
  ir = 1;
  do until ir == m;
    jr = ir+1;
    res = res|((ones(m-ir,1).*.w[ir,j])~w[jr:m,j]);
    ir=ir+1;
  endo;

  res=res';
  res2={};
  t=1;
  do until t>cols(res);
    res2 = res2~sortc(res[.,t],1);
    t=t+1;
  endo;

  res2=res2';
  res1 = combinate(m,2);
  res1 = res1[.,1] .*(10^(trunc (ln(res1[.,2])./ln(10))+1)) + res1[.,2];
  res2 = res2[.,1] .*(10^(trunc (ln(res2[.,2])./ln(10))+1)) + res2[.,2];
 
  aaa1 = indnv(res1,res2);
  grf = gr2[aaa1];
  gwfinal = gwfinal+gwf;
  grfinal = grfinal+grf;
  j=j+1;
endo;
if ((p/n1) >0 and (p/n1) <=1);
  retp(p/n1,(gwfinal~grfinal)/n1,s1);
else;
 { nnnn,gggg,ssss1 } = pdfmvnac(a,r,s1);
  retp(nnnn,gggg,ssss1);
endif;  
endp;

proc(3) = pdfmvnGHK(a,r,s);
	local nintegdim,uniRands,probab,chol_r,ghkArr,etaArr,ghkElem,gggg,gg_b_elem,gg_sig_elem,startRow,ghkElem1,d_ghkElem1,rnum,ss;
	
	if(abscissae_trunc eq 1);
		a = a.*(a .<5.7)+5.7*(a.>=5.7);      
        a = a.*(a .>-5.7)-5.7*(a.<=-5.7); 
	endif;
	
	nintegdim = rows(r);
	{ rnum, ss } = rndKMu(1,1,s);
	s = ss[1];
	startRow = ceil(rnum*(_halt_maxdraws-_halt_numdraws-1));
	uniRands = allHaltDraws[startRow:startRow+_halt_numdraws-1,1:nintegdim];
	chol_r = chol(r);
	ghkArr = zeros(nrep,nintegdim);
	etaArr = zeros(nrep,(nintegdim-1));
	ghkArr[.,1] = ones(nrep,1) .*. (cdfn( a[1,1]/chol_r[1,1]));  
    
	/*Probability Calculation */
	for iintegdim (1,nintegdim-1,1);
		etaArr[.,iintegdim]= cdfni(uniRands[.,iintegdim] .* ghkArr[.,iintegdim]);
		ghkElem = a[1,iintegdim+1];
        ghkElem1 = 0;
		for jintegdim (1,iintegdim,1);
			ghkElem1 = ghkElem1 - chol_r[jintegdim,iintegdim+1]*etaArr[.,jintegdim];
		endfor;
		ghkElem1 = ghkElem1 + ghkElem;
		ghkArr[.,(iintegdim+1)]=cdfn(ghkElem1/chol_r[(iintegdim+1),(iintegdim+1)]);
	endfor;
	probab = ghkArr[.,1];
	for iintegdim(2,nintegdim,1);
		probab = probab .* ghkArr[.,iintegdim];
	endfor;
	
	/*Gradient w.r.t x elements */
	ThreadBegin;
	gg_b_elem   = GHK_xgrad(a,r,probab,chol_r,etaArr,uniRands,ghkArr);
	ThreadEnd;
	
	/*Gradient w.r.t r elements */
	ThreadBegin;
	gg_sig_elem = GHK_rgrad(a,r,probab,chol_r,etaArr,uniRands,ghkArr);
	ThreadEnd;
	ThreadJoin;
	
	probab = meanc(probab);
	gggg = gg_b_elem~gg_sig_elem;
	retp(probab,gggg,s);
endp;

	
	proc(1) = GHK_xgrad(a,r,probab,chol_r,etaArr,uniRands,ghkArr);
	local d_ghkArr,d_etaArr,d_ghkElem,d_ll1,d_dutilALL,nintegdim,gg_b_elem,ghkElem,ghkElem1,d_ghkElem1;
	
	nintegdim = rows(r);
	d_dutilALL = reshape(eye(nintegdim),1,nintegdim*nintegdim);
	gg_b_elem = {};
    for ivar (1,nintegdim,1);    
		d_ghkArr = ones(nrep,1) * pdfn( a[1,1]/chol_r[1,1]) * (d_dutilALL[1,(ivar-1)*(nintegdim)+1]/chol_r[1,1]);
		d_etaArr = {};

        for iintegdim (1,nintegdim-1,1);
			ghkElem = a[1,iintegdim+1];
			ghkElem1 = 0;
            for jintegdim (1,iintegdim,1);
				ghkElem1 = ghkElem1 - chol_r[jintegdim,iintegdim+1]*etaArr[.,jintegdim];
            endfor;
			
			ghkElem = ghkElem + ghkElem1;
            d_etaArr = d_etaArr~(   (1/pdfn(etaArr[.,iintegdim]))  .*  ( uniRands[.,iintegdim] .* d_ghkArr[.,iintegdim])   );
            d_ghkElem = d_dutilALL[1,(ivar-1)*nintegdim+iintegdim+1];
			d_ghkElem1 = 0;
            for jintegdim (1,iintegdim,1);
				d_ghkElem1 = d_ghkElem1 - chol_r[jintegdim,iintegdim+1]*d_etaArr[.,jintegdim];
            endfor;
			d_ghkElem = d_ghkElem + d_ghkElem1;
			d_ghkArr = d_ghkArr~(   pdfn(ghkElem/chol_r[iintegdim+1,iintegdim+1]) .* (d_ghkElem/chol_r[iintegdim+1,iintegdim+1])  );
		endfor; 
            
        d_ll1 = 0;
        for iintegdim (1,nintegdim,1);
			d_ll1 = d_ll1 + probab .*  d_ghkArr[.,iintegdim]./ ghkArr[.,iintegdim];
        endfor;    
        gg_b_elem = gg_b_elem~(d_ll1);
	endfor;   
	gg_b_elem = meanc(gg_b_elem)';
	retp(gg_b_elem);
    endp;

	proc(1) = GHK_rgrad(a,r,probab,chol_r,etaArr,uniRands,ghkArr);
		local d_omega11,d_omega,d_chol_omega,temp_sub,d_temp_sub,gg_sig_elem,tempcntr,icov,chol_omega,nintegdim,d_ghkArr,d_etaArr,ghkElem,ghkElem1,d_ghkElem,d_ll1;
        
		nintegdim = rows(r);
		gg_sig_elem = {};
        
        chol_omega= zeros(nintegdim,nintegdim);
		icov = 0;
        for irow (1,nintegdim-1,1); 
		for icol (irow+1,nintegdim,1); 
			icov = icov+1;

			d_omega = zeros(nintegdim,nintegdim);
			d_omega[irow,icol]=1;d_omega[icol,irow]=1;
			
            d_chol_omega = zeros(nintegdim,nintegdim);
            for idim (1,nintegdim,1);                    
                temp_sub = 0;d_temp_sub = 0;
                for kdim (1,idim-1,1);
                    temp_sub = temp_sub + chol_omega[kdim,idim]*chol_omega[kdim,idim];
                    d_temp_sub = d_temp_sub + d_chol_omega[kdim,idim]*chol_omega[kdim,idim] + chol_omega[kdim,idim]*d_chol_omega[kdim,idim];
                endfor;
                chol_omega[idim,idim] = sqrt(r[idim,idim] - temp_sub);
                d_chol_omega[idim,idim] = (1/2/chol_omega[idim,idim])*(d_omega[idim,idim] - d_temp_sub);
                
                for jdim(idim+1,nintegdim,1);
                    temp_sub = 0;d_temp_sub = 0;
                    for kdim (1,idim-1,1);
                        temp_sub = temp_sub + chol_omega[kdim,idim]*chol_omega[kdim,jdim];
                        d_temp_sub = d_temp_sub + d_chol_omega[kdim,idim]*chol_omega[kdim,jdim] + chol_omega[kdim,idim]*d_chol_omega[kdim,jdim];
                    endfor;
                    chol_omega[idim,jdim] = (r[idim,jdim] - temp_sub)/chol_omega[idim,idim];
                    d_chol_omega[idim,jdim] = (d_omega[idim,jdim] - d_temp_sub)/chol_omega[idim,idim] + (r[idim,jdim] - temp_sub)/(-(chol_omega[idim,idim]^2))*d_chol_omega[idim,idim]  ;
                endfor;
            endfor;
            d_ghkArr = ones(nrep,1) * pdfn( a[1,1]/chol_omega[1,1]) * (-a[1,1]/((chol_omega[1,1])^2)) * d_chol_omega[1,1]    ;
            d_etaArr = {};
    
            for iintegdim (1,nintegdim-1,1);
                ghkElem = a[1,iintegdim+1];
				ghkElem1 = 0;
                for jintegdim (1,iintegdim,1);
                    ghkElem1 = ghkElem1 - chol_omega[jintegdim,iintegdim+1]*etaArr[.,jintegdim];
                endfor;
                
				ghkElem = ghkElem + ghkElem1;
                d_etaArr = d_etaArr~(    1/pdfn( cdfni(uniRands[.,iintegdim] .* ghkArr[.,iintegdim]) ) .*  ( uniRands[.,iintegdim] .* d_ghkArr[.,iintegdim])         );
                d_ghkElem = 0;
                for jintegdim (1,iintegdim,1);
                    d_ghkElem = d_ghkElem - d_chol_omega[jintegdim,iintegdim+1]*etaArr[.,jintegdim] - chol_omega[jintegdim,iintegdim+1]*d_etaArr[.,jintegdim];
                endfor;
                d_ghkArr = d_ghkArr~(   pdfn(ghkElem/chol_omega[iintegdim+1,iintegdim+1]) .* (   d_ghkElem/chol_omega[iintegdim+1,iintegdim+1] - ghkElem/(chol_omega[iintegdim+1,iintegdim+1]^2)*d_chol_omega[iintegdim+1,iintegdim+1]    )  );

            endfor; 

            d_ll1 = 0;
            for iintegdim (1,nintegdim,1);
                d_ll1 = d_ll1 + probab .*  d_ghkArr[.,iintegdim]./ ghkArr[.,iintegdim];
            endfor; 
                          
            gg_sig_elem = gg_sig_elem~(d_ll1);
        endfor;
		endfor;
	gg_sig_elem = meanc(gg_sig_elem)';
	retp(gg_sig_elem);
endp;
